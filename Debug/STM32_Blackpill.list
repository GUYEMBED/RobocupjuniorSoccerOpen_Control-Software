
STM32_Blackpill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e820  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000093c  0800e9c0  0800e9c0  0000f9c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2fc  0800f2fc  000111d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f2fc  0800f2fc  000102fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f304  0800f304  000111d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f304  0800f304  00010304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800f30c  0800f30c  0001030c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800f314  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001aa0  200001d8  0800f4e8  000111d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001c78  0800f4e8  00011c78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005da29  00000000  00000000  00011204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008d4b  00000000  00000000  0006ec2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  00077978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001197  00000000  00000000  00079018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000223f0  00000000  00000000  0007a1af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a41f  00000000  00000000  0009c59f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1ac6  00000000  00000000  000c69be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00168484  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008898  00000000  00000000  001684c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00170d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e9a8 	.word	0x0800e9a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800e9a8 	.word	0x0800e9a8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2uiz>:
 8000b88:	004a      	lsls	r2, r1, #1
 8000b8a:	d211      	bcs.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d211      	bcs.n	8000bb6 <__aeabi_d2uiz+0x2e>
 8000b92:	d50d      	bpl.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d40e      	bmi.n	8000bbc <__aeabi_d2uiz+0x34>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_d2uiz+0x3a>
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b9be 	b.w	8000ffc <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f83c 	bl	8000d04 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff33 	bl	8000b0c <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fca9 	bl	8000628 <__aeabi_dmul>
 8000cd6:	f7ff ff57 	bl	8000b88 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc2a 	bl	8000534 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fca0 	bl	8000628 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fae2 	bl	80002b8 <__aeabi_dsub>
 8000cf4:	f7ff ff48 	bl	8000b88 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <__udivmoddi4>:
 8000d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d08:	9d08      	ldr	r5, [sp, #32]
 8000d0a:	468e      	mov	lr, r1
 8000d0c:	4604      	mov	r4, r0
 8000d0e:	4688      	mov	r8, r1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d14a      	bne.n	8000daa <__udivmoddi4+0xa6>
 8000d14:	428a      	cmp	r2, r1
 8000d16:	4617      	mov	r7, r2
 8000d18:	d962      	bls.n	8000de0 <__udivmoddi4+0xdc>
 8000d1a:	fab2 f682 	clz	r6, r2
 8000d1e:	b14e      	cbz	r6, 8000d34 <__udivmoddi4+0x30>
 8000d20:	f1c6 0320 	rsb	r3, r6, #32
 8000d24:	fa01 f806 	lsl.w	r8, r1, r6
 8000d28:	fa20 f303 	lsr.w	r3, r0, r3
 8000d2c:	40b7      	lsls	r7, r6
 8000d2e:	ea43 0808 	orr.w	r8, r3, r8
 8000d32:	40b4      	lsls	r4, r6
 8000d34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d38:	fa1f fc87 	uxth.w	ip, r7
 8000d3c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d40:	0c23      	lsrs	r3, r4, #16
 8000d42:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d46:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x62>
 8000d52:	18fb      	adds	r3, r7, r3
 8000d54:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d58:	f080 80ea 	bcs.w	8000f30 <__udivmoddi4+0x22c>
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	f240 80e7 	bls.w	8000f30 <__udivmoddi4+0x22c>
 8000d62:	3902      	subs	r1, #2
 8000d64:	443b      	add	r3, r7
 8000d66:	1a9a      	subs	r2, r3, r2
 8000d68:	b2a3      	uxth	r3, r4
 8000d6a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d6e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d76:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d7a:	459c      	cmp	ip, r3
 8000d7c:	d909      	bls.n	8000d92 <__udivmoddi4+0x8e>
 8000d7e:	18fb      	adds	r3, r7, r3
 8000d80:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d84:	f080 80d6 	bcs.w	8000f34 <__udivmoddi4+0x230>
 8000d88:	459c      	cmp	ip, r3
 8000d8a:	f240 80d3 	bls.w	8000f34 <__udivmoddi4+0x230>
 8000d8e:	443b      	add	r3, r7
 8000d90:	3802      	subs	r0, #2
 8000d92:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d96:	eba3 030c 	sub.w	r3, r3, ip
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	b11d      	cbz	r5, 8000da6 <__udivmoddi4+0xa2>
 8000d9e:	40f3      	lsrs	r3, r6
 8000da0:	2200      	movs	r2, #0
 8000da2:	e9c5 3200 	strd	r3, r2, [r5]
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d905      	bls.n	8000dba <__udivmoddi4+0xb6>
 8000dae:	b10d      	cbz	r5, 8000db4 <__udivmoddi4+0xb0>
 8000db0:	e9c5 0100 	strd	r0, r1, [r5]
 8000db4:	2100      	movs	r1, #0
 8000db6:	4608      	mov	r0, r1
 8000db8:	e7f5      	b.n	8000da6 <__udivmoddi4+0xa2>
 8000dba:	fab3 f183 	clz	r1, r3
 8000dbe:	2900      	cmp	r1, #0
 8000dc0:	d146      	bne.n	8000e50 <__udivmoddi4+0x14c>
 8000dc2:	4573      	cmp	r3, lr
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xc8>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 8105 	bhi.w	8000fd6 <__udivmoddi4+0x2d2>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	4690      	mov	r8, r2
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e5      	beq.n	8000da6 <__udivmoddi4+0xa2>
 8000dda:	e9c5 4800 	strd	r4, r8, [r5]
 8000dde:	e7e2      	b.n	8000da6 <__udivmoddi4+0xa2>
 8000de0:	2a00      	cmp	r2, #0
 8000de2:	f000 8090 	beq.w	8000f06 <__udivmoddi4+0x202>
 8000de6:	fab2 f682 	clz	r6, r2
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	f040 80a4 	bne.w	8000f38 <__udivmoddi4+0x234>
 8000df0:	1a8a      	subs	r2, r1, r2
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df8:	b280      	uxth	r0, r0
 8000dfa:	b2bc      	uxth	r4, r7
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e02:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e0a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x11e>
 8000e12:	18fb      	adds	r3, r7, r3
 8000e14:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e18:	d202      	bcs.n	8000e20 <__udivmoddi4+0x11c>
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	f200 80e0 	bhi.w	8000fe0 <__udivmoddi4+0x2dc>
 8000e20:	46c4      	mov	ip, r8
 8000e22:	1a9b      	subs	r3, r3, r2
 8000e24:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e28:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e2c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e30:	fb02 f404 	mul.w	r4, r2, r4
 8000e34:	429c      	cmp	r4, r3
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0x144>
 8000e38:	18fb      	adds	r3, r7, r3
 8000e3a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x142>
 8000e40:	429c      	cmp	r4, r3
 8000e42:	f200 80ca 	bhi.w	8000fda <__udivmoddi4+0x2d6>
 8000e46:	4602      	mov	r2, r0
 8000e48:	1b1b      	subs	r3, r3, r4
 8000e4a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e4e:	e7a5      	b.n	8000d9c <__udivmoddi4+0x98>
 8000e50:	f1c1 0620 	rsb	r6, r1, #32
 8000e54:	408b      	lsls	r3, r1
 8000e56:	fa22 f706 	lsr.w	r7, r2, r6
 8000e5a:	431f      	orrs	r7, r3
 8000e5c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e60:	fa20 f306 	lsr.w	r3, r0, r6
 8000e64:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e68:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e6c:	4323      	orrs	r3, r4
 8000e6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e72:	fa1f fc87 	uxth.w	ip, r7
 8000e76:	fbbe f0f9 	udiv	r0, lr, r9
 8000e7a:	0c1c      	lsrs	r4, r3, #16
 8000e7c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e80:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e84:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e88:	45a6      	cmp	lr, r4
 8000e8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e8e:	d909      	bls.n	8000ea4 <__udivmoddi4+0x1a0>
 8000e90:	193c      	adds	r4, r7, r4
 8000e92:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e96:	f080 809c 	bcs.w	8000fd2 <__udivmoddi4+0x2ce>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	f240 8099 	bls.w	8000fd2 <__udivmoddi4+0x2ce>
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	443c      	add	r4, r7
 8000ea4:	eba4 040e 	sub.w	r4, r4, lr
 8000ea8:	fa1f fe83 	uxth.w	lr, r3
 8000eac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb0:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000eb8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ebc:	45a4      	cmp	ip, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1ce>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ec6:	f080 8082 	bcs.w	8000fce <__udivmoddi4+0x2ca>
 8000eca:	45a4      	cmp	ip, r4
 8000ecc:	d97f      	bls.n	8000fce <__udivmoddi4+0x2ca>
 8000ece:	3b02      	subs	r3, #2
 8000ed0:	443c      	add	r4, r7
 8000ed2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ed6:	eba4 040c 	sub.w	r4, r4, ip
 8000eda:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ede:	4564      	cmp	r4, ip
 8000ee0:	4673      	mov	r3, lr
 8000ee2:	46e1      	mov	r9, ip
 8000ee4:	d362      	bcc.n	8000fac <__udivmoddi4+0x2a8>
 8000ee6:	d05f      	beq.n	8000fa8 <__udivmoddi4+0x2a4>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x1fe>
 8000eea:	ebb8 0203 	subs.w	r2, r8, r3
 8000eee:	eb64 0409 	sbc.w	r4, r4, r9
 8000ef2:	fa04 f606 	lsl.w	r6, r4, r6
 8000ef6:	fa22 f301 	lsr.w	r3, r2, r1
 8000efa:	431e      	orrs	r6, r3
 8000efc:	40cc      	lsrs	r4, r1
 8000efe:	e9c5 6400 	strd	r6, r4, [r5]
 8000f02:	2100      	movs	r1, #0
 8000f04:	e74f      	b.n	8000da6 <__udivmoddi4+0xa2>
 8000f06:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f0a:	0c01      	lsrs	r1, r0, #16
 8000f0c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f10:	b280      	uxth	r0, r0
 8000f12:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f16:	463b      	mov	r3, r7
 8000f18:	4638      	mov	r0, r7
 8000f1a:	463c      	mov	r4, r7
 8000f1c:	46b8      	mov	r8, r7
 8000f1e:	46be      	mov	lr, r7
 8000f20:	2620      	movs	r6, #32
 8000f22:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f26:	eba2 0208 	sub.w	r2, r2, r8
 8000f2a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f2e:	e766      	b.n	8000dfe <__udivmoddi4+0xfa>
 8000f30:	4601      	mov	r1, r0
 8000f32:	e718      	b.n	8000d66 <__udivmoddi4+0x62>
 8000f34:	4610      	mov	r0, r2
 8000f36:	e72c      	b.n	8000d92 <__udivmoddi4+0x8e>
 8000f38:	f1c6 0220 	rsb	r2, r6, #32
 8000f3c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f40:	40b7      	lsls	r7, r6
 8000f42:	40b1      	lsls	r1, r6
 8000f44:	fa20 f202 	lsr.w	r2, r0, r2
 8000f48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f52:	b2bc      	uxth	r4, r7
 8000f54:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb08 f904 	mul.w	r9, r8, r4
 8000f62:	40b0      	lsls	r0, r6
 8000f64:	4589      	cmp	r9, r1
 8000f66:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f6a:	b280      	uxth	r0, r0
 8000f6c:	d93e      	bls.n	8000fec <__udivmoddi4+0x2e8>
 8000f6e:	1879      	adds	r1, r7, r1
 8000f70:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f74:	d201      	bcs.n	8000f7a <__udivmoddi4+0x276>
 8000f76:	4589      	cmp	r9, r1
 8000f78:	d81f      	bhi.n	8000fba <__udivmoddi4+0x2b6>
 8000f7a:	eba1 0109 	sub.w	r1, r1, r9
 8000f7e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f82:	fb09 f804 	mul.w	r8, r9, r4
 8000f86:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f8a:	b292      	uxth	r2, r2
 8000f8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f90:	4542      	cmp	r2, r8
 8000f92:	d229      	bcs.n	8000fe8 <__udivmoddi4+0x2e4>
 8000f94:	18ba      	adds	r2, r7, r2
 8000f96:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f9a:	d2c4      	bcs.n	8000f26 <__udivmoddi4+0x222>
 8000f9c:	4542      	cmp	r2, r8
 8000f9e:	d2c2      	bcs.n	8000f26 <__udivmoddi4+0x222>
 8000fa0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fa4:	443a      	add	r2, r7
 8000fa6:	e7be      	b.n	8000f26 <__udivmoddi4+0x222>
 8000fa8:	45f0      	cmp	r8, lr
 8000faa:	d29d      	bcs.n	8000ee8 <__udivmoddi4+0x1e4>
 8000fac:	ebbe 0302 	subs.w	r3, lr, r2
 8000fb0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fb4:	3801      	subs	r0, #1
 8000fb6:	46e1      	mov	r9, ip
 8000fb8:	e796      	b.n	8000ee8 <__udivmoddi4+0x1e4>
 8000fba:	eba7 0909 	sub.w	r9, r7, r9
 8000fbe:	4449      	add	r1, r9
 8000fc0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fc4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc8:	fb09 f804 	mul.w	r8, r9, r4
 8000fcc:	e7db      	b.n	8000f86 <__udivmoddi4+0x282>
 8000fce:	4673      	mov	r3, lr
 8000fd0:	e77f      	b.n	8000ed2 <__udivmoddi4+0x1ce>
 8000fd2:	4650      	mov	r0, sl
 8000fd4:	e766      	b.n	8000ea4 <__udivmoddi4+0x1a0>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e6fd      	b.n	8000dd6 <__udivmoddi4+0xd2>
 8000fda:	443b      	add	r3, r7
 8000fdc:	3a02      	subs	r2, #2
 8000fde:	e733      	b.n	8000e48 <__udivmoddi4+0x144>
 8000fe0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fe4:	443b      	add	r3, r7
 8000fe6:	e71c      	b.n	8000e22 <__udivmoddi4+0x11e>
 8000fe8:	4649      	mov	r1, r9
 8000fea:	e79c      	b.n	8000f26 <__udivmoddi4+0x222>
 8000fec:	eba1 0109 	sub.w	r1, r1, r9
 8000ff0:	46c4      	mov	ip, r8
 8000ff2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff6:	fb09 f804 	mul.w	r8, r9, r4
 8000ffa:	e7c4      	b.n	8000f86 <__udivmoddi4+0x282>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	ed87 0a01 	vstr	s0, [r7, #4]
 800100a:	edd7 7a01 	vldr	s15, [r7, #4]
 800100e:	eef0 7ae7 	vabs.f32	s15, s15
 8001012:	eeb0 0a67 	vmov.f32	s0, s15
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <_ZN13PIDControllerC1Ev>:
#include "PIDController.h"
#include <math.h>

PIDController::PIDController() {
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
	//update(target, current, threshold, kp, kd, ki, period_ms);
}
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <_ZN13PIDController6updateEffffffm>:

void PIDController::update(float target, float current, float threshold, float kp, float kd, float ki, uint32_t period_ms) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	@ 0x28
 8001050:	af00      	add	r7, sp, #0
 8001052:	61f8      	str	r0, [r7, #28]
 8001054:	ed87 0a06 	vstr	s0, [r7, #24]
 8001058:	edc7 0a05 	vstr	s1, [r7, #20]
 800105c:	ed87 1a04 	vstr	s2, [r7, #16]
 8001060:	edc7 1a03 	vstr	s3, [r7, #12]
 8001064:	ed87 2a02 	vstr	s4, [r7, #8]
 8001068:	edc7 2a01 	vstr	s5, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
	float error = target - current;
 800106e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001072:	edd7 7a05 	vldr	s15, [r7, #20]
 8001076:	ee77 7a67 	vsub.f32	s15, s14, s15
 800107a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	if (period_ms == 0) {
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d101      	bne.n	8001088 <_ZN13PIDController6updateEffffffm+0x3c>
		period_ms = 50;
 8001084:	2332      	movs	r3, #50	@ 0x32
 8001086:	603b      	str	r3, [r7, #0]
	}

	if (SystemTimer.getMilliseconds() - updatetime >= period_ms) {
 8001088:	4827      	ldr	r0, [pc, #156]	@ (8001128 <_ZN13PIDController6updateEffffffm+0xdc>)
 800108a:	f000 fbb3 	bl	80017f4 <_ZN5Timer15getMillisecondsEv>
 800108e:	4602      	mov	r2, r0
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	429a      	cmp	r2, r3
 800109a:	bf94      	ite	ls
 800109c:	2301      	movls	r3, #1
 800109e:	2300      	movhi	r3, #0
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d008      	beq.n	80010b8 <_ZN13PIDController6updateEffffffm+0x6c>
		previousError = error;
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010aa:	605a      	str	r2, [r3, #4]
		updatetime = SystemTimer.getMilliseconds();
 80010ac:	481e      	ldr	r0, [pc, #120]	@ (8001128 <_ZN13PIDController6updateEffffffm+0xdc>)
 80010ae:	f000 fba1 	bl	80017f4 <_ZN5Timer15getMillisecondsEv>
 80010b2:	4602      	mov	r2, r0
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	609a      	str	r2, [r3, #8]
	}

	if (abs(error) >= threshold) {
 80010b8:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80010bc:	f7ff ffa0 	bl	8001000 <_ZSt3absf>
 80010c0:	eeb0 7a40 	vmov.f32	s14, s0
 80010c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80010c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d0:	bf94      	ite	ls
 80010d2:	2301      	movls	r3, #1
 80010d4:	2300      	movhi	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d01d      	beq.n	8001118 <_ZN13PIDController6updateEffffffm+0xcc>
		Adjustment_output = (error * kp) + (kd * (error - previousError) / float(period_ms));
 80010dc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80010e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80010e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80010ee:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80010f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80010f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80010fa:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	ee07 3a90 	vmov	s15, r3
 8001104:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001108:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800110c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	edc3 7a00 	vstr	s15, [r3]
	} else {
		Adjustment_output = 0;
	}
}
 8001116:	e003      	b.n	8001120 <_ZN13PIDController6updateEffffffm+0xd4>
		Adjustment_output = 0;
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
}
 8001120:	bf00      	nop
 8001122:	3728      	adds	r7, #40	@ 0x28
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200001f4 	.word	0x200001f4

0800112c <_ZN25PeripheralCallbackHandler10UartRxCpltEP20__UART_HandleTypeDef>:
#include "LidarReader.h"
#include "AS5600.h"
#include "LSM6DSOX.h"
#include "SSD1306_HardwareI2C.h"

void PeripheralCallbackHandler::UartRxCplt(UART_HandleTypeDef *huart) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

	if (huart == &huart2) {
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a0b      	ldr	r2, [pc, #44]	@ (8001164 <_ZN25PeripheralCallbackHandler10UartRxCpltEP20__UART_HandleTypeDef+0x38>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d103      	bne.n	8001144 <_ZN25PeripheralCallbackHandler10UartRxCpltEP20__UART_HandleTypeDef+0x18>
		lidar.onUartReceiveComplete();
 800113c:	480a      	ldr	r0, [pc, #40]	@ (8001168 <_ZN25PeripheralCallbackHandler10UartRxCpltEP20__UART_HandleTypeDef+0x3c>)
 800113e:	f004 fbb3 	bl	80058a8 <_ZN11LidarReader21onUartReceiveCompleteEv>
	} else if (huart == &huart1) {
		//  bluetooth_com.processReceivedData();  // Or set a flag to process later
		//	HAL_UART_Receive_IT(huart, (uint8_t*) bluetooth_com.rxBuffer, RX_BUFFER_SIZE); // Re-enable reception
	}

}
 8001142:	e00a      	b.n	800115a <_ZN25PeripheralCallbackHandler10UartRxCpltEP20__UART_HandleTypeDef+0x2e>
	} else if (huart == &huart6) {
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a09      	ldr	r2, [pc, #36]	@ (800116c <_ZN25PeripheralCallbackHandler10UartRxCpltEP20__UART_HandleTypeDef+0x40>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d106      	bne.n	800115a <_ZN25PeripheralCallbackHandler10UartRxCpltEP20__UART_HandleTypeDef+0x2e>
		openMV_com.receiveAndProcessLine();
 800114c:	4808      	ldr	r0, [pc, #32]	@ (8001170 <_ZN25PeripheralCallbackHandler10UartRxCpltEP20__UART_HandleTypeDef+0x44>)
 800114e:	f004 feb2 	bl	8005eb6 <_ZN8UartComm21receiveAndProcessLineEv>
		openMV_com.isTransmitting = false;  // Reset transmission flag
 8001152:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <_ZN25PeripheralCallbackHandler10UartRxCpltEP20__UART_HandleTypeDef+0x44>)
 8001154:	2200      	movs	r2, #0
 8001156:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20001a04 	.word	0x20001a04
 8001168:	20000720 	.word	0x20000720
 800116c:	20001a4c 	.word	0x20001a4c
 8001170:	200011a0 	.word	0x200011a0

08001174 <_ZN25PeripheralCallbackHandler10UartTxCpltEP20__UART_HandleTypeDef>:
}

void PeripheralCallbackHandler::I2CMasterRxCplt(I2C_HandleTypeDef *hi2c) {
}

void PeripheralCallbackHandler::UartTxCplt(UART_HandleTypeDef *huart) {
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) {
		//	openMV_com.isTransmitting = false;  // Reset transmission flag
	} else if (huart == &huart1) {
		//	bluetooth_com.isTransmitting = false;  // Reset transmission flag
	}
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
	return (static_cast<unsigned char>(__c1)
		< static_cast<unsigned char>(__c2));
      }

      static _GLIBCXX17_CONSTEXPR int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
      {
	if (__n == 0)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x16>
	  return 0;
 800119a:	2300      	movs	r3, #0
 800119c:	e006      	b.n	80011ac <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x24>
	      else if (lt(__s2[__i], __s1[__i]))
		return 1;
	    return 0;
	  }
#endif
	return __builtin_memcmp(__s1, __s2, __n);
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	68f8      	ldr	r0, [r7, #12]
 80011a4:	f00b fddd 	bl	800cd62 <memcmp>
 80011a8:	4603      	mov	r3, r0
 80011aa:	bf00      	nop
      }
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <_ZNSt11char_traitsIcE6lengthEPKc>:

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff f86f 	bl	80002a0 <strlen>
 80011c2:	4603      	mov	r3, r0
      }
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>:
#include "SystemGPIO.h"  // Include the header file

void digitalWrite(const std::string &PIN, bool State) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	70fb      	strb	r3, [r7, #3]
	if (PIN == "PA4") {
 80011d8:	496c      	ldr	r1, [pc, #432]	@ (800138c <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1c0>)
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 fa96 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00b      	beq.n	80011fe <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x32>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, State ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80011e6:	78fb      	ldrb	r3, [r7, #3]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x24>
 80011ec:	2301      	movs	r3, #1
 80011ee:	e000      	b.n	80011f2 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x26>
 80011f0:	2300      	movs	r3, #0
 80011f2:	461a      	mov	r2, r3
 80011f4:	2110      	movs	r1, #16
 80011f6:	4866      	ldr	r0, [pc, #408]	@ (8001390 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1c4>)
 80011f8:	f005 fb6c 	bl	80068d4 <HAL_GPIO_WritePin>
	} else if (PIN == "PB6") {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, State ? GPIO_PIN_SET : GPIO_PIN_RESET);
	} else if (PIN == "PB2") {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, State ? GPIO_PIN_SET : GPIO_PIN_RESET);
	}
}
 80011fc:	e0c2      	b.n	8001384 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1b8>
	} else if (PIN == "PA5") {
 80011fe:	4965      	ldr	r1, [pc, #404]	@ (8001394 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1c8>)
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 fa83 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00b      	beq.n	8001224 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x58>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, State ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x4a>
 8001212:	2301      	movs	r3, #1
 8001214:	e000      	b.n	8001218 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x4c>
 8001216:	2300      	movs	r3, #0
 8001218:	461a      	mov	r2, r3
 800121a:	2120      	movs	r1, #32
 800121c:	485c      	ldr	r0, [pc, #368]	@ (8001390 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1c4>)
 800121e:	f005 fb59 	bl	80068d4 <HAL_GPIO_WritePin>
}
 8001222:	e0af      	b.n	8001384 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1b8>
	} else if (PIN == "PB15") {
 8001224:	495c      	ldr	r1, [pc, #368]	@ (8001398 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1cc>)
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 fa70 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00c      	beq.n	800124c <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x80>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, State ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001232:	78fb      	ldrb	r3, [r7, #3]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x70>
 8001238:	2301      	movs	r3, #1
 800123a:	e000      	b.n	800123e <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x72>
 800123c:	2300      	movs	r3, #0
 800123e:	461a      	mov	r2, r3
 8001240:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001244:	4855      	ldr	r0, [pc, #340]	@ (800139c <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1d0>)
 8001246:	f005 fb45 	bl	80068d4 <HAL_GPIO_WritePin>
}
 800124a:	e09b      	b.n	8001384 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1b8>
	} else if (PIN == "PB12") {
 800124c:	4954      	ldr	r1, [pc, #336]	@ (80013a0 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1d4>)
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 fa5c 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00c      	beq.n	8001274 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0xa8>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, State ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800125a:	78fb      	ldrb	r3, [r7, #3]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x98>
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x9a>
 8001264:	2300      	movs	r3, #0
 8001266:	461a      	mov	r2, r3
 8001268:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800126c:	484b      	ldr	r0, [pc, #300]	@ (800139c <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1d0>)
 800126e:	f005 fb31 	bl	80068d4 <HAL_GPIO_WritePin>
}
 8001272:	e087      	b.n	8001384 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1b8>
	} else if (PIN == "PC13") {
 8001274:	494b      	ldr	r1, [pc, #300]	@ (80013a4 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1d8>)
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 fa48 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00c      	beq.n	800129c <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0xd0>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, State ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001282:	78fb      	ldrb	r3, [r7, #3]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0xc0>
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0xc2>
 800128c:	2300      	movs	r3, #0
 800128e:	461a      	mov	r2, r3
 8001290:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001294:	4844      	ldr	r0, [pc, #272]	@ (80013a8 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1dc>)
 8001296:	f005 fb1d 	bl	80068d4 <HAL_GPIO_WritePin>
}
 800129a:	e073      	b.n	8001384 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1b8>
	} else if (PIN == "PB13") {
 800129c:	4943      	ldr	r1, [pc, #268]	@ (80013ac <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1e0>)
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 fa34 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00c      	beq.n	80012c4 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0xf8>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, State ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80012aa:	78fb      	ldrb	r3, [r7, #3]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0xe8>
 80012b0:	2301      	movs	r3, #1
 80012b2:	e000      	b.n	80012b6 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0xea>
 80012b4:	2300      	movs	r3, #0
 80012b6:	461a      	mov	r2, r3
 80012b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012bc:	4837      	ldr	r0, [pc, #220]	@ (800139c <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1d0>)
 80012be:	f005 fb09 	bl	80068d4 <HAL_GPIO_WritePin>
}
 80012c2:	e05f      	b.n	8001384 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1b8>
	} else if (PIN == "PC14") {
 80012c4:	493a      	ldr	r1, [pc, #232]	@ (80013b0 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1e4>)
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 fa20 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00c      	beq.n	80012ec <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x120>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, State ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80012d2:	78fb      	ldrb	r3, [r7, #3]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x110>
 80012d8:	2301      	movs	r3, #1
 80012da:	e000      	b.n	80012de <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x112>
 80012dc:	2300      	movs	r3, #0
 80012de:	461a      	mov	r2, r3
 80012e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012e4:	4830      	ldr	r0, [pc, #192]	@ (80013a8 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1dc>)
 80012e6:	f005 faf5 	bl	80068d4 <HAL_GPIO_WritePin>
}
 80012ea:	e04b      	b.n	8001384 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1b8>
	} else if (PIN == "PA0") {
 80012ec:	4931      	ldr	r1, [pc, #196]	@ (80013b4 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1e8>)
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 fa0c 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00c      	beq.n	8001314 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x148>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, State ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80012fa:	78fb      	ldrb	r3, [r7, #3]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x138>
 8001300:	2301      	movs	r3, #1
 8001302:	e000      	b.n	8001306 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x13a>
 8001304:	2300      	movs	r3, #0
 8001306:	461a      	mov	r2, r3
 8001308:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800130c:	4826      	ldr	r0, [pc, #152]	@ (80013a8 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1dc>)
 800130e:	f005 fae1 	bl	80068d4 <HAL_GPIO_WritePin>
}
 8001312:	e037      	b.n	8001384 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1b8>
	} else if (PIN == "PA1") {
 8001314:	4928      	ldr	r1, [pc, #160]	@ (80013b8 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1ec>)
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 f9f8 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00b      	beq.n	800133a <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x16e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, State ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001322:	78fb      	ldrb	r3, [r7, #3]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x160>
 8001328:	2301      	movs	r3, #1
 800132a:	e000      	b.n	800132e <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x162>
 800132c:	2300      	movs	r3, #0
 800132e:	461a      	mov	r2, r3
 8001330:	2102      	movs	r1, #2
 8001332:	4817      	ldr	r0, [pc, #92]	@ (8001390 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1c4>)
 8001334:	f005 face 	bl	80068d4 <HAL_GPIO_WritePin>
}
 8001338:	e024      	b.n	8001384 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1b8>
	} else if (PIN == "PB6") {
 800133a:	4920      	ldr	r1, [pc, #128]	@ (80013bc <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1f0>)
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f000 f9e5 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00b      	beq.n	8001360 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x194>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, State ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001348:	78fb      	ldrb	r3, [r7, #3]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x186>
 800134e:	2301      	movs	r3, #1
 8001350:	e000      	b.n	8001354 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x188>
 8001352:	2300      	movs	r3, #0
 8001354:	461a      	mov	r2, r3
 8001356:	2140      	movs	r1, #64	@ 0x40
 8001358:	4810      	ldr	r0, [pc, #64]	@ (800139c <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1d0>)
 800135a:	f005 fabb 	bl	80068d4 <HAL_GPIO_WritePin>
}
 800135e:	e011      	b.n	8001384 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1b8>
	} else if (PIN == "PB2") {
 8001360:	4917      	ldr	r1, [pc, #92]	@ (80013c0 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1f4>)
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f9d2 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00a      	beq.n	8001384 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1b8>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, State ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800136e:	78fb      	ldrb	r3, [r7, #3]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1ac>
 8001374:	2301      	movs	r3, #1
 8001376:	e000      	b.n	800137a <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1ae>
 8001378:	2300      	movs	r3, #0
 800137a:	461a      	mov	r2, r3
 800137c:	2104      	movs	r1, #4
 800137e:	4807      	ldr	r0, [pc, #28]	@ (800139c <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x1d0>)
 8001380:	f005 faa8 	bl	80068d4 <HAL_GPIO_WritePin>
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	0800e9c0 	.word	0x0800e9c0
 8001390:	40020000 	.word	0x40020000
 8001394:	0800e9c4 	.word	0x0800e9c4
 8001398:	0800e9c8 	.word	0x0800e9c8
 800139c:	40020400 	.word	0x40020400
 80013a0:	0800e9d0 	.word	0x0800e9d0
 80013a4:	0800e9d8 	.word	0x0800e9d8
 80013a8:	40020800 	.word	0x40020800
 80013ac:	0800e9e0 	.word	0x0800e9e0
 80013b0:	0800e9e8 	.word	0x0800e9e8
 80013b4:	0800e9f0 	.word	0x0800e9f0
 80013b8:	0800e9f4 	.word	0x0800e9f4
 80013bc:	0800e9f8 	.word	0x0800e9f8
 80013c0:	0800e9fc 	.word	0x0800e9fc

080013c4 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

bool digitalRead(const std::string &PIN) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	GPIO_PinState pinState;
	if (PIN == "PC0") {
 80013cc:	4977      	ldr	r1, [pc, #476]	@ (80015ac <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1e8>)
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f99c 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d006      	beq.n	80013e8 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24>
		pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 80013da:	2101      	movs	r1, #1
 80013dc:	4874      	ldr	r0, [pc, #464]	@ (80015b0 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ec>)
 80013de:	f005 fa61 	bl	80068a4 <HAL_GPIO_ReadPin>
 80013e2:	4603      	mov	r3, r0
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	e0d7      	b.n	8001598 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d4>
	} else if (PIN == "PC1") {
 80013e8:	4972      	ldr	r1, [pc, #456]	@ (80015b4 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1f0>)
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 f98e 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d006      	beq.n	8001404 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x40>
		pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 80013f6:	2102      	movs	r1, #2
 80013f8:	486d      	ldr	r0, [pc, #436]	@ (80015b0 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ec>)
 80013fa:	f005 fa53 	bl	80068a4 <HAL_GPIO_ReadPin>
 80013fe:	4603      	mov	r3, r0
 8001400:	73fb      	strb	r3, [r7, #15]
 8001402:	e0c9      	b.n	8001598 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d4>
	} else if (PIN == "PC2") {
 8001404:	496c      	ldr	r1, [pc, #432]	@ (80015b8 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1f4>)
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 f980 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d006      	beq.n	8001420 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>
		pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 8001412:	2104      	movs	r1, #4
 8001414:	4866      	ldr	r0, [pc, #408]	@ (80015b0 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ec>)
 8001416:	f005 fa45 	bl	80068a4 <HAL_GPIO_ReadPin>
 800141a:	4603      	mov	r3, r0
 800141c:	73fb      	strb	r3, [r7, #15]
 800141e:	e0bb      	b.n	8001598 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d4>
	} else if (PIN == "PC3") {
 8001420:	4966      	ldr	r1, [pc, #408]	@ (80015bc <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1f8>)
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 f972 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d006      	beq.n	800143c <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x78>
		pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3);
 800142e:	2108      	movs	r1, #8
 8001430:	485f      	ldr	r0, [pc, #380]	@ (80015b0 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ec>)
 8001432:	f005 fa37 	bl	80068a4 <HAL_GPIO_ReadPin>
 8001436:	4603      	mov	r3, r0
 8001438:	73fb      	strb	r3, [r7, #15]
 800143a:	e0ad      	b.n	8001598 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d4>
	} else if (PIN == "PC13") {
 800143c:	4960      	ldr	r1, [pc, #384]	@ (80015c0 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1fc>)
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f964 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x96>
		pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800144a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800144e:	4858      	ldr	r0, [pc, #352]	@ (80015b0 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ec>)
 8001450:	f005 fa28 	bl	80068a4 <HAL_GPIO_ReadPin>
 8001454:	4603      	mov	r3, r0
 8001456:	73fb      	strb	r3, [r7, #15]
 8001458:	e09e      	b.n	8001598 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d4>
	} else if (PIN == "PC14") {
 800145a:	495a      	ldr	r1, [pc, #360]	@ (80015c4 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x200>)
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f955 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d007      	beq.n	8001478 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb4>
		pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14);
 8001468:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800146c:	4850      	ldr	r0, [pc, #320]	@ (80015b0 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ec>)
 800146e:	f005 fa19 	bl	80068a4 <HAL_GPIO_ReadPin>
 8001472:	4603      	mov	r3, r0
 8001474:	73fb      	strb	r3, [r7, #15]
 8001476:	e08f      	b.n	8001598 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d4>
	} else if (PIN == "PC15") {
 8001478:	4953      	ldr	r1, [pc, #332]	@ (80015c8 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x204>)
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 f946 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d007      	beq.n	8001496 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd2>
		pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
 8001486:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800148a:	4849      	ldr	r0, [pc, #292]	@ (80015b0 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ec>)
 800148c:	f005 fa0a 	bl	80068a4 <HAL_GPIO_ReadPin>
 8001490:	4603      	mov	r3, r0
 8001492:	73fb      	strb	r3, [r7, #15]
 8001494:	e080      	b.n	8001598 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d4>
	} else if (PIN == "PA0") {
 8001496:	494d      	ldr	r1, [pc, #308]	@ (80015cc <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x208>)
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 f937 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d006      	beq.n	80014b2 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xee>
		pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80014a4:	2101      	movs	r1, #1
 80014a6:	484a      	ldr	r0, [pc, #296]	@ (80015d0 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20c>)
 80014a8:	f005 f9fc 	bl	80068a4 <HAL_GPIO_ReadPin>
 80014ac:	4603      	mov	r3, r0
 80014ae:	73fb      	strb	r3, [r7, #15]
 80014b0:	e072      	b.n	8001598 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d4>
	} else if (PIN == "PB0") {
 80014b2:	4948      	ldr	r1, [pc, #288]	@ (80015d4 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x210>)
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 f929 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d006      	beq.n	80014ce <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10a>
		pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 80014c0:	2101      	movs	r1, #1
 80014c2:	4845      	ldr	r0, [pc, #276]	@ (80015d8 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x214>)
 80014c4:	f005 f9ee 	bl	80068a4 <HAL_GPIO_ReadPin>
 80014c8:	4603      	mov	r3, r0
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	e064      	b.n	8001598 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d4>
	} else if (PIN == "PB1") {
 80014ce:	4943      	ldr	r1, [pc, #268]	@ (80015dc <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x218>)
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 f91b 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d006      	beq.n	80014ea <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x126>
		pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 80014dc:	2102      	movs	r1, #2
 80014de:	483e      	ldr	r0, [pc, #248]	@ (80015d8 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x214>)
 80014e0:	f005 f9e0 	bl	80068a4 <HAL_GPIO_ReadPin>
 80014e4:	4603      	mov	r3, r0
 80014e6:	73fb      	strb	r3, [r7, #15]
 80014e8:	e056      	b.n	8001598 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d4>
	} else if (PIN == "PB14") {
 80014ea:	493d      	ldr	r1, [pc, #244]	@ (80015e0 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x21c>)
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 f90d 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d007      	beq.n	8001508 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x144>
		pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80014f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014fc:	4836      	ldr	r0, [pc, #216]	@ (80015d8 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x214>)
 80014fe:	f005 f9d1 	bl	80068a4 <HAL_GPIO_ReadPin>
 8001502:	4603      	mov	r3, r0
 8001504:	73fb      	strb	r3, [r7, #15]
 8001506:	e047      	b.n	8001598 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d4>
	} else if (PIN == "PA6") {
 8001508:	4936      	ldr	r1, [pc, #216]	@ (80015e4 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x220>)
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 f8fe 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d006      	beq.n	8001524 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x160>
		pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8001516:	2140      	movs	r1, #64	@ 0x40
 8001518:	482d      	ldr	r0, [pc, #180]	@ (80015d0 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20c>)
 800151a:	f005 f9c3 	bl	80068a4 <HAL_GPIO_ReadPin>
 800151e:	4603      	mov	r3, r0
 8001520:	73fb      	strb	r3, [r7, #15]
 8001522:	e039      	b.n	8001598 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d4>
	} else if (PIN == "PB12") {
 8001524:	4930      	ldr	r1, [pc, #192]	@ (80015e8 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x224>)
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 f8f0 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d007      	beq.n	8001542 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x17e>
		pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8001532:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001536:	4828      	ldr	r0, [pc, #160]	@ (80015d8 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x214>)
 8001538:	f005 f9b4 	bl	80068a4 <HAL_GPIO_ReadPin>
 800153c:	4603      	mov	r3, r0
 800153e:	73fb      	strb	r3, [r7, #15]
 8001540:	e02a      	b.n	8001598 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d4>
	} else if (PIN == "PB15") {
 8001542:	492a      	ldr	r1, [pc, #168]	@ (80015ec <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x228>)
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 f8e1 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d007      	beq.n	8001560 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x19c>
		pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8001550:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001554:	4820      	ldr	r0, [pc, #128]	@ (80015d8 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x214>)
 8001556:	f005 f9a5 	bl	80068a4 <HAL_GPIO_ReadPin>
 800155a:	4603      	mov	r3, r0
 800155c:	73fb      	strb	r3, [r7, #15]
 800155e:	e01b      	b.n	8001598 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d4>
	} else if (PIN == "PB13") {
 8001560:	4923      	ldr	r1, [pc, #140]	@ (80015f0 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22c>)
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 f8d2 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d007      	beq.n	800157e <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ba>
		pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 800156e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001572:	4819      	ldr	r0, [pc, #100]	@ (80015d8 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x214>)
 8001574:	f005 f996 	bl	80068a4 <HAL_GPIO_ReadPin>
 8001578:	4603      	mov	r3, r0
 800157a:	73fb      	strb	r3, [r7, #15]
 800157c:	e00c      	b.n	8001598 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d4>
	} else if (PIN == "PA0") {
 800157e:	4913      	ldr	r1, [pc, #76]	@ (80015cc <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x208>)
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 f8c3 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d005      	beq.n	8001598 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1d4>
		pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800158c:	2101      	movs	r1, #1
 800158e:	4810      	ldr	r0, [pc, #64]	@ (80015d0 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x20c>)
 8001590:	f005 f988 	bl	80068a4 <HAL_GPIO_ReadPin>
 8001594:	4603      	mov	r3, r0
 8001596:	73fb      	strb	r3, [r7, #15]
	}

	return pinState == GPIO_PIN_SET; // Return true if the pin is high, false if low
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	2b01      	cmp	r3, #1
 800159c:	bf0c      	ite	eq
 800159e:	2301      	moveq	r3, #1
 80015a0:	2300      	movne	r3, #0
 80015a2:	b2db      	uxtb	r3, r3
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	0800ea00 	.word	0x0800ea00
 80015b0:	40020800 	.word	0x40020800
 80015b4:	0800ea04 	.word	0x0800ea04
 80015b8:	0800ea08 	.word	0x0800ea08
 80015bc:	0800ea0c 	.word	0x0800ea0c
 80015c0:	0800e9d8 	.word	0x0800e9d8
 80015c4:	0800e9e8 	.word	0x0800e9e8
 80015c8:	0800ea10 	.word	0x0800ea10
 80015cc:	0800e9f0 	.word	0x0800e9f0
 80015d0:	40020000 	.word	0x40020000
 80015d4:	0800ea18 	.word	0x0800ea18
 80015d8:	40020400 	.word	0x40020400
 80015dc:	0800ea1c 	.word	0x0800ea1c
 80015e0:	0800ea20 	.word	0x0800ea20
 80015e4:	0800ea28 	.word	0x0800ea28
 80015e8:	0800e9d0 	.word	0x0800e9d0
 80015ec:	0800e9c8 	.word	0x0800e9c8
 80015f0:	0800e9e0 	.word	0x0800e9e0

080015f4 <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm>:

void PWM_Write(const std::string &PIN, uint32_t timeWidth) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
	TIM_HandleTypeDef *htim = nullptr;
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
	uint32_t channel;

	// Match pin to timer and channel
	if (PIN == "PA8") {
 8001602:	4938      	ldr	r1, [pc, #224]	@ (80016e4 <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xf0>)
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 f881 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d143      	bne.n	8001698 <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xa4>
		//htim = &htim1;
		//channel = TIM_CHANNEL_1;
	} else if (PIN == "PA9") {
 8001610:	4935      	ldr	r1, [pc, #212]	@ (80016e8 <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xf4>)
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 f87a 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d13c      	bne.n	8001698 <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xa4>
		//htim = &htim1;
		//channel = TIM_CHANNEL_2;
	} else if (PIN == "PA10") {
 800161e:	4933      	ldr	r1, [pc, #204]	@ (80016ec <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xf8>)
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 f873 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d135      	bne.n	8001698 <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xa4>
		//htim = &htim1;
		//channel = TIM_CHANNEL_3;
	} else if (PIN == "PA11") {
 800162c:	4930      	ldr	r1, [pc, #192]	@ (80016f0 <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xfc>)
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f86c 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d12e      	bne.n	8001698 <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xa4>
		//htim = &htim1;
		//channel = TIM_CHANNEL_4;
	} else if (PIN == "PA15") {
 800163a:	492e      	ldr	r1, [pc, #184]	@ (80016f4 <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x100>)
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f865 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d004      	beq.n	8001652 <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x5e>
		htim = &htim2;
 8001648:	4b2b      	ldr	r3, [pc, #172]	@ (80016f8 <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x104>)
 800164a:	60fb      	str	r3, [r7, #12]
		channel = TIM_CHANNEL_1;
 800164c:	2300      	movs	r3, #0
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	e022      	b.n	8001698 <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xa4>
	} else if (PIN == "PB3") {
 8001652:	492a      	ldr	r1, [pc, #168]	@ (80016fc <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x108>)
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 f859 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d004      	beq.n	800166a <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x76>
		htim = &htim2;
 8001660:	4b25      	ldr	r3, [pc, #148]	@ (80016f8 <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x104>)
 8001662:	60fb      	str	r3, [r7, #12]
		channel = TIM_CHANNEL_2;
 8001664:	2304      	movs	r3, #4
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	e016      	b.n	8001698 <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xa4>
	} else if (PIN == "PB6") {
 800166a:	4925      	ldr	r1, [pc, #148]	@ (8001700 <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x10c>)
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f84d 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d004      	beq.n	8001682 <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x8e>
		htim = &htim4;
 8001678:	4b22      	ldr	r3, [pc, #136]	@ (8001704 <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x110>)
 800167a:	60fb      	str	r3, [r7, #12]
		channel = TIM_CHANNEL_1;
 800167c:	2300      	movs	r3, #0
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	e00a      	b.n	8001698 <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xa4>
	} else if (PIN == "PB7") {
 8001682:	4921      	ldr	r1, [pc, #132]	@ (8001708 <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x114>)
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 f841 	bl	800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d024      	beq.n	80016da <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xe6>
		htim = &htim4;
 8001690:	4b1c      	ldr	r3, [pc, #112]	@ (8001704 <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0x110>)
 8001692:	60fb      	str	r3, [r7, #12]
		channel = TIM_CHANNEL_2;
 8001694:	2304      	movs	r3, #4
 8001696:	60bb      	str	r3, [r7, #8]
	} else {
		return; // Invalid pin
	}

	__HAL_TIM_SET_COMPARE(htim, channel, timeWidth);
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d104      	bne.n	80016a8 <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xb4>
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80016a6:	e013      	b.n	80016d0 <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xdc>
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d104      	bne.n	80016b8 <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xc4>
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80016b6:	e00b      	b.n	80016d0 <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xdc>
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b08      	cmp	r3, #8
 80016bc:	d104      	bne.n	80016c8 <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xd4>
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016c6:	e003      	b.n	80016d0 <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xdc>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_TIM_PWM_Start(htim, channel);
 80016d0:	68b9      	ldr	r1, [r7, #8]
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f006 fea8 	bl	8008428 <HAL_TIM_PWM_Start>
 80016d8:	e000      	b.n	80016dc <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm+0xe8>
		return; // Invalid pin
 80016da:	bf00      	nop

}
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	0800ea2c 	.word	0x0800ea2c
 80016e8:	0800ea30 	.word	0x0800ea30
 80016ec:	0800ea34 	.word	0x0800ea34
 80016f0:	0800ea3c 	.word	0x0800ea3c
 80016f4:	0800ea44 	.word	0x0800ea44
 80016f8:	200018e4 	.word	0x200018e4
 80016fc:	0800ea4c 	.word	0x0800ea4c
 8001700:	0800e9f8 	.word	0x0800e9f8
 8001704:	20001974 	.word	0x20001974
 8001708:	0800ea50 	.word	0x0800ea50

0800170c <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
   *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 800170c:	b590      	push	{r4, r7, lr}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
	       const _CharT* __rhs)
    {
      return __lhs.size() == _Traits::length(__rhs)
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f00a fa8e 	bl	800bc38 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800171c:	4604      	mov	r4, r0
 800171e:	6838      	ldr	r0, [r7, #0]
 8001720:	f7ff fd48 	bl	80011b4 <_ZNSt11char_traitsIcE6lengthEPKc>
 8001724:	4603      	mov	r3, r0
	       && !_Traits::compare(__lhs.data(), __rhs, __lhs.size());
 8001726:	429c      	cmp	r4, r3
 8001728:	d111      	bne.n	800174e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_+0x42>
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f00a faba 	bl	800bca4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 8001730:	4604      	mov	r4, r0
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f00a fa80 	bl	800bc38 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001738:	4603      	mov	r3, r0
 800173a:	461a      	mov	r2, r3
 800173c:	6839      	ldr	r1, [r7, #0]
 800173e:	4620      	mov	r0, r4
 8001740:	f7ff fd22 	bl	8001188 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_+0x42>
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_+0x44>
 800174e:	2300      	movs	r3, #0
    }
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	bd90      	pop	{r4, r7, pc}

08001758 <_ZN5TimerC1Ev>:
#include "Timer.h"

Timer::Timer() :
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
		overflowCount(0), milliseconds(0) {
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
}
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <_ZN5Timer5setupEv>:

void Timer::setup() {
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim3);  // Enable timer with interrupt
 8001788:	4803      	ldr	r0, [pc, #12]	@ (8001798 <_ZN5Timer5setupEv+0x18>)
 800178a:	f006 fd91 	bl	80082b0 <HAL_TIM_Base_Start_IT>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	2000192c 	.word	0x2000192c

0800179c <_ZN5Timer6updateEv>:
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	overflowCount = 0;
}

// Optional, for HAL_GetTick() if you want ms
void Timer::update() {
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	milliseconds = HAL_GetTick();
 80017a4:	f004 fd26 	bl	80061f4 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	601a      	str	r2, [r3, #0]
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <_ZNK5Timer15getMicrosecondsEv>:
// Called from TIM3 IRQ Handler
void Timer::onOverflow() {
	overflowCount++;
}

uint32_t Timer::getMicroseconds() const {
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	uint32_t high1, low, high2;

	do {
		high1 = overflowCount;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	617b      	str	r3, [r7, #20]
		low = __HAL_TIM_GET_COUNTER(&htim3);
 80017c6:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <_ZNK5Timer15getMicrosecondsEv+0x38>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017cc:	613b      	str	r3, [r7, #16]
		high2 = overflowCount;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	60fb      	str	r3, [r7, #12]
	} while (high1 != high2);
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d1f1      	bne.n	80017c0 <_ZNK5Timer15getMicrosecondsEv+0x8>

	return (high1 << 16) | low;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	041a      	lsls	r2, r3, #16
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	371c      	adds	r7, #28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	2000192c 	.word	0x2000192c

080017f4 <_ZN5Timer15getMillisecondsEv>:

uint32_t Timer::getMilliseconds(){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	return HAL_GetTick();
 80017fc:	f004 fcfa 	bl	80061f4 <HAL_GetTick>
 8001800:	4603      	mov	r3, r0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <_ZN5Timer4FlagEm>:
bool Timer::Flag(uint32_t period) {
 800180a:	b580      	push	{r7, lr}
 800180c:	b084      	sub	sp, #16
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	6039      	str	r1, [r7, #0]
	uint32_t currentTime = getMilliseconds();
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ffed 	bl	80017f4 <_ZN5Timer15getMillisecondsEv>
 800181a:	60f8      	str	r0, [r7, #12]
	if (currentTime - lastTime >= period) {
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d804      	bhi.n	8001834 <_ZN5Timer4FlagEm+0x2a>
		lastTime = currentTime;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	605a      	str	r2, [r3, #4]
		return true;
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <_ZN5Timer4FlagEm+0x2c>
	}
	return false;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart);
//void HAL_UARTx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
	PeripheralCallbackHandler::UartRxCplt(huart);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff fc70 	bl	800112c <_ZN25PeripheralCallbackHandler10UartRxCpltEP20__UART_HandleTypeDef>
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	PeripheralCallbackHandler::UartTxCplt(huart);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff fc89 	bl	8001174 <_ZN25PeripheralCallbackHandler10UartTxCpltEP20__UART_HandleTypeDef>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <HAL_GPIO_EXTI_Callback>:
extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800187c:	d027      	beq.n	80018ce <HAL_GPIO_EXTI_Callback+0x62>
 800187e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001882:	dc2c      	bgt.n	80018de <HAL_GPIO_EXTI_Callback+0x72>
 8001884:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001888:	d009      	beq.n	800189e <HAL_GPIO_EXTI_Callback+0x32>
 800188a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800188e:	dc26      	bgt.n	80018de <HAL_GPIO_EXTI_Callback+0x72>
 8001890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001894:	d00b      	beq.n	80018ae <HAL_GPIO_EXTI_Callback+0x42>
 8001896:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800189a:	d010      	beq.n	80018be <HAL_GPIO_EXTI_Callback+0x52>
		break;
	case GPIO_PIN_15:
		EncoderMotor_TL.EncoderISR(GPIO_Pin, GPIO_PIN_15); // TL
		break;
	default:
		break;  // Unused pin
 800189c:	e01f      	b.n	80018de <HAL_GPIO_EXTI_Callback+0x72>
		EncoderMotor_DR.EncoderISR(GPIO_Pin, GPIO_PIN_14);
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018a4:	4619      	mov	r1, r3
 80018a6:	4810      	ldr	r0, [pc, #64]	@ (80018e8 <HAL_GPIO_EXTI_Callback+0x7c>)
 80018a8:	f003 fe84 	bl	80055b4 <_ZN7Encoder10EncoderISREtt>
		break;
 80018ac:	e018      	b.n	80018e0 <HAL_GPIO_EXTI_Callback+0x74>
		EncoderMotor_DL.EncoderISR(GPIO_Pin, GPIO_PIN_12);
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018b4:	4619      	mov	r1, r3
 80018b6:	480d      	ldr	r0, [pc, #52]	@ (80018ec <HAL_GPIO_EXTI_Callback+0x80>)
 80018b8:	f003 fe7c 	bl	80055b4 <_ZN7Encoder10EncoderISREtt>
		break;
 80018bc:	e010      	b.n	80018e0 <HAL_GPIO_EXTI_Callback+0x74>
		EncoderMotor_TR.EncoderISR(GPIO_Pin, GPIO_PIN_13); // TR
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018c4:	4619      	mov	r1, r3
 80018c6:	480a      	ldr	r0, [pc, #40]	@ (80018f0 <HAL_GPIO_EXTI_Callback+0x84>)
 80018c8:	f003 fe74 	bl	80055b4 <_ZN7Encoder10EncoderISREtt>
		break;
 80018cc:	e008      	b.n	80018e0 <HAL_GPIO_EXTI_Callback+0x74>
		EncoderMotor_TL.EncoderISR(GPIO_Pin, GPIO_PIN_15); // TL
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018d4:	4619      	mov	r1, r3
 80018d6:	4807      	ldr	r0, [pc, #28]	@ (80018f4 <HAL_GPIO_EXTI_Callback+0x88>)
 80018d8:	f003 fe6c 	bl	80055b4 <_ZN7Encoder10EncoderISREtt>
		break;
 80018dc:	e000      	b.n	80018e0 <HAL_GPIO_EXTI_Callback+0x74>
		break;  // Unused pin
 80018de:	bf00      	nop
	}
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20001040 	.word	0x20001040
 80018ec:	20001098 	.word	0x20001098
 80018f0:	200010f0 	.word	0x200010f0
 80018f4:	20001148 	.word	0x20001148

080018f8 <main>:

int main(void) {
 80018f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018fc:	ed2d 8b02 	vpush	{d8}
 8001900:	b0db      	sub	sp, #364	@ 0x16c
 8001902:	af06      	add	r7, sp, #24
//------------------------MX initialization/peripheral----------------------------------------
	HAL_Init();
 8001904:	f004 fc10 	bl	8006128 <HAL_Init>
	SystemClock_Config();
 8001908:	f000 fa3c 	bl	8001d84 <_Z18SystemClock_Configv>
	MX_GPIO_Init();
 800190c:	f000 fd38 	bl	8002380 <_ZL12MX_GPIO_Initv>
	MX_I2C1_Init();
 8001910:	f000 faaa 	bl	8001e68 <_ZL12MX_I2C1_Initv>
	MX_I2C3_Init();
 8001914:	f000 fadc 	bl	8001ed0 <_ZL12MX_I2C3_Initv>
	MX_TIM2_Init();
 8001918:	f000 fb0e 	bl	8001f38 <_ZL12MX_TIM2_Initv>
	MX_TIM4_Init();
 800191c:	f000 fc06 	bl	800212c <_ZL12MX_TIM4_Initv>
	MX_TIM3_Init();
 8001920:	f000 fba8 	bl	8002074 <_ZL12MX_TIM3_Initv>
	MX_USART1_UART_Init();
 8001924:	f000 fca2 	bl	800226c <_ZL19MX_USART1_UART_Initv>
	MX_USART6_UART_Init();
 8001928:	f000 fcfc 	bl	8002324 <_ZL19MX_USART6_UART_Initv>
	MX_USART2_UART_Init();
 800192c:	f000 fccc 	bl	80022c8 <_ZL19MX_USART2_UART_Initv>
	SystemTimer.setup();
 8001930:	48d0      	ldr	r0, [pc, #832]	@ (8001c74 <main+0x37c>)
 8001932:	f7ff ff25 	bl	8001780 <_ZN5Timer5setupEv>
//------------------------Sensor Initialization-----------------------------------------------
	openMV_com.init();
 8001936:	48d0      	ldr	r0, [pc, #832]	@ (8001c78 <main+0x380>)
 8001938:	f004 fb05 	bl	8005f46 <_ZN8UartComm4initEv>
	OLED.init();
 800193c:	48cf      	ldr	r0, [pc, #828]	@ (8001c7c <main+0x384>)
 800193e:	f004 f975 	bl	8005c2c <_ZN19SSD1306_HardwareI2C4initEv>
	 OLED.writeString("start");
	 OLED.writeFloat(BallChase.flag1, 0, 5, 4);
	 OLED.updateScreen();
	 OLED.clear();
	 */
	IMU.init();
 8001942:	48cf      	ldr	r0, [pc, #828]	@ (8001c80 <main+0x388>)
 8001944:	f003 fc58 	bl	80051f8 <_ZN6BNO0554initEv>

	HAL_Delay(2000);
 8001948:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800194c:	f004 fc5e 	bl	800620c <HAL_Delay>

	lidar.init();
 8001950:	48cc      	ldr	r0, [pc, #816]	@ (8001c84 <main+0x38c>)
 8001952:	f003 ff8b 	bl	800586c <_ZN11LidarReader4initEv>
//------------------------Temporary Initialization--------------------------------------------
	uint32_t updatetime = SystemTimer.getMilliseconds();
 8001956:	48c7      	ldr	r0, [pc, #796]	@ (8001c74 <main+0x37c>)
 8001958:	f7ff ff4c 	bl	80017f4 <_ZN5Timer15getMillisecondsEv>
 800195c:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
	//uint32_t updatetime2 = SystemTimer.getMilliseconds();
	//bool chaseAvailable = 0;
	int movetask = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
//--------------------------------------------------------------------------------------------
	//digitalWrite("PA1", 1);
	//HAL_Delay(300);
	//digitalWrite("PA1", 0);
	float distance = 0;
 8001966:	f04f 0300 	mov.w	r3, #0
 800196a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
	float angle = 0;
 800196e:	f04f 0300 	mov.w	r3, #0
 8001972:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	//HAL_Delay(3500);
	while (1) {
		//------------------------Update component--------------------------------------------
		SystemTimer.update();
 8001976:	48bf      	ldr	r0, [pc, #764]	@ (8001c74 <main+0x37c>)
 8001978:	f7ff ff10 	bl	800179c <_ZN5Timer6updateEv>

		openMV_com.processReceivedData();
 800197c:	48be      	ldr	r0, [pc, #760]	@ (8001c78 <main+0x380>)
 800197e:	f004 faf3 	bl	8005f68 <_ZN8UartComm19processReceivedDataEv>

		if (SystemTimer.Flag(9)) {
 8001982:	2109      	movs	r1, #9
 8001984:	48bb      	ldr	r0, [pc, #748]	@ (8001c74 <main+0x37c>)
 8001986:	f7ff ff40 	bl	800180a <_ZN5Timer4FlagEm>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <main+0xa4>
			IMU.updateData();
 8001990:	48bb      	ldr	r0, [pc, #748]	@ (8001c80 <main+0x388>)
 8001992:	f003 fdc3 	bl	800551c <_ZN6BNO05510updateDataEv>
			BallChase.updateTrackingState();
 8001996:	48bc      	ldr	r0, [pc, #752]	@ (8001c88 <main+0x390>)
 8001998:	f001 fcd0 	bl	800333c <_ZN9BallTrack19updateTrackingStateEv>
		}

		KinematicState.update(0, 0, IMU.AngularVelocity_Xaxis, -EncoderMotor_TR.getSpeed_IT() / 19, EncoderMotor_TL.getSpeed_IT() / 19, EncoderMotor_DR.getSpeed_IT() / 19,
 800199c:	4bb8      	ldr	r3, [pc, #736]	@ (8001c80 <main+0x388>)
 800199e:	ed93 8a00 	vldr	s16, [r3]
 80019a2:	48ba      	ldr	r0, [pc, #744]	@ (8001c8c <main+0x394>)
 80019a4:	f003 fe50 	bl	8005648 <_ZN7Encoder11getSpeed_ITEv>
 80019a8:	ec53 2b10 	vmov	r2, r3, d0
 80019ac:	4614      	mov	r4, r2
 80019ae:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	4bb6      	ldr	r3, [pc, #728]	@ (8001c90 <main+0x398>)
 80019b8:	4620      	mov	r0, r4
 80019ba:	4629      	mov	r1, r5
 80019bc:	f7fe ff5e 	bl	800087c <__aeabi_ddiv>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4610      	mov	r0, r2
 80019c6:	4619      	mov	r1, r3
 80019c8:	f7ff f8fe 	bl	8000bc8 <__aeabi_d2f>
 80019cc:	4606      	mov	r6, r0
 80019ce:	48b1      	ldr	r0, [pc, #708]	@ (8001c94 <main+0x39c>)
 80019d0:	f003 fe3a 	bl	8005648 <_ZN7Encoder11getSpeed_ITEv>
 80019d4:	ec51 0b10 	vmov	r0, r1, d0
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	4bac      	ldr	r3, [pc, #688]	@ (8001c90 <main+0x398>)
 80019de:	f7fe ff4d 	bl	800087c <__aeabi_ddiv>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	f7ff f8ed 	bl	8000bc8 <__aeabi_d2f>
 80019ee:	4682      	mov	sl, r0
 80019f0:	48a9      	ldr	r0, [pc, #676]	@ (8001c98 <main+0x3a0>)
 80019f2:	f003 fe29 	bl	8005648 <_ZN7Encoder11getSpeed_ITEv>
 80019f6:	ec51 0b10 	vmov	r0, r1, d0
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	4ba4      	ldr	r3, [pc, #656]	@ (8001c90 <main+0x398>)
 8001a00:	f7fe ff3c 	bl	800087c <__aeabi_ddiv>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f7ff f8dc 	bl	8000bc8 <__aeabi_d2f>
 8001a10:	4683      	mov	fp, r0
				-EncoderMotor_DL.getSpeed_IT() / 19, "PB6", "0", "PB3", "0", "PB7", "0", "PA15", "0", 90, 0);
 8001a12:	48a2      	ldr	r0, [pc, #648]	@ (8001c9c <main+0x3a4>)
 8001a14:	f003 fe18 	bl	8005648 <_ZN7Encoder11getSpeed_ITEv>
 8001a18:	ec53 2b10 	vmov	r2, r3, d0
 8001a1c:	4690      	mov	r8, r2
 8001a1e:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	4b9a      	ldr	r3, [pc, #616]	@ (8001c90 <main+0x398>)
 8001a28:	4640      	mov	r0, r8
 8001a2a:	4649      	mov	r1, r9
 8001a2c:	f7fe ff26 	bl	800087c <__aeabi_ddiv>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
		KinematicState.update(0, 0, IMU.AngularVelocity_Xaxis, -EncoderMotor_TR.getSpeed_IT() / 19, EncoderMotor_TL.getSpeed_IT() / 19, EncoderMotor_DR.getSpeed_IT() / 19,
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	f7ff f8c6 	bl	8000bc8 <__aeabi_d2f>
 8001a3c:	ee08 0a90 	vmov	s17, r0
 8001a40:	f107 0318 	add.w	r3, r7, #24
 8001a44:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001a48:	f107 0218 	add.w	r2, r7, #24
 8001a4c:	463b      	mov	r3, r7
 8001a4e:	4994      	ldr	r1, [pc, #592]	@ (8001ca0 <main+0x3a8>)
 8001a50:	4618      	mov	r0, r3
 8001a52:	f00a f96d 	bl	800bd30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001a56:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a5a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001a5e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001a62:	f107 031c 	add.w	r3, r7, #28
 8001a66:	498f      	ldr	r1, [pc, #572]	@ (8001ca4 <main+0x3ac>)
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f00a f961 	bl	800bd30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001a6e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001a72:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001a76:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001a7a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a7e:	498a      	ldr	r1, [pc, #552]	@ (8001ca8 <main+0x3b0>)
 8001a80:	4618      	mov	r0, r3
 8001a82:	f00a f955 	bl	800bd30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001a86:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001a8a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001a8e:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001a92:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a96:	4983      	ldr	r1, [pc, #524]	@ (8001ca4 <main+0x3ac>)
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f00a f949 	bl	800bd30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001a9e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001aa2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001aa6:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8001aaa:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001aae:	497f      	ldr	r1, [pc, #508]	@ (8001cac <main+0x3b4>)
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f00a f93d 	bl	800bd30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001ab6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001aba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001abe:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8001ac2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001ac6:	4977      	ldr	r1, [pc, #476]	@ (8001ca4 <main+0x3ac>)
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f00a f931 	bl	800bd30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001ace:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001ad2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001ad6:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 8001ada:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001ade:	4974      	ldr	r1, [pc, #464]	@ (8001cb0 <main+0x3b8>)
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f00a f925 	bl	800bd30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001ae6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001aea:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001aee:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8001af2:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001af6:	496b      	ldr	r1, [pc, #428]	@ (8001ca4 <main+0x3ac>)
 8001af8:	4618      	mov	r0, r3
 8001afa:	f00a f919 	bl	800bd30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001afe:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001b02:	f107 021c 	add.w	r2, r7, #28
 8001b06:	4639      	mov	r1, r7
 8001b08:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001b0c:	9304      	str	r3, [sp, #16]
 8001b0e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001b12:	9303      	str	r3, [sp, #12]
 8001b14:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001b18:	9302      	str	r3, [sp, #8]
 8001b1a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001b1e:	9301      	str	r3, [sp, #4]
 8001b20:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	ed9f 4a63 	vldr	s8, [pc, #396]	@ 8001cb4 <main+0x3bc>
 8001b2a:	eddf 3a63 	vldr	s7, [pc, #396]	@ 8001cb8 <main+0x3c0>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	eeb0 3a68 	vmov.f32	s6, s17
 8001b34:	ee02 ba90 	vmov	s5, fp
 8001b38:	ee02 aa10 	vmov	s4, sl
 8001b3c:	ee01 6a90 	vmov	s3, r6
 8001b40:	eeb0 1a48 	vmov.f32	s2, s16
 8001b44:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001cb4 <main+0x3bc>
 8001b48:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 8001cb4 <main+0x3bc>
 8001b4c:	485b      	ldr	r0, [pc, #364]	@ (8001cbc <main+0x3c4>)
 8001b4e:	f002 f92b 	bl	8003da8 <_ZN13KinematicData6updateEfffffffNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_S5_S5_S5_S5_S5_S5_ff>
 8001b52:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001b56:	4618      	mov	r0, r3
 8001b58:	f00a f868 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

      __attribute__((__always_inline__))
#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001b5c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 fcd3 	bl	800250c <_ZNSt15__new_allocatorIcED1Ev>
 8001b66:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f00a f85e 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001b70:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 fcc9 	bl	800250c <_ZNSt15__new_allocatorIcED1Ev>
 8001b7a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f00a f854 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001b84:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f000 fcbf 	bl	800250c <_ZNSt15__new_allocatorIcED1Ev>
 8001b8e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001b92:	4618      	mov	r0, r3
 8001b94:	f00a f84a 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001b98:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f000 fcb5 	bl	800250c <_ZNSt15__new_allocatorIcED1Ev>
 8001ba2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f00a f840 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001bac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 fcab 	bl	800250c <_ZNSt15__new_allocatorIcED1Ev>
 8001bb6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f00a f836 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001bc0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 fca1 	bl	800250c <_ZNSt15__new_allocatorIcED1Ev>
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f00a f82c 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001bd4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 fc97 	bl	800250c <_ZNSt15__new_allocatorIcED1Ev>
 8001bde:	463b      	mov	r3, r7
 8001be0:	4618      	mov	r0, r3
 8001be2:	f00a f823 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001be6:	f107 0318 	add.w	r3, r7, #24
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 fc8e 	bl	800250c <_ZNSt15__new_allocatorIcED1Ev>
		BallState.update(openMV_com.ball_x, openMV_com.ball_y, openMV_com.ball_vx, openMV_com.ball_vy, openMV_com.ball_displacement, openMV_com.ball_angle);
 8001bf0:	4b21      	ldr	r3, [pc, #132]	@ (8001c78 <main+0x380>)
 8001bf2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bf6:	4b20      	ldr	r3, [pc, #128]	@ (8001c78 <main+0x380>)
 8001bf8:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c78 <main+0x380>)
 8001bfe:	edd3 6a03 	vldr	s13, [r3, #12]
 8001c02:	4b1d      	ldr	r3, [pc, #116]	@ (8001c78 <main+0x380>)
 8001c04:	ed93 6a04 	vldr	s12, [r3, #16]
 8001c08:	4b1b      	ldr	r3, [pc, #108]	@ (8001c78 <main+0x380>)
 8001c0a:	edd3 5a05 	vldr	s11, [r3, #20]
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c78 <main+0x380>)
 8001c10:	ed93 5a06 	vldr	s10, [r3, #24]
 8001c14:	eef0 2a45 	vmov.f32	s5, s10
 8001c18:	eeb0 2a65 	vmov.f32	s4, s11
 8001c1c:	eef0 1a46 	vmov.f32	s3, s12
 8001c20:	eeb0 1a66 	vmov.f32	s2, s13
 8001c24:	eef0 0a47 	vmov.f32	s1, s14
 8001c28:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2c:	4824      	ldr	r0, [pc, #144]	@ (8001cc0 <main+0x3c8>)
 8001c2e:	f001 fa34 	bl	800309a <_ZN8BallData6updateEffffff>
		//lidar.processData();
		//------------------------------------------------------------------------------------
		if (movetask == 0) {
 8001c32:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d146      	bne.n	8001cc8 <main+0x3d0>
 8001c3a:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8001c3e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
			//Robotmovement.move(0, 300, 0);
			digitalWrite("PB2", true);
 8001c42:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8001c46:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001c4a:	491e      	ldr	r1, [pc, #120]	@ (8001cc4 <main+0x3cc>)
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f00a f86f 	bl	800bd30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001c52:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001c56:	2101      	movs	r1, #1
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fab7 	bl	80011cc <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 8001c5e:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001c62:	4618      	mov	r0, r3
 8001c64:	f009 ffe2 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001c68:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 fc4d 	bl	800250c <_ZNSt15__new_allocatorIcED1Ev>
 8001c72:	e046      	b.n	8001d02 <main+0x40a>
 8001c74:	200001f4 	.word	0x200001f4
 8001c78:	200011a0 	.word	0x200011a0
 8001c7c:	2000031c 	.word	0x2000031c
 8001c80:	2000101c 	.word	0x2000101c
 8001c84:	20000720 	.word	0x20000720
 8001c88:	20001414 	.word	0x20001414
 8001c8c:	200010f0 	.word	0x200010f0
 8001c90:	40330000 	.word	0x40330000
 8001c94:	20001148 	.word	0x20001148
 8001c98:	20001040 	.word	0x20001040
 8001c9c:	20001098 	.word	0x20001098
 8001ca0:	0800ea54 	.word	0x0800ea54
 8001ca4:	0800ea58 	.word	0x0800ea58
 8001ca8:	0800ea5c 	.word	0x0800ea5c
 8001cac:	0800ea60 	.word	0x0800ea60
 8001cb0:	0800ea64 	.word	0x0800ea64
 8001cb4:	00000000 	.word	0x00000000
 8001cb8:	42b40000 	.word	0x42b40000
 8001cbc:	20000200 	.word	0x20000200
 8001cc0:	200002ec 	.word	0x200002ec
 8001cc4:	0800ea6c 	.word	0x0800ea6c
 8001cc8:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001ccc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
		} else {
			//Robotmovement.move(0, -300, 0);
			digitalWrite("PB2", true);
 8001cd0:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8001cd4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001cd8:	4924      	ldr	r1, [pc, #144]	@ (8001d6c <main+0x474>)
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f00a f828 	bl	800bd30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001ce0:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fa70 	bl	80011cc <_Z12digitalWriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 8001cec:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f009 ff9b 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001cf6:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 fc06 	bl	800250c <_ZNSt15__new_allocatorIcED1Ev>
 8001d00:	bf00      	nop
		}
		if (SystemTimer.milliseconds - updatetime >= 500) {
 8001d02:	4b1b      	ldr	r3, [pc, #108]	@ (8001d70 <main+0x478>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001d10:	d312      	bcc.n	8001d38 <main+0x440>
			if (movetask == 0) {
 8001d12:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d103      	bne.n	8001d22 <main+0x42a>
				movetask = 1;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8001d20:	e006      	b.n	8001d30 <main+0x438>
			} else if (movetask == 1) {
 8001d22:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d102      	bne.n	8001d30 <main+0x438>
				movetask = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
			}
			updatetime = SystemTimer.milliseconds;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	@ (8001d70 <main+0x478>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
		//OLED.writeFloat(BallChase.outputYspeed, 5, 3, 4);
		//OLED.writeFloat(BallChase.outputXspeed, 5, 4, 4);
		//OLED.updateScreen();
		//OLED.writeFloat(BallChase.effectiveMovementAngle, 5, 5, 4);
		//OLED.updateScreen();
		if (openMV_com.ball_is_detected && !openMV_com.ball_in_control) {
 8001d38:	4b0e      	ldr	r3, [pc, #56]	@ (8001d74 <main+0x47c>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00a      	beq.n	8001d56 <main+0x45e>
 8001d40:	4b0c      	ldr	r3, [pc, #48]	@ (8001d74 <main+0x47c>)
 8001d42:	785b      	ldrb	r3, [r3, #1]
 8001d44:	f083 0301 	eor.w	r3, r3, #1
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <main+0x45e>
			BallChase.tracking();
 8001d4e:	480a      	ldr	r0, [pc, #40]	@ (8001d78 <main+0x480>)
 8001d50:	f001 fb0a 	bl	8003368 <_ZN9BallTrack8trackingEv>
 8001d54:	e008      	b.n	8001d68 <main+0x470>
		} else {
			Robotmovement.move(0, 0, 0);
 8001d56:	ed9f 1a09 	vldr	s2, [pc, #36]	@ 8001d7c <main+0x484>
 8001d5a:	eddf 0a08 	vldr	s1, [pc, #32]	@ 8001d7c <main+0x484>
 8001d5e:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8001d7c <main+0x484>
 8001d62:	4807      	ldr	r0, [pc, #28]	@ (8001d80 <main+0x488>)
 8001d64:	f002 fc82 	bl	800466c <_ZN14movementSystem4moveEfff>
		SystemTimer.update();
 8001d68:	e605      	b.n	8001976 <main+0x7e>
 8001d6a:	bf00      	nop
 8001d6c:	0800ea6c 	.word	0x0800ea6c
 8001d70:	200001f4 	.word	0x200001f4
 8001d74:	200011a0 	.word	0x200011a0
 8001d78:	20001414 	.word	0x20001414
 8001d7c:	00000000 	.word	0x00000000
 8001d80:	20001484 	.word	0x20001484

08001d84 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b094      	sub	sp, #80	@ 0x50
 8001d88:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001d8a:	f107 0320 	add.w	r3, r7, #32
 8001d8e:	2230      	movs	r2, #48	@ 0x30
 8001d90:	2100      	movs	r1, #0
 8001d92:	4618      	mov	r0, r3
 8001d94:	f00a fff5 	bl	800cd82 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001d98:	f107 030c 	add.w	r3, r7, #12
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001da8:	2300      	movs	r3, #0
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	4b2c      	ldr	r3, [pc, #176]	@ (8001e60 <_Z18SystemClock_Configv+0xdc>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db0:	4a2b      	ldr	r2, [pc, #172]	@ (8001e60 <_Z18SystemClock_Configv+0xdc>)
 8001db2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001db6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001db8:	4b29      	ldr	r3, [pc, #164]	@ (8001e60 <_Z18SystemClock_Configv+0xdc>)
 8001dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	4b26      	ldr	r3, [pc, #152]	@ (8001e64 <_Z18SystemClock_Configv+0xe0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a25      	ldr	r2, [pc, #148]	@ (8001e64 <_Z18SystemClock_Configv+0xe0>)
 8001dce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	4b23      	ldr	r3, [pc, #140]	@ (8001e64 <_Z18SystemClock_Configv+0xe0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ddc:	607b      	str	r3, [r7, #4]
 8001dde:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001de0:	2301      	movs	r3, #1
 8001de2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001de4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001de8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dea:	2302      	movs	r3, #2
 8001dec:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001df4:	2319      	movs	r3, #25
 8001df6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 8001df8:	23c0      	movs	r3, #192	@ 0xc0
 8001dfa:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e00:	2304      	movs	r3, #4
 8001e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001e04:	f107 0320 	add.w	r3, r7, #32
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f005 fda9 	bl	8007960 <HAL_RCC_OscConfig>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	bf14      	ite	ne
 8001e14:	2301      	movne	r3, #1
 8001e16:	2300      	moveq	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <_Z18SystemClock_Configv+0x9e>
		Error_Handler();
 8001e1e:	f000 fb6f 	bl	8002500 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e22:	230f      	movs	r3, #15
 8001e24:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e26:	2302      	movs	r3, #2
 8001e28:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e32:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8001e38:	f107 030c 	add.w	r3, r7, #12
 8001e3c:	2103      	movs	r1, #3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f006 f806 	bl	8007e50 <HAL_RCC_ClockConfig>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	bf14      	ite	ne
 8001e4a:	2301      	movne	r3, #1
 8001e4c:	2300      	moveq	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <_Z18SystemClock_Configv+0xd4>
		Error_Handler();
 8001e54:	f000 fb54 	bl	8002500 <Error_Handler>
	}
}
 8001e58:	bf00      	nop
 8001e5a:	3750      	adds	r7, #80	@ 0x50
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40007000 	.word	0x40007000

08001e68 <_ZL12MX_I2C1_Initv>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001e6c:	4b15      	ldr	r3, [pc, #84]	@ (8001ec4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001e6e:	4a16      	ldr	r2, [pc, #88]	@ (8001ec8 <_ZL12MX_I2C1_Initv+0x60>)
 8001e70:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8001e72:	4b14      	ldr	r3, [pc, #80]	@ (8001ec4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001e74:	4a15      	ldr	r2, [pc, #84]	@ (8001ecc <_ZL12MX_I2C1_Initv+0x64>)
 8001e76:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e78:	4b12      	ldr	r3, [pc, #72]	@ (8001ec4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001e7e:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e84:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001e86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e8a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001e92:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e98:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001ea4:	4807      	ldr	r0, [pc, #28]	@ (8001ec4 <_ZL12MX_I2C1_Initv+0x5c>)
 8001ea6:	f004 fd47 	bl	8006938 <HAL_I2C_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	bf14      	ite	ne
 8001eb0:	2301      	movne	r3, #1
 8001eb2:	2300      	moveq	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <_ZL12MX_I2C1_Initv+0x56>
		Error_Handler();
 8001eba:	f000 fb21 	bl	8002500 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	2000183c 	.word	0x2000183c
 8001ec8:	40005400 	.word	0x40005400
 8001ecc:	00061a80 	.word	0x00061a80

08001ed0 <_ZL12MX_I2C3_Initv>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8001ed4:	4b15      	ldr	r3, [pc, #84]	@ (8001f2c <_ZL12MX_I2C3_Initv+0x5c>)
 8001ed6:	4a16      	ldr	r2, [pc, #88]	@ (8001f30 <_ZL12MX_I2C3_Initv+0x60>)
 8001ed8:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 400000;
 8001eda:	4b14      	ldr	r3, [pc, #80]	@ (8001f2c <_ZL12MX_I2C3_Initv+0x5c>)
 8001edc:	4a15      	ldr	r2, [pc, #84]	@ (8001f34 <_ZL12MX_I2C3_Initv+0x64>)
 8001ede:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ee0:	4b12      	ldr	r3, [pc, #72]	@ (8001f2c <_ZL12MX_I2C3_Initv+0x5c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8001ee6:	4b11      	ldr	r3, [pc, #68]	@ (8001f2c <_ZL12MX_I2C3_Initv+0x5c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001eec:	4b0f      	ldr	r3, [pc, #60]	@ (8001f2c <_ZL12MX_I2C3_Initv+0x5c>)
 8001eee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ef2:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8001f2c <_ZL12MX_I2C3_Initv+0x5c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8001efa:	4b0c      	ldr	r3, [pc, #48]	@ (8001f2c <_ZL12MX_I2C3_Initv+0x5c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f00:	4b0a      	ldr	r3, [pc, #40]	@ (8001f2c <_ZL12MX_I2C3_Initv+0x5c>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f06:	4b09      	ldr	r3, [pc, #36]	@ (8001f2c <_ZL12MX_I2C3_Initv+0x5c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8001f0c:	4807      	ldr	r0, [pc, #28]	@ (8001f2c <_ZL12MX_I2C3_Initv+0x5c>)
 8001f0e:	f004 fd13 	bl	8006938 <HAL_I2C_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	bf14      	ite	ne
 8001f18:	2301      	movne	r3, #1
 8001f1a:	2300      	moveq	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <_ZL12MX_I2C3_Initv+0x56>
		Error_Handler();
 8001f22:	f000 faed 	bl	8002500 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20001890 	.word	0x20001890
 8001f30:	40005c00 	.word	0x40005c00
 8001f34:	00061a80 	.word	0x00061a80

08001f38 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08e      	sub	sp, #56	@ 0x38
 8001f3c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001f3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001f4c:	f107 0320 	add.w	r3, r7, #32
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
 8001f64:	615a      	str	r2, [r3, #20]
 8001f66:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001f68:	4b41      	ldr	r3, [pc, #260]	@ (8002070 <_ZL12MX_TIM2_Initv+0x138>)
 8001f6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f6e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 95;
 8001f70:	4b3f      	ldr	r3, [pc, #252]	@ (8002070 <_ZL12MX_TIM2_Initv+0x138>)
 8001f72:	225f      	movs	r2, #95	@ 0x5f
 8001f74:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f76:	4b3e      	ldr	r3, [pc, #248]	@ (8002070 <_ZL12MX_TIM2_Initv+0x138>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 19999;
 8001f7c:	4b3c      	ldr	r3, [pc, #240]	@ (8002070 <_ZL12MX_TIM2_Initv+0x138>)
 8001f7e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001f82:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f84:	4b3a      	ldr	r3, [pc, #232]	@ (8002070 <_ZL12MX_TIM2_Initv+0x138>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f8a:	4b39      	ldr	r3, [pc, #228]	@ (8002070 <_ZL12MX_TIM2_Initv+0x138>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001f90:	4837      	ldr	r0, [pc, #220]	@ (8002070 <_ZL12MX_TIM2_Initv+0x138>)
 8001f92:	f006 f93d 	bl	8008210 <HAL_TIM_Base_Init>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	bf14      	ite	ne
 8001f9c:	2301      	movne	r3, #1
 8001f9e:	2300      	moveq	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <_ZL12MX_TIM2_Initv+0x72>
		Error_Handler();
 8001fa6:	f000 faab 	bl	8002500 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001faa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fae:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001fb0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	482e      	ldr	r0, [pc, #184]	@ (8002070 <_ZL12MX_TIM2_Initv+0x138>)
 8001fb8:	f006 fba8 	bl	800870c <HAL_TIM_ConfigClockSource>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	bf14      	ite	ne
 8001fc2:	2301      	movne	r3, #1
 8001fc4:	2300      	moveq	r3, #0
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <_ZL12MX_TIM2_Initv+0x98>
		Error_Handler();
 8001fcc:	f000 fa98 	bl	8002500 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001fd0:	4827      	ldr	r0, [pc, #156]	@ (8002070 <_ZL12MX_TIM2_Initv+0x138>)
 8001fd2:	f006 f9cf 	bl	8008374 <HAL_TIM_PWM_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	bf14      	ite	ne
 8001fdc:	2301      	movne	r3, #1
 8001fde:	2300      	moveq	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <_ZL12MX_TIM2_Initv+0xb2>
		Error_Handler();
 8001fe6:	f000 fa8b 	bl	8002500 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fea:	2300      	movs	r3, #0
 8001fec:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8001ff2:	f107 0320 	add.w	r3, r7, #32
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	481d      	ldr	r0, [pc, #116]	@ (8002070 <_ZL12MX_TIM2_Initv+0x138>)
 8001ffa:	f006 ff21 	bl	8008e40 <HAL_TIMEx_MasterConfigSynchronization>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	bf14      	ite	ne
 8002004:	2301      	movne	r3, #1
 8002006:	2300      	moveq	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <_ZL12MX_TIM2_Initv+0xda>
		Error_Handler();
 800200e:	f000 fa77 	bl	8002500 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002012:	2360      	movs	r3, #96	@ 0x60
 8002014:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	2200      	movs	r2, #0
 8002026:	4619      	mov	r1, r3
 8002028:	4811      	ldr	r0, [pc, #68]	@ (8002070 <_ZL12MX_TIM2_Initv+0x138>)
 800202a:	f006 faad 	bl	8008588 <HAL_TIM_PWM_ConfigChannel>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	bf14      	ite	ne
 8002034:	2301      	movne	r3, #1
 8002036:	2300      	moveq	r3, #0
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <_ZL12MX_TIM2_Initv+0x10a>
		Error_Handler();
 800203e:	f000 fa5f 	bl	8002500 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	2204      	movs	r2, #4
 8002046:	4619      	mov	r1, r3
 8002048:	4809      	ldr	r0, [pc, #36]	@ (8002070 <_ZL12MX_TIM2_Initv+0x138>)
 800204a:	f006 fa9d 	bl	8008588 <HAL_TIM_PWM_ConfigChannel>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	bf14      	ite	ne
 8002054:	2301      	movne	r3, #1
 8002056:	2300      	moveq	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <_ZL12MX_TIM2_Initv+0x12a>
		Error_Handler();
 800205e:	f000 fa4f 	bl	8002500 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8002062:	4803      	ldr	r0, [pc, #12]	@ (8002070 <_ZL12MX_TIM2_Initv+0x138>)
 8002064:	f000 fd8e 	bl	8002b84 <HAL_TIM_MspPostInit>

}
 8002068:	bf00      	nop
 800206a:	3738      	adds	r7, #56	@ 0x38
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	200018e4 	.word	0x200018e4

08002074 <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800207a:	f107 0308 	add.w	r3, r7, #8
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
 8002084:	609a      	str	r2, [r3, #8]
 8002086:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002088:	463b      	mov	r3, r7
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002090:	4b24      	ldr	r3, [pc, #144]	@ (8002124 <_ZL12MX_TIM3_Initv+0xb0>)
 8002092:	4a25      	ldr	r2, [pc, #148]	@ (8002128 <_ZL12MX_TIM3_Initv+0xb4>)
 8002094:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 95;
 8002096:	4b23      	ldr	r3, [pc, #140]	@ (8002124 <_ZL12MX_TIM3_Initv+0xb0>)
 8002098:	225f      	movs	r2, #95	@ 0x5f
 800209a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800209c:	4b21      	ldr	r3, [pc, #132]	@ (8002124 <_ZL12MX_TIM3_Initv+0xb0>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80020a2:	4b20      	ldr	r3, [pc, #128]	@ (8002124 <_ZL12MX_TIM3_Initv+0xb0>)
 80020a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020a8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002124 <_ZL12MX_TIM3_Initv+0xb0>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002124 <_ZL12MX_TIM3_Initv+0xb0>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80020b6:	481b      	ldr	r0, [pc, #108]	@ (8002124 <_ZL12MX_TIM3_Initv+0xb0>)
 80020b8:	f006 f8aa 	bl	8008210 <HAL_TIM_Base_Init>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	bf14      	ite	ne
 80020c2:	2301      	movne	r3, #1
 80020c4:	2300      	moveq	r3, #0
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <_ZL12MX_TIM3_Initv+0x5c>
		Error_Handler();
 80020cc:	f000 fa18 	bl	8002500 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020d4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80020d6:	f107 0308 	add.w	r3, r7, #8
 80020da:	4619      	mov	r1, r3
 80020dc:	4811      	ldr	r0, [pc, #68]	@ (8002124 <_ZL12MX_TIM3_Initv+0xb0>)
 80020de:	f006 fb15 	bl	800870c <HAL_TIM_ConfigClockSource>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf14      	ite	ne
 80020e8:	2301      	movne	r3, #1
 80020ea:	2300      	moveq	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <_ZL12MX_TIM3_Initv+0x82>
		Error_Handler();
 80020f2:	f000 fa05 	bl	8002500 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f6:	2300      	movs	r3, #0
 80020f8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 80020fe:	463b      	mov	r3, r7
 8002100:	4619      	mov	r1, r3
 8002102:	4808      	ldr	r0, [pc, #32]	@ (8002124 <_ZL12MX_TIM3_Initv+0xb0>)
 8002104:	f006 fe9c 	bl	8008e40 <HAL_TIMEx_MasterConfigSynchronization>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	bf14      	ite	ne
 800210e:	2301      	movne	r3, #1
 8002110:	2300      	moveq	r3, #0
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <_ZL12MX_TIM3_Initv+0xa8>
		Error_Handler();
 8002118:	f000 f9f2 	bl	8002500 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800211c:	bf00      	nop
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	2000192c 	.word	0x2000192c
 8002128:	40000400 	.word	0x40000400

0800212c <_ZL12MX_TIM4_Initv>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b08e      	sub	sp, #56	@ 0x38
 8002130:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002132:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002140:	f107 0320 	add.w	r3, r7, #32
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
 8002158:	615a      	str	r2, [r3, #20]
 800215a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800215c:	4b41      	ldr	r3, [pc, #260]	@ (8002264 <_ZL12MX_TIM4_Initv+0x138>)
 800215e:	4a42      	ldr	r2, [pc, #264]	@ (8002268 <_ZL12MX_TIM4_Initv+0x13c>)
 8002160:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 95;
 8002162:	4b40      	ldr	r3, [pc, #256]	@ (8002264 <_ZL12MX_TIM4_Initv+0x138>)
 8002164:	225f      	movs	r2, #95	@ 0x5f
 8002166:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002168:	4b3e      	ldr	r3, [pc, #248]	@ (8002264 <_ZL12MX_TIM4_Initv+0x138>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 19999;
 800216e:	4b3d      	ldr	r3, [pc, #244]	@ (8002264 <_ZL12MX_TIM4_Initv+0x138>)
 8002170:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002174:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002176:	4b3b      	ldr	r3, [pc, #236]	@ (8002264 <_ZL12MX_TIM4_Initv+0x138>)
 8002178:	2200      	movs	r2, #0
 800217a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800217c:	4b39      	ldr	r3, [pc, #228]	@ (8002264 <_ZL12MX_TIM4_Initv+0x138>)
 800217e:	2200      	movs	r2, #0
 8002180:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8002182:	4838      	ldr	r0, [pc, #224]	@ (8002264 <_ZL12MX_TIM4_Initv+0x138>)
 8002184:	f006 f844 	bl	8008210 <HAL_TIM_Base_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	bf14      	ite	ne
 800218e:	2301      	movne	r3, #1
 8002190:	2300      	moveq	r3, #0
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <_ZL12MX_TIM4_Initv+0x70>
		Error_Handler();
 8002198:	f000 f9b2 	bl	8002500 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800219c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021a0:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80021a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021a6:	4619      	mov	r1, r3
 80021a8:	482e      	ldr	r0, [pc, #184]	@ (8002264 <_ZL12MX_TIM4_Initv+0x138>)
 80021aa:	f006 faaf 	bl	800870c <HAL_TIM_ConfigClockSource>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	bf14      	ite	ne
 80021b4:	2301      	movne	r3, #1
 80021b6:	2300      	moveq	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <_ZL12MX_TIM4_Initv+0x96>
		Error_Handler();
 80021be:	f000 f99f 	bl	8002500 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 80021c2:	4828      	ldr	r0, [pc, #160]	@ (8002264 <_ZL12MX_TIM4_Initv+0x138>)
 80021c4:	f006 f8d6 	bl	8008374 <HAL_TIM_PWM_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	bf14      	ite	ne
 80021ce:	2301      	movne	r3, #1
 80021d0:	2300      	moveq	r3, #0
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <_ZL12MX_TIM4_Initv+0xb0>
		Error_Handler();
 80021d8:	f000 f992 	bl	8002500 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021dc:	2300      	movs	r3, #0
 80021de:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 80021e4:	f107 0320 	add.w	r3, r7, #32
 80021e8:	4619      	mov	r1, r3
 80021ea:	481e      	ldr	r0, [pc, #120]	@ (8002264 <_ZL12MX_TIM4_Initv+0x138>)
 80021ec:	f006 fe28 	bl	8008e40 <HAL_TIMEx_MasterConfigSynchronization>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	bf14      	ite	ne
 80021f6:	2301      	movne	r3, #1
 80021f8:	2300      	moveq	r3, #0
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <_ZL12MX_TIM4_Initv+0xd8>
		Error_Handler();
 8002200:	f000 f97e 	bl	8002500 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002204:	2360      	movs	r3, #96	@ 0x60
 8002206:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800220c:	2300      	movs	r3, #0
 800220e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8002214:	1d3b      	adds	r3, r7, #4
 8002216:	2200      	movs	r2, #0
 8002218:	4619      	mov	r1, r3
 800221a:	4812      	ldr	r0, [pc, #72]	@ (8002264 <_ZL12MX_TIM4_Initv+0x138>)
 800221c:	f006 f9b4 	bl	8008588 <HAL_TIM_PWM_ConfigChannel>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	bf14      	ite	ne
 8002226:	2301      	movne	r3, #1
 8002228:	2300      	moveq	r3, #0
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <_ZL12MX_TIM4_Initv+0x108>
		Error_Handler();
 8002230:	f000 f966 	bl	8002500 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8002234:	1d3b      	adds	r3, r7, #4
 8002236:	2204      	movs	r2, #4
 8002238:	4619      	mov	r1, r3
 800223a:	480a      	ldr	r0, [pc, #40]	@ (8002264 <_ZL12MX_TIM4_Initv+0x138>)
 800223c:	f006 f9a4 	bl	8008588 <HAL_TIM_PWM_ConfigChannel>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	bf14      	ite	ne
 8002246:	2301      	movne	r3, #1
 8002248:	2300      	moveq	r3, #0
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <_ZL12MX_TIM4_Initv+0x128>
		Error_Handler();
 8002250:	f000 f956 	bl	8002500 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8002254:	4803      	ldr	r0, [pc, #12]	@ (8002264 <_ZL12MX_TIM4_Initv+0x138>)
 8002256:	f000 fc95 	bl	8002b84 <HAL_TIM_MspPostInit>

}
 800225a:	bf00      	nop
 800225c:	3738      	adds	r7, #56	@ 0x38
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20001974 	.word	0x20001974
 8002268:	40000800 	.word	0x40000800

0800226c <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002270:	4b13      	ldr	r3, [pc, #76]	@ (80022c0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002272:	4a14      	ldr	r2, [pc, #80]	@ (80022c4 <_ZL19MX_USART1_UART_Initv+0x58>)
 8002274:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002276:	4b12      	ldr	r3, [pc, #72]	@ (80022c0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002278:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800227c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800227e:	4b10      	ldr	r3, [pc, #64]	@ (80022c0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002284:	4b0e      	ldr	r3, [pc, #56]	@ (80022c0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002286:	2200      	movs	r2, #0
 8002288:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800228a:	4b0d      	ldr	r3, [pc, #52]	@ (80022c0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800228c:	2200      	movs	r2, #0
 800228e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002290:	4b0b      	ldr	r3, [pc, #44]	@ (80022c0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002292:	220c      	movs	r2, #12
 8002294:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002296:	4b0a      	ldr	r3, [pc, #40]	@ (80022c0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800229c:	4b08      	ldr	r3, [pc, #32]	@ (80022c0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800229e:	2200      	movs	r2, #0
 80022a0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80022a2:	4807      	ldr	r0, [pc, #28]	@ (80022c0 <_ZL19MX_USART1_UART_Initv+0x54>)
 80022a4:	f006 fe3a 	bl	8008f1c <HAL_UART_Init>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	bf14      	ite	ne
 80022ae:	2301      	movne	r3, #1
 80022b0:	2300      	moveq	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <_ZL19MX_USART1_UART_Initv+0x50>
		Error_Handler();
 80022b8:	f000 f922 	bl	8002500 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	200019bc 	.word	0x200019bc
 80022c4:	40011000 	.word	0x40011000

080022c8 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80022cc:	4b13      	ldr	r3, [pc, #76]	@ (800231c <_ZL19MX_USART2_UART_Initv+0x54>)
 80022ce:	4a14      	ldr	r2, [pc, #80]	@ (8002320 <_ZL19MX_USART2_UART_Initv+0x58>)
 80022d0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 230400;
 80022d2:	4b12      	ldr	r3, [pc, #72]	@ (800231c <_ZL19MX_USART2_UART_Initv+0x54>)
 80022d4:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80022d8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022da:	4b10      	ldr	r3, [pc, #64]	@ (800231c <_ZL19MX_USART2_UART_Initv+0x54>)
 80022dc:	2200      	movs	r2, #0
 80022de:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80022e0:	4b0e      	ldr	r3, [pc, #56]	@ (800231c <_ZL19MX_USART2_UART_Initv+0x54>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80022e6:	4b0d      	ldr	r3, [pc, #52]	@ (800231c <_ZL19MX_USART2_UART_Initv+0x54>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80022ec:	4b0b      	ldr	r3, [pc, #44]	@ (800231c <_ZL19MX_USART2_UART_Initv+0x54>)
 80022ee:	220c      	movs	r2, #12
 80022f0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f2:	4b0a      	ldr	r3, [pc, #40]	@ (800231c <_ZL19MX_USART2_UART_Initv+0x54>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f8:	4b08      	ldr	r3, [pc, #32]	@ (800231c <_ZL19MX_USART2_UART_Initv+0x54>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80022fe:	4807      	ldr	r0, [pc, #28]	@ (800231c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002300:	f006 fe0c 	bl	8008f1c <HAL_UART_Init>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	bf14      	ite	ne
 800230a:	2301      	movne	r3, #1
 800230c:	2300      	moveq	r3, #0
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <_ZL19MX_USART2_UART_Initv+0x50>
		Error_Handler();
 8002314:	f000 f8f4 	bl	8002500 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20001a04 	.word	0x20001a04
 8002320:	40004400 	.word	0x40004400

08002324 <_ZL19MX_USART6_UART_Initv>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8002328:	4b13      	ldr	r3, [pc, #76]	@ (8002378 <_ZL19MX_USART6_UART_Initv+0x54>)
 800232a:	4a14      	ldr	r2, [pc, #80]	@ (800237c <_ZL19MX_USART6_UART_Initv+0x58>)
 800232c:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 800232e:	4b12      	ldr	r3, [pc, #72]	@ (8002378 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002330:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002334:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002336:	4b10      	ldr	r3, [pc, #64]	@ (8002378 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 800233c:	4b0e      	ldr	r3, [pc, #56]	@ (8002378 <_ZL19MX_USART6_UART_Initv+0x54>)
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8002342:	4b0d      	ldr	r3, [pc, #52]	@ (8002378 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_RX;
 8002348:	4b0b      	ldr	r3, [pc, #44]	@ (8002378 <_ZL19MX_USART6_UART_Initv+0x54>)
 800234a:	2204      	movs	r2, #4
 800234c:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234e:	4b0a      	ldr	r3, [pc, #40]	@ (8002378 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002354:	4b08      	ldr	r3, [pc, #32]	@ (8002378 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002356:	2200      	movs	r2, #0
 8002358:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 800235a:	4807      	ldr	r0, [pc, #28]	@ (8002378 <_ZL19MX_USART6_UART_Initv+0x54>)
 800235c:	f006 fdde 	bl	8008f1c <HAL_UART_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	bf14      	ite	ne
 8002366:	2301      	movne	r3, #1
 8002368:	2300      	moveq	r3, #0
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <_ZL19MX_USART6_UART_Initv+0x50>
		Error_Handler();
 8002370:	f000 f8c6 	bl	8002500 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20001a4c 	.word	0x20001a4c
 800237c:	40011400 	.word	0x40011400

08002380 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b08a      	sub	sp, #40	@ 0x28
 8002384:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002386:	f107 0314 	add.w	r3, r7, #20
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	60da      	str	r2, [r3, #12]
 8002394:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	4b55      	ldr	r3, [pc, #340]	@ (80024f0 <_ZL12MX_GPIO_Initv+0x170>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	4a54      	ldr	r2, [pc, #336]	@ (80024f0 <_ZL12MX_GPIO_Initv+0x170>)
 80023a0:	f043 0304 	orr.w	r3, r3, #4
 80023a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a6:	4b52      	ldr	r3, [pc, #328]	@ (80024f0 <_ZL12MX_GPIO_Initv+0x170>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	4b4e      	ldr	r3, [pc, #312]	@ (80024f0 <_ZL12MX_GPIO_Initv+0x170>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	4a4d      	ldr	r2, [pc, #308]	@ (80024f0 <_ZL12MX_GPIO_Initv+0x170>)
 80023bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023c2:	4b4b      	ldr	r3, [pc, #300]	@ (80024f0 <_ZL12MX_GPIO_Initv+0x170>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	4b47      	ldr	r3, [pc, #284]	@ (80024f0 <_ZL12MX_GPIO_Initv+0x170>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d6:	4a46      	ldr	r2, [pc, #280]	@ (80024f0 <_ZL12MX_GPIO_Initv+0x170>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023de:	4b44      	ldr	r3, [pc, #272]	@ (80024f0 <_ZL12MX_GPIO_Initv+0x170>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	4b40      	ldr	r3, [pc, #256]	@ (80024f0 <_ZL12MX_GPIO_Initv+0x170>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	4a3f      	ldr	r2, [pc, #252]	@ (80024f0 <_ZL12MX_GPIO_Initv+0x170>)
 80023f4:	f043 0302 	orr.w	r3, r3, #2
 80023f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023fa:	4b3d      	ldr	r3, [pc, #244]	@ (80024f0 <_ZL12MX_GPIO_Initv+0x170>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8002406:	2200      	movs	r2, #0
 8002408:	2132      	movs	r1, #50	@ 0x32
 800240a:	483a      	ldr	r0, [pc, #232]	@ (80024f4 <_ZL12MX_GPIO_Initv+0x174>)
 800240c:	f004 fa62 	bl	80068d4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8002410:	2200      	movs	r2, #0
 8002412:	2104      	movs	r1, #4
 8002414:	4838      	ldr	r0, [pc, #224]	@ (80024f8 <_ZL12MX_GPIO_Initv+0x178>)
 8002416:	f004 fa5d 	bl	80068d4 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC13 PC15 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_15;
 800241a:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800241e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002420:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002424:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002426:	2302      	movs	r3, #2
 8002428:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800242a:	f107 0314 	add.w	r3, r7, #20
 800242e:	4619      	mov	r1, r3
 8002430:	4832      	ldr	r0, [pc, #200]	@ (80024fc <_ZL12MX_GPIO_Initv+0x17c>)
 8002432:	f004 f8b3 	bl	800659c <HAL_GPIO_Init>

	/*Configure GPIO pin : PC14 */
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002436:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800243a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800243c:	2300      	movs	r3, #0
 800243e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	4619      	mov	r1, r3
 800244a:	482c      	ldr	r0, [pc, #176]	@ (80024fc <_ZL12MX_GPIO_Initv+0x17c>)
 800244c:	f004 f8a6 	bl	800659c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002450:	2301      	movs	r3, #1
 8002452:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002454:	2300      	movs	r3, #0
 8002456:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	4619      	mov	r1, r3
 8002462:	4824      	ldr	r0, [pc, #144]	@ (80024f4 <_ZL12MX_GPIO_Initv+0x174>)
 8002464:	f004 f89a 	bl	800659c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA4 PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8002468:	2332      	movs	r3, #50	@ 0x32
 800246a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800246c:	2301      	movs	r3, #1
 800246e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002474:	2300      	movs	r3, #0
 8002476:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	4619      	mov	r1, r3
 800247e:	481d      	ldr	r0, [pc, #116]	@ (80024f4 <_ZL12MX_GPIO_Initv+0x174>)
 8002480:	f004 f88c 	bl	800659c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002484:	2304      	movs	r3, #4
 8002486:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002488:	2301      	movs	r3, #1
 800248a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002490:	2300      	movs	r3, #0
 8002492:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	4619      	mov	r1, r3
 800249a:	4817      	ldr	r0, [pc, #92]	@ (80024f8 <_ZL12MX_GPIO_Initv+0x178>)
 800249c:	f004 f87e 	bl	800659c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB13 PB15 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_13 | GPIO_PIN_15 | GPIO_PIN_5;
 80024a0:	f24a 4320 	movw	r3, #42016	@ 0xa420
 80024a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	4619      	mov	r1, r3
 80024b4:	4810      	ldr	r0, [pc, #64]	@ (80024f8 <_ZL12MX_GPIO_Initv+0x178>)
 80024b6:	f004 f871 	bl	800659c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_14;
 80024ba:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80024be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024c0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80024c4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024c6:	2302      	movs	r3, #2
 80024c8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ca:	f107 0314 	add.w	r3, r7, #20
 80024ce:	4619      	mov	r1, r3
 80024d0:	4809      	ldr	r0, [pc, #36]	@ (80024f8 <_ZL12MX_GPIO_Initv+0x178>)
 80024d2:	f004 f863 	bl	800659c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2100      	movs	r1, #0
 80024da:	2028      	movs	r0, #40	@ 0x28
 80024dc:	f003 ff95 	bl	800640a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024e0:	2028      	movs	r0, #40	@ 0x28
 80024e2:	f003 ffae 	bl	8006442 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80024e6:	bf00      	nop
 80024e8:	3728      	adds	r7, #40	@ 0x28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40020000 	.word	0x40020000
 80024f8:	40020400 	.word	0x40020400
 80024fc:	40020800 	.word	0x40020800

08002500 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002504:	b672      	cpsid	i
}
 8002506:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002508:	bf00      	nop
 800250a:	e7fd      	b.n	8002508 <Error_Handler+0x8>

0800250c <_ZNSt15__new_allocatorIcED1Ev>:
#if __cplusplus >= 201103L
      __new_allocator& operator=(const __new_allocator&) = default;
#endif

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <_Z41__static_initialization_and_destruction_0v>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8002524:	b580      	push	{r7, lr}
 8002526:	b0c0      	sub	sp, #256	@ 0x100
 8002528:	af00      	add	r7, sp, #0
Timer SystemTimer;
 800252a:	4897      	ldr	r0, [pc, #604]	@ (8002788 <_Z41__static_initialization_and_destruction_0v+0x264>)
 800252c:	f7ff f914 	bl	8001758 <_ZN5TimerC1Ev>
KinematicData KinematicState;
 8002530:	4896      	ldr	r0, [pc, #600]	@ (800278c <_Z41__static_initialization_and_destruction_0v+0x268>)
 8002532:	f001 fc07 	bl	8003d44 <_ZN13KinematicDataC1Ev>
BallData BallState;
 8002536:	4896      	ldr	r0, [pc, #600]	@ (8002790 <_Z41__static_initialization_and_destruction_0v+0x26c>)
 8002538:	f000 fda4 	bl	8003084 <_ZN8BallDataC1Ev>
fieldData fieldState;
 800253c:	4895      	ldr	r0, [pc, #596]	@ (8002794 <_Z41__static_initialization_and_destruction_0v+0x270>)
 800253e:	f002 fdb9 	bl	80050b4 <_ZN9fieldDataC1Ev>
SSD1306_HardwareI2C OLED;
 8002542:	4895      	ldr	r0, [pc, #596]	@ (8002798 <_Z41__static_initialization_and_destruction_0v+0x274>)
 8002544:	f003 fb56 	bl	8005bf4 <_ZN19SSD1306_HardwareI2CC1Ev>
LidarReader lidar;
 8002548:	4894      	ldr	r0, [pc, #592]	@ (800279c <_Z41__static_initialization_and_destruction_0v+0x278>)
 800254a:	f003 f905 	bl	8005758 <_ZN11LidarReaderC1Ev>
AS5600 EncoderX(&hi2c1, 119.3805);  // parameter : wheelCircumference (mm)
 800254e:	ed9f 0a94 	vldr	s0, [pc, #592]	@ 80027a0 <_Z41__static_initialization_and_destruction_0v+0x27c>
 8002552:	4994      	ldr	r1, [pc, #592]	@ (80027a4 <_Z41__static_initialization_and_destruction_0v+0x280>)
 8002554:	4894      	ldr	r0, [pc, #592]	@ (80027a8 <_Z41__static_initialization_and_destruction_0v+0x284>)
 8002556:	f002 fdb9 	bl	80050cc <_ZN6AS5600C1EP17I2C_HandleTypeDeff>
AS5600 EncoderY(&hi2c3, 119.3805);
 800255a:	ed9f 0a91 	vldr	s0, [pc, #580]	@ 80027a0 <_Z41__static_initialization_and_destruction_0v+0x27c>
 800255e:	4993      	ldr	r1, [pc, #588]	@ (80027ac <_Z41__static_initialization_and_destruction_0v+0x288>)
 8002560:	4893      	ldr	r0, [pc, #588]	@ (80027b0 <_Z41__static_initialization_and_destruction_0v+0x28c>)
 8002562:	f002 fdb3 	bl	80050cc <_ZN6AS5600C1EP17I2C_HandleTypeDeff>
BNO055 IMU;
 8002566:	4893      	ldr	r0, [pc, #588]	@ (80027b4 <_Z41__static_initialization_and_destruction_0v+0x290>)
 8002568:	f002 fddc 	bl	8005124 <_ZN6BNO055C1Ev>
 800256c:	f107 0318 	add.w	r3, r7, #24
 8002570:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
Encoder EncoderMotor_DR(157.0796, 11, 110, "PB14", "PB15");
 8002574:	f107 0218 	add.w	r2, r7, #24
 8002578:	463b      	mov	r3, r7
 800257a:	498f      	ldr	r1, [pc, #572]	@ (80027b8 <_Z41__static_initialization_and_destruction_0v+0x294>)
 800257c:	4618      	mov	r0, r3
 800257e:	f009 fbd7 	bl	800bd30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002582:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002586:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800258a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800258e:	f107 031c 	add.w	r3, r7, #28
 8002592:	498a      	ldr	r1, [pc, #552]	@ (80027bc <_Z41__static_initialization_and_destruction_0v+0x298>)
 8002594:	4618      	mov	r0, r3
 8002596:	f009 fbcb 	bl	800bd30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800259a:	f107 031c 	add.w	r3, r7, #28
 800259e:	463a      	mov	r2, r7
 80025a0:	216e      	movs	r1, #110	@ 0x6e
 80025a2:	eef2 0a06 	vmov.f32	s1, #38	@ 0x41300000  11.0
 80025a6:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 80027c0 <_Z41__static_initialization_and_destruction_0v+0x29c>
 80025aa:	4886      	ldr	r0, [pc, #536]	@ (80027c4 <_Z41__static_initialization_and_destruction_0v+0x2a0>)
 80025ac:	f002 ffc4 	bl	8005538 <_ZN7EncoderC1EffmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_>
 80025b0:	f107 031c 	add.w	r3, r7, #28
 80025b4:	4618      	mov	r0, r3
 80025b6:	f009 fb39 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80025ba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff ffa4 	bl	800250c <_ZNSt15__new_allocatorIcED1Ev>
 80025c4:	463b      	mov	r3, r7
 80025c6:	4618      	mov	r0, r3
 80025c8:	f009 fb30 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80025cc:	f107 0318 	add.w	r3, r7, #24
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff9b 	bl	800250c <_ZNSt15__new_allocatorIcED1Ev>
 80025d6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80025da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
Encoder EncoderMotor_DL(157.0796, 11, 110, "PB12", "PB13");
 80025de:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80025e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80025e6:	4978      	ldr	r1, [pc, #480]	@ (80027c8 <_Z41__static_initialization_and_destruction_0v+0x2a4>)
 80025e8:	4618      	mov	r0, r3
 80025ea:	f009 fba1 	bl	800bd30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80025ee:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80025f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80025f6:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80025fa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025fe:	4973      	ldr	r1, [pc, #460]	@ (80027cc <_Z41__static_initialization_and_destruction_0v+0x2a8>)
 8002600:	4618      	mov	r0, r3
 8002602:	f009 fb95 	bl	800bd30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002606:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800260a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800260e:	216e      	movs	r1, #110	@ 0x6e
 8002610:	eef2 0a06 	vmov.f32	s1, #38	@ 0x41300000  11.0
 8002614:	ed9f 0a6a 	vldr	s0, [pc, #424]	@ 80027c0 <_Z41__static_initialization_and_destruction_0v+0x29c>
 8002618:	486d      	ldr	r0, [pc, #436]	@ (80027d0 <_Z41__static_initialization_and_destruction_0v+0x2ac>)
 800261a:	f002 ff8d 	bl	8005538 <_ZN7EncoderC1EffmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_>
 800261e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002622:	4618      	mov	r0, r3
 8002624:	f009 fb02 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002628:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff6d 	bl	800250c <_ZNSt15__new_allocatorIcED1Ev>
 8002632:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002636:	4618      	mov	r0, r3
 8002638:	f009 faf8 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800263c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff ff63 	bl	800250c <_ZNSt15__new_allocatorIcED1Ev>
 8002646:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800264a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
Encoder EncoderMotor_TR(157.0796, 11, 110, "PC13", "PC14"); // TL
 800264e:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8002652:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002656:	495f      	ldr	r1, [pc, #380]	@ (80027d4 <_Z41__static_initialization_and_destruction_0v+0x2b0>)
 8002658:	4618      	mov	r0, r3
 800265a:	f009 fb69 	bl	800bd30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800265e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002662:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002666:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 800266a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800266e:	495a      	ldr	r1, [pc, #360]	@ (80027d8 <_Z41__static_initialization_and_destruction_0v+0x2b4>)
 8002670:	4618      	mov	r0, r3
 8002672:	f009 fb5d 	bl	800bd30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002676:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800267a:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800267e:	216e      	movs	r1, #110	@ 0x6e
 8002680:	eef2 0a06 	vmov.f32	s1, #38	@ 0x41300000  11.0
 8002684:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 80027c0 <_Z41__static_initialization_and_destruction_0v+0x29c>
 8002688:	4854      	ldr	r0, [pc, #336]	@ (80027dc <_Z41__static_initialization_and_destruction_0v+0x2b8>)
 800268a:	f002 ff55 	bl	8005538 <_ZN7EncoderC1EffmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_>
 800268e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002692:	4618      	mov	r0, r3
 8002694:	f009 faca 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002698:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff ff35 	bl	800250c <_ZNSt15__new_allocatorIcED1Ev>
 80026a2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80026a6:	4618      	mov	r0, r3
 80026a8:	f009 fac0 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80026ac:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ff2b 	bl	800250c <_ZNSt15__new_allocatorIcED1Ev>
 80026b6:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80026ba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
Encoder EncoderMotor_TL(157.0796, 11, 110, "PC15", "PA0"); // TR
 80026be:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 80026c2:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80026c6:	4946      	ldr	r1, [pc, #280]	@ (80027e0 <_Z41__static_initialization_and_destruction_0v+0x2bc>)
 80026c8:	4618      	mov	r0, r3
 80026ca:	f009 fb31 	bl	800bd30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80026ce:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80026d2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80026d6:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 80026da:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80026de:	4941      	ldr	r1, [pc, #260]	@ (80027e4 <_Z41__static_initialization_and_destruction_0v+0x2c0>)
 80026e0:	4618      	mov	r0, r3
 80026e2:	f009 fb25 	bl	800bd30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80026e6:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80026ea:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80026ee:	216e      	movs	r1, #110	@ 0x6e
 80026f0:	eef2 0a06 	vmov.f32	s1, #38	@ 0x41300000  11.0
 80026f4:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 80027c0 <_Z41__static_initialization_and_destruction_0v+0x29c>
 80026f8:	483b      	ldr	r0, [pc, #236]	@ (80027e8 <_Z41__static_initialization_and_destruction_0v+0x2c4>)
 80026fa:	f002 ff1d 	bl	8005538 <_ZN7EncoderC1EffmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_>
 80026fe:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002702:	4618      	mov	r0, r3
 8002704:	f009 fa92 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002708:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff fefd 	bl	800250c <_ZNSt15__new_allocatorIcED1Ev>
 8002712:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002716:	4618      	mov	r0, r3
 8002718:	f009 fa88 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800271c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fef3 	bl	800250c <_ZNSt15__new_allocatorIcED1Ev>
UartComm openMV_com(&huart6);
 8002726:	4931      	ldr	r1, [pc, #196]	@ (80027ec <_Z41__static_initialization_and_destruction_0v+0x2c8>)
 8002728:	4831      	ldr	r0, [pc, #196]	@ (80027f0 <_Z41__static_initialization_and_destruction_0v+0x2cc>)
 800272a:	f003 fb81 	bl	8005e30 <_ZN8UartCommC1EP20__UART_HandleTypeDef>
UartComm bluetooth_com(&huart1);
 800272e:	4931      	ldr	r1, [pc, #196]	@ (80027f4 <_Z41__static_initialization_and_destruction_0v+0x2d0>)
 8002730:	4831      	ldr	r0, [pc, #196]	@ (80027f8 <_Z41__static_initialization_and_destruction_0v+0x2d4>)
 8002732:	f003 fb7d 	bl	8005e30 <_ZN8UartCommC1EP20__UART_HandleTypeDef>
Localization RobotPosition(50); // parameter : overdrift threshold (mm)
 8002736:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 80027fc <_Z41__static_initialization_and_destruction_0v+0x2d8>
 800273a:	4831      	ldr	r0, [pc, #196]	@ (8002800 <_Z41__static_initialization_and_destruction_0v+0x2dc>)
 800273c:	f002 fc86 	bl	800504c <_ZN12LocalizationC1Ef>
BallTrack BallChase(22, 0, 21.5, 21.7, 0, 20.8, 0, 0, 25, 25, 12, 15); // x = 19.5
 8002740:	eef2 5a0e 	vmov.f32	s11, #46	@ 0x41700000  15.0
 8002744:	eeb2 5a08 	vmov.f32	s10, #40	@ 0x41400000  12.0
 8002748:	eef3 4a09 	vmov.f32	s9, #57	@ 0x41c80000  25.0
 800274c:	eeb3 4a09 	vmov.f32	s8, #57	@ 0x41c80000  25.0
 8002750:	eddf 3a2c 	vldr	s7, [pc, #176]	@ 8002804 <_Z41__static_initialization_and_destruction_0v+0x2e0>
 8002754:	ed9f 3a2b 	vldr	s6, [pc, #172]	@ 8002804 <_Z41__static_initialization_and_destruction_0v+0x2e0>
 8002758:	eddf 2a2b 	vldr	s5, [pc, #172]	@ 8002808 <_Z41__static_initialization_and_destruction_0v+0x2e4>
 800275c:	ed9f 2a29 	vldr	s4, [pc, #164]	@ 8002804 <_Z41__static_initialization_and_destruction_0v+0x2e0>
 8002760:	eddf 1a2a 	vldr	s3, [pc, #168]	@ 800280c <_Z41__static_initialization_and_destruction_0v+0x2e8>
 8002764:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 8002810 <_Z41__static_initialization_and_destruction_0v+0x2ec>
 8002768:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8002804 <_Z41__static_initialization_and_destruction_0v+0x2e0>
 800276c:	eeb3 0a06 	vmov.f32	s0, #54	@ 0x41b00000  22.0
 8002770:	4828      	ldr	r0, [pc, #160]	@ (8002814 <_Z41__static_initialization_and_destruction_0v+0x2f0>)
 8002772:	f000 fd0e 	bl	8003192 <_ZN9BallTrackC1Effffffffffff>
movementSystem Robotmovement;
 8002776:	4828      	ldr	r0, [pc, #160]	@ (8002818 <_Z41__static_initialization_and_destruction_0v+0x2f4>)
 8002778:	f001 fee8 	bl	800454c <_ZN14movementSystemC1Ev>
}
 800277c:	bf00      	nop
 800277e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	200001f4 	.word	0x200001f4
 800278c:	20000200 	.word	0x20000200
 8002790:	200002ec 	.word	0x200002ec
 8002794:	20000304 	.word	0x20000304
 8002798:	2000031c 	.word	0x2000031c
 800279c:	20000720 	.word	0x20000720
 80027a0:	42eec2d1 	.word	0x42eec2d1
 80027a4:	2000183c 	.word	0x2000183c
 80027a8:	20000ff4 	.word	0x20000ff4
 80027ac:	20001890 	.word	0x20001890
 80027b0:	20001008 	.word	0x20001008
 80027b4:	2000101c 	.word	0x2000101c
 80027b8:	0800ea70 	.word	0x0800ea70
 80027bc:	0800ea78 	.word	0x0800ea78
 80027c0:	431d1461 	.word	0x431d1461
 80027c4:	20001040 	.word	0x20001040
 80027c8:	0800ea80 	.word	0x0800ea80
 80027cc:	0800ea88 	.word	0x0800ea88
 80027d0:	20001098 	.word	0x20001098
 80027d4:	0800ea90 	.word	0x0800ea90
 80027d8:	0800ea98 	.word	0x0800ea98
 80027dc:	200010f0 	.word	0x200010f0
 80027e0:	0800eaa0 	.word	0x0800eaa0
 80027e4:	0800eaa8 	.word	0x0800eaa8
 80027e8:	20001148 	.word	0x20001148
 80027ec:	20001a4c 	.word	0x20001a4c
 80027f0:	200011a0 	.word	0x200011a0
 80027f4:	200019bc 	.word	0x200019bc
 80027f8:	200012c8 	.word	0x200012c8
 80027fc:	42480000 	.word	0x42480000
 8002800:	200013f0 	.word	0x200013f0
 8002804:	00000000 	.word	0x00000000
 8002808:	41a66666 	.word	0x41a66666
 800280c:	41ad999a 	.word	0x41ad999a
 8002810:	41ac0000 	.word	0x41ac0000
 8002814:	20001414 	.word	0x20001414
 8002818:	20001484 	.word	0x20001484

0800281c <_ZN12motorControlD1Ev>:
#include "Timer.h"

#define MAX_INPUT 501
extern int16_t sigmoidArray[500];

class motorControl {
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3318      	adds	r3, #24
 8002828:	4618      	mov	r0, r3
 800282a:	f009 f9ff 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4618      	mov	r0, r3
 8002832:	f009 f9fb 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <_ZN14movementSystemD1Ev>:
#include "Encoder.h"
#include "InverseKinematicCalculation.h"
#include "motorControl.h"
#include "BNO055.h"

class movementSystem {
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff ffe4 	bl	800281c <_ZN12motorControlD1Ev>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff ffde 	bl	800281c <_ZN12motorControlD1Ev>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	33f4      	adds	r3, #244	@ 0xf4
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ffd9 	bl	800281c <_ZN12motorControlD1Ev>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	333c      	adds	r3, #60	@ 0x3c
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff ffd4 	bl	800281c <_ZN12motorControlD1Ev>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <_ZN7EncoderD1Ev>:
#include <SystemGPIO.h>
#include <Timer.h>
#include "math.h"
#include "string.h"

class Encoder {
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3324      	adds	r3, #36	@ 0x24
 800288a:	4618      	mov	r0, r3
 800288c:	f009 f9ce 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	330c      	adds	r3, #12
 8002894:	4618      	mov	r0, r3
 8002896:	f009 f9c9 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4618      	mov	r0, r3
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <_ZN13KinematicDataD1Ev>:
#define PI 3.14159265358979323846
#include "math.h"
#include <iostream>
#include <string>

class KinematicData {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	33d4      	adds	r3, #212	@ 0xd4
 80028b0:	4618      	mov	r0, r3
 80028b2:	f009 f9bb 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	33bc      	adds	r3, #188	@ 0xbc
 80028ba:	4618      	mov	r0, r3
 80028bc:	f009 f9b6 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	33a4      	adds	r3, #164	@ 0xa4
 80028c4:	4618      	mov	r0, r3
 80028c6:	f009 f9b1 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	338c      	adds	r3, #140	@ 0x8c
 80028ce:	4618      	mov	r0, r3
 80028d0:	f009 f9ac 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3374      	adds	r3, #116	@ 0x74
 80028d8:	4618      	mov	r0, r3
 80028da:	f009 f9a7 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	335c      	adds	r3, #92	@ 0x5c
 80028e2:	4618      	mov	r0, r3
 80028e4:	f009 f9a2 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3344      	adds	r3, #68	@ 0x44
 80028ec:	4618      	mov	r0, r3
 80028ee:	f009 f99d 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	332c      	adds	r3, #44	@ 0x2c
 80028f6:	4618      	mov	r0, r3
 80028f8:	f009 f998 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <_Z41__static_initialization_and_destruction_1v>:
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
movementSystem Robotmovement;
 800290c:	4809      	ldr	r0, [pc, #36]	@ (8002934 <_Z41__static_initialization_and_destruction_1v+0x2c>)
 800290e:	f7ff ff97 	bl	8002840 <_ZN14movementSystemD1Ev>
Encoder EncoderMotor_TL(157.0796, 11, 110, "PC15", "PA0"); // TR
 8002912:	4809      	ldr	r0, [pc, #36]	@ (8002938 <_Z41__static_initialization_and_destruction_1v+0x30>)
 8002914:	f7ff ffb3 	bl	800287e <_ZN7EncoderD1Ev>
Encoder EncoderMotor_TR(157.0796, 11, 110, "PC13", "PC14"); // TL
 8002918:	4808      	ldr	r0, [pc, #32]	@ (800293c <_Z41__static_initialization_and_destruction_1v+0x34>)
 800291a:	f7ff ffb0 	bl	800287e <_ZN7EncoderD1Ev>
Encoder EncoderMotor_DL(157.0796, 11, 110, "PB12", "PB13");
 800291e:	4808      	ldr	r0, [pc, #32]	@ (8002940 <_Z41__static_initialization_and_destruction_1v+0x38>)
 8002920:	f7ff ffad 	bl	800287e <_ZN7EncoderD1Ev>
Encoder EncoderMotor_DR(157.0796, 11, 110, "PB14", "PB15");
 8002924:	4807      	ldr	r0, [pc, #28]	@ (8002944 <_Z41__static_initialization_and_destruction_1v+0x3c>)
 8002926:	f7ff ffaa 	bl	800287e <_ZN7EncoderD1Ev>
KinematicData KinematicState;
 800292a:	4807      	ldr	r0, [pc, #28]	@ (8002948 <_Z41__static_initialization_and_destruction_1v+0x40>)
 800292c:	f7ff ffba 	bl	80028a4 <_ZN13KinematicDataD1Ev>
}
 8002930:	bf00      	nop
 8002932:	bd80      	pop	{r7, pc}
 8002934:	20001484 	.word	0x20001484
 8002938:	20001148 	.word	0x20001148
 800293c:	200010f0 	.word	0x200010f0
 8002940:	20001098 	.word	0x20001098
 8002944:	20001040 	.word	0x20001040
 8002948:	20000200 	.word	0x20000200

0800294c <_GLOBAL__sub_I_SystemTimer>:
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
 8002950:	f7ff fde8 	bl	8002524 <_Z41__static_initialization_and_destruction_0v>
 8002954:	bd80      	pop	{r7, pc}

08002956 <_GLOBAL__sub_D_SystemTimer>:
 8002956:	b580      	push	{r7, lr}
 8002958:	af00      	add	r7, sp, #0
 800295a:	f7ff ffd5 	bl	8002908 <_Z41__static_initialization_and_destruction_1v>
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	4b10      	ldr	r3, [pc, #64]	@ (80029ac <HAL_MspInit+0x4c>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800296e:	4a0f      	ldr	r2, [pc, #60]	@ (80029ac <HAL_MspInit+0x4c>)
 8002970:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002974:	6453      	str	r3, [r2, #68]	@ 0x44
 8002976:	4b0d      	ldr	r3, [pc, #52]	@ (80029ac <HAL_MspInit+0x4c>)
 8002978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800297e:	607b      	str	r3, [r7, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	603b      	str	r3, [r7, #0]
 8002986:	4b09      	ldr	r3, [pc, #36]	@ (80029ac <HAL_MspInit+0x4c>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	4a08      	ldr	r2, [pc, #32]	@ (80029ac <HAL_MspInit+0x4c>)
 800298c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002990:	6413      	str	r3, [r2, #64]	@ 0x40
 8002992:	4b06      	ldr	r3, [pc, #24]	@ (80029ac <HAL_MspInit+0x4c>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40023800 	.word	0x40023800

080029b0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08c      	sub	sp, #48	@ 0x30
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b8:	f107 031c 	add.w	r3, r7, #28
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a42      	ldr	r2, [pc, #264]	@ (8002ad8 <HAL_I2C_MspInit+0x128>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d12d      	bne.n	8002a2e <HAL_I2C_MspInit+0x7e>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	61bb      	str	r3, [r7, #24]
 80029d6:	4b41      	ldr	r3, [pc, #260]	@ (8002adc <HAL_I2C_MspInit+0x12c>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029da:	4a40      	ldr	r2, [pc, #256]	@ (8002adc <HAL_I2C_MspInit+0x12c>)
 80029dc:	f043 0302 	orr.w	r3, r3, #2
 80029e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e2:	4b3e      	ldr	r3, [pc, #248]	@ (8002adc <HAL_I2C_MspInit+0x12c>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	61bb      	str	r3, [r7, #24]
 80029ec:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80029f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029f4:	2312      	movs	r3, #18
 80029f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fc:	2303      	movs	r3, #3
 80029fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a00:	2304      	movs	r3, #4
 8002a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a04:	f107 031c 	add.w	r3, r7, #28
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4835      	ldr	r0, [pc, #212]	@ (8002ae0 <HAL_I2C_MspInit+0x130>)
 8002a0c:	f003 fdc6 	bl	800659c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	4b31      	ldr	r3, [pc, #196]	@ (8002adc <HAL_I2C_MspInit+0x12c>)
 8002a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a18:	4a30      	ldr	r2, [pc, #192]	@ (8002adc <HAL_I2C_MspInit+0x12c>)
 8002a1a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a20:	4b2e      	ldr	r3, [pc, #184]	@ (8002adc <HAL_I2C_MspInit+0x12c>)
 8002a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002a2c:	e04f      	b.n	8002ace <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a2c      	ldr	r2, [pc, #176]	@ (8002ae4 <HAL_I2C_MspInit+0x134>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d14a      	bne.n	8002ace <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a38:	2300      	movs	r3, #0
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	4b27      	ldr	r3, [pc, #156]	@ (8002adc <HAL_I2C_MspInit+0x12c>)
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a40:	4a26      	ldr	r2, [pc, #152]	@ (8002adc <HAL_I2C_MspInit+0x12c>)
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a48:	4b24      	ldr	r3, [pc, #144]	@ (8002adc <HAL_I2C_MspInit+0x12c>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a54:	2300      	movs	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	4b20      	ldr	r3, [pc, #128]	@ (8002adc <HAL_I2C_MspInit+0x12c>)
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8002adc <HAL_I2C_MspInit+0x12c>)
 8002a5e:	f043 0302 	orr.w	r3, r3, #2
 8002a62:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a64:	4b1d      	ldr	r3, [pc, #116]	@ (8002adc <HAL_I2C_MspInit+0x12c>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a76:	2312      	movs	r3, #18
 8002a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a82:	2304      	movs	r3, #4
 8002a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a86:	f107 031c 	add.w	r3, r7, #28
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4816      	ldr	r0, [pc, #88]	@ (8002ae8 <HAL_I2C_MspInit+0x138>)
 8002a8e:	f003 fd85 	bl	800659c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a92:	2310      	movs	r3, #16
 8002a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a96:	2312      	movs	r3, #18
 8002a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8002aa2:	2309      	movs	r3, #9
 8002aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa6:	f107 031c 	add.w	r3, r7, #28
 8002aaa:	4619      	mov	r1, r3
 8002aac:	480c      	ldr	r0, [pc, #48]	@ (8002ae0 <HAL_I2C_MspInit+0x130>)
 8002aae:	f003 fd75 	bl	800659c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	4b09      	ldr	r3, [pc, #36]	@ (8002adc <HAL_I2C_MspInit+0x12c>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	4a08      	ldr	r2, [pc, #32]	@ (8002adc <HAL_I2C_MspInit+0x12c>)
 8002abc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ac0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ac2:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <HAL_I2C_MspInit+0x12c>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	68bb      	ldr	r3, [r7, #8]
}
 8002ace:	bf00      	nop
 8002ad0:	3730      	adds	r7, #48	@ 0x30
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40005400 	.word	0x40005400
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40020400 	.word	0x40020400
 8002ae4:	40005c00 	.word	0x40005c00
 8002ae8:	40020000 	.word	0x40020000

08002aec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002afc:	d10e      	bne.n	8002b1c <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	4b1d      	ldr	r3, [pc, #116]	@ (8002b78 <HAL_TIM_Base_MspInit+0x8c>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	4a1c      	ldr	r2, [pc, #112]	@ (8002b78 <HAL_TIM_Base_MspInit+0x8c>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002b78 <HAL_TIM_Base_MspInit+0x8c>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002b1a:	e026      	b.n	8002b6a <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a16      	ldr	r2, [pc, #88]	@ (8002b7c <HAL_TIM_Base_MspInit+0x90>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d10e      	bne.n	8002b44 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	4b13      	ldr	r3, [pc, #76]	@ (8002b78 <HAL_TIM_Base_MspInit+0x8c>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2e:	4a12      	ldr	r2, [pc, #72]	@ (8002b78 <HAL_TIM_Base_MspInit+0x8c>)
 8002b30:	f043 0302 	orr.w	r3, r3, #2
 8002b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b36:	4b10      	ldr	r3, [pc, #64]	@ (8002b78 <HAL_TIM_Base_MspInit+0x8c>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	693b      	ldr	r3, [r7, #16]
}
 8002b42:	e012      	b.n	8002b6a <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a0d      	ldr	r2, [pc, #52]	@ (8002b80 <HAL_TIM_Base_MspInit+0x94>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d10d      	bne.n	8002b6a <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	4b09      	ldr	r3, [pc, #36]	@ (8002b78 <HAL_TIM_Base_MspInit+0x8c>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	4a08      	ldr	r2, [pc, #32]	@ (8002b78 <HAL_TIM_Base_MspInit+0x8c>)
 8002b58:	f043 0304 	orr.w	r3, r3, #4
 8002b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b5e:	4b06      	ldr	r3, [pc, #24]	@ (8002b78 <HAL_TIM_Base_MspInit+0x8c>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
}
 8002b6a:	bf00      	nop
 8002b6c:	371c      	adds	r7, #28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40000400 	.word	0x40000400
 8002b80:	40000800 	.word	0x40000800

08002b84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	@ 0x28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	f107 0314 	add.w	r3, r7, #20
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ba4:	d13d      	bne.n	8002c22 <HAL_TIM_MspPostInit+0x9e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	4b31      	ldr	r3, [pc, #196]	@ (8002c70 <HAL_TIM_MspPostInit+0xec>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bae:	4a30      	ldr	r2, [pc, #192]	@ (8002c70 <HAL_TIM_MspPostInit+0xec>)
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bb6:	4b2e      	ldr	r3, [pc, #184]	@ (8002c70 <HAL_TIM_MspPostInit+0xec>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8002c70 <HAL_TIM_MspPostInit+0xec>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bca:	4a29      	ldr	r2, [pc, #164]	@ (8002c70 <HAL_TIM_MspPostInit+0xec>)
 8002bcc:	f043 0302 	orr.w	r3, r3, #2
 8002bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bd2:	4b27      	ldr	r3, [pc, #156]	@ (8002c70 <HAL_TIM_MspPostInit+0xec>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002bde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be4:	2302      	movs	r3, #2
 8002be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002bec:	2301      	movs	r3, #1
 8002bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf4:	f107 0314 	add.w	r3, r7, #20
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	481e      	ldr	r0, [pc, #120]	@ (8002c74 <HAL_TIM_MspPostInit+0xf0>)
 8002bfc:	f003 fcce 	bl	800659c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c00:	2308      	movs	r3, #8
 8002c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c04:	2302      	movs	r3, #2
 8002c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c10:	2301      	movs	r3, #1
 8002c12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c14:	f107 0314 	add.w	r3, r7, #20
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4817      	ldr	r0, [pc, #92]	@ (8002c78 <HAL_TIM_MspPostInit+0xf4>)
 8002c1c:	f003 fcbe 	bl	800659c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002c20:	e022      	b.n	8002c68 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a15      	ldr	r2, [pc, #84]	@ (8002c7c <HAL_TIM_MspPostInit+0xf8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d11d      	bne.n	8002c68 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	4b0f      	ldr	r3, [pc, #60]	@ (8002c70 <HAL_TIM_MspPostInit+0xec>)
 8002c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c34:	4a0e      	ldr	r2, [pc, #56]	@ (8002c70 <HAL_TIM_MspPostInit+0xec>)
 8002c36:	f043 0302 	orr.w	r3, r3, #2
 8002c3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c70 <HAL_TIM_MspPostInit+0xec>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c48:	23c0      	movs	r3, #192	@ 0xc0
 8002c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002c54:	2301      	movs	r3, #1
 8002c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c5c:	f107 0314 	add.w	r3, r7, #20
 8002c60:	4619      	mov	r1, r3
 8002c62:	4805      	ldr	r0, [pc, #20]	@ (8002c78 <HAL_TIM_MspPostInit+0xf4>)
 8002c64:	f003 fc9a 	bl	800659c <HAL_GPIO_Init>
}
 8002c68:	bf00      	nop
 8002c6a:	3728      	adds	r7, #40	@ 0x28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40020000 	.word	0x40020000
 8002c78:	40020400 	.word	0x40020400
 8002c7c:	40000800 	.word	0x40000800

08002c80 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08e      	sub	sp, #56	@ 0x38
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a5c      	ldr	r2, [pc, #368]	@ (8002e10 <HAL_UART_MspInit+0x190>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d12d      	bne.n	8002cfe <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	623b      	str	r3, [r7, #32]
 8002ca6:	4b5b      	ldr	r3, [pc, #364]	@ (8002e14 <HAL_UART_MspInit+0x194>)
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002caa:	4a5a      	ldr	r2, [pc, #360]	@ (8002e14 <HAL_UART_MspInit+0x194>)
 8002cac:	f043 0310 	orr.w	r3, r3, #16
 8002cb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cb2:	4b58      	ldr	r3, [pc, #352]	@ (8002e14 <HAL_UART_MspInit+0x194>)
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb6:	f003 0310 	and.w	r3, r3, #16
 8002cba:	623b      	str	r3, [r7, #32]
 8002cbc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
 8002cc2:	4b54      	ldr	r3, [pc, #336]	@ (8002e14 <HAL_UART_MspInit+0x194>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc6:	4a53      	ldr	r2, [pc, #332]	@ (8002e14 <HAL_UART_MspInit+0x194>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cce:	4b51      	ldr	r3, [pc, #324]	@ (8002e14 <HAL_UART_MspInit+0x194>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	61fb      	str	r3, [r7, #28]
 8002cd8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cda:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002cde:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cec:	2307      	movs	r3, #7
 8002cee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4848      	ldr	r0, [pc, #288]	@ (8002e18 <HAL_UART_MspInit+0x198>)
 8002cf8:	f003 fc50 	bl	800659c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8002cfc:	e084      	b.n	8002e08 <HAL_UART_MspInit+0x188>
  else if(huart->Instance==USART2)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a46      	ldr	r2, [pc, #280]	@ (8002e1c <HAL_UART_MspInit+0x19c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d134      	bne.n	8002d72 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61bb      	str	r3, [r7, #24]
 8002d0c:	4b41      	ldr	r3, [pc, #260]	@ (8002e14 <HAL_UART_MspInit+0x194>)
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d10:	4a40      	ldr	r2, [pc, #256]	@ (8002e14 <HAL_UART_MspInit+0x194>)
 8002d12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d16:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d18:	4b3e      	ldr	r3, [pc, #248]	@ (8002e14 <HAL_UART_MspInit+0x194>)
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	4b3a      	ldr	r3, [pc, #232]	@ (8002e14 <HAL_UART_MspInit+0x194>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2c:	4a39      	ldr	r2, [pc, #228]	@ (8002e14 <HAL_UART_MspInit+0x194>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d34:	4b37      	ldr	r3, [pc, #220]	@ (8002e14 <HAL_UART_MspInit+0x194>)
 8002d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d40:	230c      	movs	r3, #12
 8002d42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d44:	2302      	movs	r3, #2
 8002d46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d50:	2307      	movs	r3, #7
 8002d52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d58:	4619      	mov	r1, r3
 8002d5a:	482f      	ldr	r0, [pc, #188]	@ (8002e18 <HAL_UART_MspInit+0x198>)
 8002d5c:	f003 fc1e 	bl	800659c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8002d60:	2200      	movs	r2, #0
 8002d62:	2101      	movs	r1, #1
 8002d64:	2026      	movs	r0, #38	@ 0x26
 8002d66:	f003 fb50 	bl	800640a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d6a:	2026      	movs	r0, #38	@ 0x26
 8002d6c:	f003 fb69 	bl	8006442 <HAL_NVIC_EnableIRQ>
}
 8002d70:	e04a      	b.n	8002e08 <HAL_UART_MspInit+0x188>
  else if(huart->Instance==USART6)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a2a      	ldr	r2, [pc, #168]	@ (8002e20 <HAL_UART_MspInit+0x1a0>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d145      	bne.n	8002e08 <HAL_UART_MspInit+0x188>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	4b24      	ldr	r3, [pc, #144]	@ (8002e14 <HAL_UART_MspInit+0x194>)
 8002d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d84:	4a23      	ldr	r2, [pc, #140]	@ (8002e14 <HAL_UART_MspInit+0x194>)
 8002d86:	f043 0320 	orr.w	r3, r3, #32
 8002d8a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d8c:	4b21      	ldr	r3, [pc, #132]	@ (8002e14 <HAL_UART_MspInit+0x194>)
 8002d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d90:	f003 0320 	and.w	r3, r3, #32
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e14 <HAL_UART_MspInit+0x194>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da0:	4a1c      	ldr	r2, [pc, #112]	@ (8002e14 <HAL_UART_MspInit+0x194>)
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002da8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e14 <HAL_UART_MspInit+0x194>)
 8002daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002db4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002db8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002dc6:	2308      	movs	r3, #8
 8002dc8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4811      	ldr	r0, [pc, #68]	@ (8002e18 <HAL_UART_MspInit+0x198>)
 8002dd2:	f003 fbe3 	bl	800659c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002dd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002de0:	2301      	movs	r3, #1
 8002de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de4:	2303      	movs	r3, #3
 8002de6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002de8:	2308      	movs	r3, #8
 8002dea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002df0:	4619      	mov	r1, r3
 8002df2:	4809      	ldr	r0, [pc, #36]	@ (8002e18 <HAL_UART_MspInit+0x198>)
 8002df4:	f003 fbd2 	bl	800659c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 1, 0);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	2047      	movs	r0, #71	@ 0x47
 8002dfe:	f003 fb04 	bl	800640a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002e02:	2047      	movs	r0, #71	@ 0x47
 8002e04:	f003 fb1d 	bl	8006442 <HAL_NVIC_EnableIRQ>
}
 8002e08:	bf00      	nop
 8002e0a:	3738      	adds	r7, #56	@ 0x38
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40011000 	.word	0x40011000
 8002e14:	40023800 	.word	0x40023800
 8002e18:	40020000 	.word	0x40020000
 8002e1c:	40004400 	.word	0x40004400
 8002e20:	40011400 	.word	0x40011400

08002e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002e28:	bf00      	nop
 8002e2a:	e7fd      	b.n	8002e28 <NMI_Handler+0x4>

08002e2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e30:	bf00      	nop
 8002e32:	e7fd      	b.n	8002e30 <HardFault_Handler+0x4>

08002e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e38:	bf00      	nop
 8002e3a:	e7fd      	b.n	8002e38 <MemManage_Handler+0x4>

08002e3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e40:	bf00      	nop
 8002e42:	e7fd      	b.n	8002e40 <BusFault_Handler+0x4>

08002e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e48:	bf00      	nop
 8002e4a:	e7fd      	b.n	8002e48 <UsageFault_Handler+0x4>

08002e4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e7a:	f003 f9a7 	bl	80061cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e88:	4802      	ldr	r0, [pc, #8]	@ (8002e94 <USART2_IRQHandler+0x10>)
 8002e8a:	f006 f947 	bl	800911c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20001a04 	.word	0x20001a04

08002e98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002e9c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002ea0:	f003 fd32 	bl	8006908 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002ea4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002ea8:	f003 fd2e 	bl	8006908 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002eac:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002eb0:	f003 fd2a 	bl	8006908 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002eb4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002eb8:	f003 fd26 	bl	8006908 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ebc:	bf00      	nop
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002ec4:	4802      	ldr	r0, [pc, #8]	@ (8002ed0 <USART6_IRQHandler+0x10>)
 8002ec6:	f006 f929 	bl	800911c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20001a4c 	.word	0x20001a4c

08002ed4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return 1;
 8002ed8:	2301      	movs	r3, #1
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <_kill>:

int _kill(int pid, int sig)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002eee:	f009 fffd 	bl	800ceec <__errno>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2216      	movs	r2, #22
 8002ef6:	601a      	str	r2, [r3, #0]
  return -1;
 8002ef8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <_exit>:

void _exit (int status)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7ff ffe7 	bl	8002ee4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f16:	bf00      	nop
 8002f18:	e7fd      	b.n	8002f16 <_exit+0x12>

08002f1a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b086      	sub	sp, #24
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	e00a      	b.n	8002f42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f2c:	f3af 8000 	nop.w
 8002f30:	4601      	mov	r1, r0
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	60ba      	str	r2, [r7, #8]
 8002f38:	b2ca      	uxtb	r2, r1
 8002f3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	dbf0      	blt.n	8002f2c <_read+0x12>
  }

  return len;
 8002f4a:	687b      	ldr	r3, [r7, #4]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	e009      	b.n	8002f7a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	60ba      	str	r2, [r7, #8]
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	3301      	adds	r3, #1
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	dbf1      	blt.n	8002f66 <_write+0x12>
  }
  return len;
 8002f82:	687b      	ldr	r3, [r7, #4]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <_close>:

int _close(int file)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fb4:	605a      	str	r2, [r3, #4]
  return 0;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <_isatty>:

int _isatty(int file)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002fcc:	2301      	movs	r3, #1
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b085      	sub	sp, #20
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ffc:	4a14      	ldr	r2, [pc, #80]	@ (8003050 <_sbrk+0x5c>)
 8002ffe:	4b15      	ldr	r3, [pc, #84]	@ (8003054 <_sbrk+0x60>)
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003008:	4b13      	ldr	r3, [pc, #76]	@ (8003058 <_sbrk+0x64>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d102      	bne.n	8003016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003010:	4b11      	ldr	r3, [pc, #68]	@ (8003058 <_sbrk+0x64>)
 8003012:	4a12      	ldr	r2, [pc, #72]	@ (800305c <_sbrk+0x68>)
 8003014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003016:	4b10      	ldr	r3, [pc, #64]	@ (8003058 <_sbrk+0x64>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4413      	add	r3, r2
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	429a      	cmp	r2, r3
 8003022:	d207      	bcs.n	8003034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003024:	f009 ff62 	bl	800ceec <__errno>
 8003028:	4603      	mov	r3, r0
 800302a:	220c      	movs	r2, #12
 800302c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800302e:	f04f 33ff 	mov.w	r3, #4294967295
 8003032:	e009      	b.n	8003048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003034:	4b08      	ldr	r3, [pc, #32]	@ (8003058 <_sbrk+0x64>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800303a:	4b07      	ldr	r3, [pc, #28]	@ (8003058 <_sbrk+0x64>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4413      	add	r3, r2
 8003042:	4a05      	ldr	r2, [pc, #20]	@ (8003058 <_sbrk+0x64>)
 8003044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003046:	68fb      	ldr	r3, [r7, #12]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	20020000 	.word	0x20020000
 8003054:	00000400 	.word	0x00000400
 8003058:	20001a94 	.word	0x20001a94
 800305c:	20001c78 	.word	0x20001c78

08003060 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003064:	4b06      	ldr	r3, [pc, #24]	@ (8003080 <SystemInit+0x20>)
 8003066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800306a:	4a05      	ldr	r2, [pc, #20]	@ (8003080 <SystemInit+0x20>)
 800306c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003070:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003074:	bf00      	nop
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <_ZN8BallDataC1Ev>:
#include "BallData.h"

BallData::BallData() {
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
}
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <_ZN8BallData6updateEffffff>:
void BallData::update(float X_distance, float Y_distance, float X_speed, float Y_speed, float Displacement, float AngleFromYaxis) {
 800309a:	b480      	push	{r7}
 800309c:	b089      	sub	sp, #36	@ 0x24
 800309e:	af00      	add	r7, sp, #0
 80030a0:	61f8      	str	r0, [r7, #28]
 80030a2:	ed87 0a06 	vstr	s0, [r7, #24]
 80030a6:	edc7 0a05 	vstr	s1, [r7, #20]
 80030aa:	ed87 1a04 	vstr	s2, [r7, #16]
 80030ae:	edc7 1a03 	vstr	s3, [r7, #12]
 80030b2:	ed87 2a02 	vstr	s4, [r7, #8]
 80030b6:	edc7 2a01 	vstr	s5, [r7, #4]
	Xdistance = X_distance;
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	601a      	str	r2, [r3, #0]
	Ydistance = Y_distance;
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	605a      	str	r2, [r3, #4]
	Xspeed = X_speed;
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	609a      	str	r2, [r3, #8]
	Yspeed = Y_speed;
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	60da      	str	r2, [r3, #12]
	displacement = Displacement;
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	611a      	str	r2, [r3, #16]
	AngleFrom_Yaxis = AngleFromYaxis;
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	615a      	str	r2, [r3, #20]
}
 80030de:	bf00      	nop
 80030e0:	3724      	adds	r7, #36	@ 0x24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b082      	sub	sp, #8
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	ed87 0a01 	vstr	s0, [r7, #4]
 80030f4:	edc7 0a00 	vstr	s1, [r7]
 80030f8:	edd7 0a00 	vldr	s1, [r7]
 80030fc:	ed97 0a01 	vldr	s0, [r7, #4]
 8003100:	f007 f804 	bl	800a10c <atan2f>
 8003104:	eef0 7a40 	vmov.f32	s15, s0
 8003108:	eeb0 0a67 	vmov.f32	s0, s15
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	ed87 0a01 	vstr	s0, [r7, #4]
 800311c:	ed97 0a01 	vldr	s0, [r7, #4]
 8003120:	f007 f8e8 	bl	800a2f4 <cosf>
 8003124:	eef0 7a40 	vmov.f32	s15, s0
 8003128:	eeb0 0a67 	vmov.f32	s0, s15
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	ed87 0a01 	vstr	s0, [r7, #4]
 800313c:	ed97 0a01 	vldr	s0, [r7, #4]
 8003140:	f007 f924 	bl	800a38c <sinf>
 8003144:	eef0 7a40 	vmov.f32	s15, s0
 8003148:	eeb0 0a67 	vmov.f32	s0, s15
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8003152:	b580      	push	{r7, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	ed87 0a01 	vstr	s0, [r7, #4]
 800315c:	ed97 0a01 	vldr	s0, [r7, #4]
 8003160:	f006 ffd6 	bl	800a110 <sqrtf>
 8003164:	eef0 7a40 	vmov.f32	s15, s0
 8003168:	eeb0 0a67 	vmov.f32	s0, s15
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <_ZSt3tanf>:
  using ::tan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  tan(float __x)
  { return __builtin_tanf(__x); }
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	ed87 0a01 	vstr	s0, [r7, #4]
 800317c:	ed97 0a01 	vldr	s0, [r7, #4]
 8003180:	f007 f94a 	bl	800a418 <tanf>
 8003184:	eef0 7a40 	vmov.f32	s15, s0
 8003188:	eeb0 0a67 	vmov.f32	s0, s15
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <_ZN9BallTrackC1Effffffffffff>:
#include "BallTrack.h"

BallTrack::BallTrack(float Px, float Ix, float Dx, float Py, float Iy, float Dy, float threshold_X, float threshold_Y, float period_X, float period_Y, float YdisFromBall, float Deviation_Distance) :
 8003192:	b580      	push	{r7, lr}
 8003194:	b08e      	sub	sp, #56	@ 0x38
 8003196:	af00      	add	r7, sp, #0
 8003198:	6378      	str	r0, [r7, #52]	@ 0x34
 800319a:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 800319e:	edc7 0a0b 	vstr	s1, [r7, #44]	@ 0x2c
 80031a2:	ed87 1a0a 	vstr	s2, [r7, #40]	@ 0x28
 80031a6:	edc7 1a09 	vstr	s3, [r7, #36]	@ 0x24
 80031aa:	ed87 2a08 	vstr	s4, [r7, #32]
 80031ae:	edc7 2a07 	vstr	s5, [r7, #28]
 80031b2:	ed87 3a06 	vstr	s6, [r7, #24]
 80031b6:	edc7 3a05 	vstr	s7, [r7, #20]
 80031ba:	ed87 4a04 	vstr	s8, [r7, #16]
 80031be:	edc7 4a03 	vstr	s9, [r7, #12]
 80031c2:	ed87 5a02 	vstr	s10, [r7, #8]
 80031c6:	edc7 5a01 	vstr	s11, [r7, #4]
		kpx(Px), kix(Ix), kdx(Dx), kpy(Py), kiy(Iy), kdy(Dy), thresholdX(threshold_X), thresholdY(threshold_Y), periodX(period_X), periodY(period_Y), YdisFrom_Ball(YdisFromBall), DeviationDistance(
 80031ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031e0:	60da      	str	r2, [r3, #12]
 80031e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031e4:	6a3a      	ldr	r2, [r7, #32]
 80031e6:	611a      	str	r2, [r3, #16]
 80031e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	615a      	str	r2, [r3, #20]
 80031ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	619a      	str	r2, [r3, #24]
 80031f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	61da      	str	r2, [r3, #28]
 80031fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	621a      	str	r2, [r3, #32]
 8003200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	625a      	str	r2, [r3, #36]	@ 0x24
 8003206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	629a      	str	r2, [r3, #40]	@ 0x28
 800320c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	62da      	str	r2, [r3, #44]	@ 0x2c
				Deviation_Distance) {
 8003212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	631a      	str	r2, [r3, #48]	@ 0x30
 800321a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	635a      	str	r2, [r3, #52]	@ 0x34
 8003222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	639a      	str	r2, [r3, #56]	@ 0x38
 800322a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800322c:	2200      	movs	r2, #0
 800322e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003232:	3340      	adds	r3, #64	@ 0x40
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fb3d 	bl	80038b4 <_ZN23BallTrack_AngleCheckingC1Ev>
 800323a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800323c:	334c      	adds	r3, #76	@ 0x4c
 800323e:	4618      	mov	r0, r3
 8003240:	f7fd feee 	bl	8001020 <_ZN13PIDControllerC1Ev>
 8003244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003246:	3358      	adds	r3, #88	@ 0x58
 8003248:	4618      	mov	r0, r3
 800324a:	f7fd fee9 	bl	8001020 <_ZN13PIDControllerC1Ev>
 800324e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003250:	3364      	adds	r3, #100	@ 0x64
 8003252:	4618      	mov	r0, r3
 8003254:	f7fd fee4 	bl	8001020 <_ZN13PIDControllerC1Ev>
}
 8003258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800325a:	4618      	mov	r0, r3
 800325c:	3738      	adds	r7, #56	@ 0x38
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <_ZN9BallTrack14CalculateAngleEff>:

float BallTrack::CalculateAngle(float Xspeed, float Yspeed) {
 8003262:	b580      	push	{r7, lr}
 8003264:	b084      	sub	sp, #16
 8003266:	af00      	add	r7, sp, #0
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	ed87 0a02 	vstr	s0, [r7, #8]
 800326e:	edc7 0a01 	vstr	s1, [r7, #4]
	return toDegrees(atan2(Xspeed, Yspeed));
 8003272:	edd7 0a01 	vldr	s1, [r7, #4]
 8003276:	ed97 0a02 	vldr	s0, [r7, #8]
 800327a:	f7ff ff36 	bl	80030ea <_ZSt5atan2ff>
 800327e:	eef0 7a40 	vmov.f32	s15, s0
 8003282:	eeb0 0a67 	vmov.f32	s0, s15
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 f82a 	bl	80032e0 <_ZN9BallTrack9toDegreesEf>
 800328c:	eef0 7a40 	vmov.f32	s15, s0
}
 8003290:	eeb0 0a67 	vmov.f32	s0, s15
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	0000      	movs	r0, r0
 800329c:	0000      	movs	r0, r0
	...

080032a0 <_ZN9BallTrack9toRadiansEf>:

float BallTrack::toRadians(float degrees) {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	ed87 0a00 	vstr	s0, [r7]
	return degrees * (3.1415926 / 180.0);
 80032ac:	6838      	ldr	r0, [r7, #0]
 80032ae:	f7fd f963 	bl	8000578 <__aeabi_f2d>
 80032b2:	a309      	add	r3, pc, #36	@ (adr r3, 80032d8 <_ZN9BallTrack9toRadiansEf+0x38>)
 80032b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b8:	f7fd f9b6 	bl	8000628 <__aeabi_dmul>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4610      	mov	r0, r2
 80032c2:	4619      	mov	r1, r3
 80032c4:	f7fd fc80 	bl	8000bc8 <__aeabi_d2f>
 80032c8:	4603      	mov	r3, r0
 80032ca:	ee07 3a90 	vmov	s15, r3
}
 80032ce:	eeb0 0a67 	vmov.f32	s0, s15
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	9d353918 	.word	0x9d353918
 80032dc:	3f91df46 	.word	0x3f91df46

080032e0 <_ZN9BallTrack9toDegreesEf>:

float BallTrack::toDegrees(float rad) {
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	ed87 0a00 	vstr	s0, [r7]
	return rad * 180.0 / 3.1415926;
 80032ec:	6838      	ldr	r0, [r7, #0]
 80032ee:	f7fd f943 	bl	8000578 <__aeabi_f2d>
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	4b10      	ldr	r3, [pc, #64]	@ (8003338 <_ZN9BallTrack9toDegreesEf+0x58>)
 80032f8:	f7fd f996 	bl	8000628 <__aeabi_dmul>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4610      	mov	r0, r2
 8003302:	4619      	mov	r1, r3
 8003304:	a30a      	add	r3, pc, #40	@ (adr r3, 8003330 <_ZN9BallTrack9toDegreesEf+0x50>)
 8003306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330a:	f7fd fab7 	bl	800087c <__aeabi_ddiv>
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	4610      	mov	r0, r2
 8003314:	4619      	mov	r1, r3
 8003316:	f7fd fc57 	bl	8000bc8 <__aeabi_d2f>
 800331a:	4603      	mov	r3, r0
 800331c:	ee07 3a90 	vmov	s15, r3
}
 8003320:	eeb0 0a67 	vmov.f32	s0, s15
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	f3af 8000 	nop.w
 8003330:	4d12d84a 	.word	0x4d12d84a
 8003334:	400921fb 	.word	0x400921fb
 8003338:	40668000 	.word	0x40668000

0800333c <_ZN9BallTrack19updateTrackingStateEv>:

void BallTrack::updateTrackingState() {
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
	effectiveMovementAngle = movementAngle.effectiveAngleFromYaxis(&AngleCalculationState);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	333c      	adds	r3, #60	@ 0x3c
 800334e:	4619      	mov	r1, r3
 8003350:	4610      	mov	r0, r2
 8003352:	f000 fadf 	bl	8003914 <_ZN23BallTrack_AngleChecking23effectiveAngleFromYaxisEPi>
 8003356:	eef0 7a40 	vmov.f32	s15, s0
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
}
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <_ZN9BallTrack8trackingEv>:

void BallTrack::tracking() {
 8003368:	b580      	push	{r7, lr}
 800336a:	ed2d 8b02 	vpush	{d8}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
	movementAngle.update(YdisFrom_Ball, DeviationDistance);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8003386:	eef0 0a47 	vmov.f32	s1, s14
 800338a:	eeb0 0a67 	vmov.f32	s0, s15
 800338e:	4610      	mov	r0, r2
 8003390:	f000 fa76 	bl	8003880 <_ZN23BallTrack_AngleChecking6updateEff>

	// tuning parameters : YdisFromBall, DeviationDistance, kpx, kdx, periodX, kpy, kdy, periodY

	//if (AngleCalculationState) {
	XspeedControl.update(0, -BallState.Xdistance, thresholdX, kpx, kdx, kix, periodX);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800339a:	4bba      	ldr	r3, [pc, #744]	@ (8003684 <_ZN9BallTrack8trackingEv+0x31c>)
 800339c:	edd3 7a00 	vldr	s15, [r3]
 80033a0:	eeb1 7a67 	vneg.f32	s14, s15
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	edd3 6a06 	vldr	s13, [r3, #24]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	ed93 6a00 	vldr	s12, [r3]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	edd3 5a02 	vldr	s11, [r3, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	ed93 5a01 	vldr	s10, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	edd3 7a08 	vldr	s15, [r3, #32]
 80033c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033c6:	ee17 1a90 	vmov	r1, s15
 80033ca:	eef0 2a45 	vmov.f32	s5, s10
 80033ce:	eeb0 2a65 	vmov.f32	s4, s11
 80033d2:	eef0 1a46 	vmov.f32	s3, s12
 80033d6:	eeb0 1a66 	vmov.f32	s2, s13
 80033da:	eef0 0a47 	vmov.f32	s1, s14
 80033de:	ed9f 0aaa 	vldr	s0, [pc, #680]	@ 8003688 <_ZN9BallTrack8trackingEv+0x320>
 80033e2:	4610      	mov	r0, r2
 80033e4:	f7fd fe32 	bl	800104c <_ZN13PIDController6updateEffffffm>
	YspeedControl.update(0, -BallState.Ydistance, thresholdY, kpy, kdy, kiy, periodY); // - YdisFrom_Ball
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 80033ee:	4ba5      	ldr	r3, [pc, #660]	@ (8003684 <_ZN9BallTrack8trackingEv+0x31c>)
 80033f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80033f4:	eeb1 7a67 	vneg.f32	s14, s15
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	edd3 6a07 	vldr	s13, [r3, #28]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	ed93 6a03 	vldr	s12, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	edd3 5a05 	vldr	s11, [r3, #20]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	ed93 5a04 	vldr	s10, [r3, #16]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800341a:	ee17 1a90 	vmov	r1, s15
 800341e:	eef0 2a45 	vmov.f32	s5, s10
 8003422:	eeb0 2a65 	vmov.f32	s4, s11
 8003426:	eef0 1a46 	vmov.f32	s3, s12
 800342a:	eeb0 1a66 	vmov.f32	s2, s13
 800342e:	eef0 0a47 	vmov.f32	s1, s14
 8003432:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 8003688 <_ZN9BallTrack8trackingEv+0x320>
 8003436:	4610      	mov	r0, r2
 8003438:	f7fd fe08 	bl	800104c <_ZN13PIDController6updateEffffffm>
	ShortRange.update(0, -BallState.AngleFrom_Yaxis, 0, 3.5, 1.3, 0, 10);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3364      	adds	r3, #100	@ 0x64
 8003440:	4a90      	ldr	r2, [pc, #576]	@ (8003684 <_ZN9BallTrack8trackingEv+0x31c>)
 8003442:	edd2 7a05 	vldr	s15, [r2, #20]
 8003446:	eef1 7a67 	vneg.f32	s15, s15
 800344a:	210a      	movs	r1, #10
 800344c:	eddf 2a8e 	vldr	s5, [pc, #568]	@ 8003688 <_ZN9BallTrack8trackingEv+0x320>
 8003450:	ed9f 2a8e 	vldr	s4, [pc, #568]	@ 800368c <_ZN9BallTrack8trackingEv+0x324>
 8003454:	eef0 1a0c 	vmov.f32	s3, #12	@ 0x40600000  3.5
 8003458:	ed9f 1a8b 	vldr	s2, [pc, #556]	@ 8003688 <_ZN9BallTrack8trackingEv+0x320>
 800345c:	eef0 0a67 	vmov.f32	s1, s15
 8003460:	ed9f 0a89 	vldr	s0, [pc, #548]	@ 8003688 <_ZN9BallTrack8trackingEv+0x320>
 8003464:	4618      	mov	r0, r3
 8003466:	f7fd fdf1 	bl	800104c <_ZN13PIDController6updateEffffffm>

	float currentMovementAngle = CalculateAngle(XspeedControl.Adjustment_output, YspeedControl.Adjustment_output);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8003476:	eef0 0a47 	vmov.f32	s1, s14
 800347a:	eeb0 0a67 	vmov.f32	s0, s15
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7ff feef 	bl	8003262 <_ZN9BallTrack14CalculateAngleEff>
 8003484:	ed87 0a07 	vstr	s0, [r7, #28]
	float currentTotalSpeed = sqrt(XspeedControl.Adjustment_output * XspeedControl.Adjustment_output + YspeedControl.Adjustment_output * YspeedControl.Adjustment_output);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8003494:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80034a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ac:	eeb0 0a67 	vmov.f32	s0, s15
 80034b0:	f7ff fe4f 	bl	8003152 <_ZSt4sqrtf>
 80034b4:	ed87 0a06 	vstr	s0, [r7, #24]

	if (!movementAngle.moveAngle_IS_effective(currentMovementAngle, effectiveMovementAngle)) {
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80034c4:	eef0 0a67 	vmov.f32	s1, s15
 80034c8:	ed97 0a07 	vldr	s0, [r7, #28]
 80034cc:	4610      	mov	r0, r2
 80034ce:	f000 faf5 	bl	8003abc <_ZN23BallTrack_AngleChecking22moveAngle_IS_effectiveEff>
 80034d2:	4603      	mov	r3, r0
 80034d4:	f083 0301 	eor.w	r3, r3, #1
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 808b 	beq.w	80035f6 <_ZN9BallTrack8trackingEv+0x28e>
		if (effectiveMovementAngle != 0 || abs(effectiveMovementAngle) != 90 || effectiveMovementAngle != 180 || abs(BallState.Xdistance) >= 9) {
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80034e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80034ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ee:	d129      	bne.n	8003544 <_ZN9BallTrack8trackingEv+0x1dc>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80034f6:	eeb0 0a67 	vmov.f32	s0, s15
 80034fa:	f7fd fd81 	bl	8001000 <_ZSt3absf>
 80034fe:	eef0 7a40 	vmov.f32	s15, s0
 8003502:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8003690 <_ZN9BallTrack8trackingEv+0x328>
 8003506:	eef4 7a47 	vcmp.f32	s15, s14
 800350a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350e:	d119      	bne.n	8003544 <_ZN9BallTrack8trackingEv+0x1dc>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003516:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8003694 <_ZN9BallTrack8trackingEv+0x32c>
 800351a:	eef4 7a47 	vcmp.f32	s15, s14
 800351e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003522:	d10f      	bne.n	8003544 <_ZN9BallTrack8trackingEv+0x1dc>
 8003524:	4b57      	ldr	r3, [pc, #348]	@ (8003684 <_ZN9BallTrack8trackingEv+0x31c>)
 8003526:	edd3 7a00 	vldr	s15, [r3]
 800352a:	eeb0 0a67 	vmov.f32	s0, s15
 800352e:	f7fd fd67 	bl	8001000 <_ZSt3absf>
 8003532:	eef0 7a40 	vmov.f32	s15, s0
 8003536:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 800353a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800353e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003542:	db01      	blt.n	8003548 <_ZN9BallTrack8trackingEv+0x1e0>
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <_ZN9BallTrack8trackingEv+0x1e2>
 8003548:	2300      	movs	r3, #0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d01b      	beq.n	8003586 <_ZN9BallTrack8trackingEv+0x21e>
			outputXspeed = XspeedControl.Adjustment_output;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	635a      	str	r2, [r3, #52]	@ 0x34
			outputYspeed = outputXspeed / tan(toRadians(effectiveMovementAngle));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	ed93 8a0d 	vldr	s16, [r3, #52]	@ 0x34
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003562:	eeb0 0a67 	vmov.f32	s0, s15
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff fe9a 	bl	80032a0 <_ZN9BallTrack9toRadiansEf>
 800356c:	eef0 7a40 	vmov.f32	s15, s0
 8003570:	eeb0 0a67 	vmov.f32	s0, s15
 8003574:	f7ff fdfd 	bl	8003172 <_ZSt3tanf>
 8003578:	eeb0 7a40 	vmov.f32	s14, s0
 800357c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
		}
		if (effectiveMovementAngle == 0 || effectiveMovementAngle == 180) {
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800358c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003594:	d009      	beq.n	80035aa <_ZN9BallTrack8trackingEv+0x242>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800359c:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8003694 <_ZN9BallTrack8trackingEv+0x32c>
 80035a0:	eef4 7a47 	vcmp.f32	s15, s14
 80035a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a8:	d107      	bne.n	80035ba <_ZN9BallTrack8trackingEv+0x252>
			outputXspeed = 0;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	635a      	str	r2, [r3, #52]	@ 0x34
			outputYspeed = YspeedControl.Adjustment_output;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	639a      	str	r2, [r3, #56]	@ 0x38
		}
		if (abs(effectiveMovementAngle) == 90) {
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80035c0:	eeb0 0a67 	vmov.f32	s0, s15
 80035c4:	f7fd fd1c 	bl	8001000 <_ZSt3absf>
 80035c8:	eef0 7a40 	vmov.f32	s15, s0
 80035cc:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8003690 <_ZN9BallTrack8trackingEv+0x328>
 80035d0:	eef4 7a47 	vcmp.f32	s15, s14
 80035d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d8:	bf0c      	ite	eq
 80035da:	2301      	moveq	r3, #1
 80035dc:	2300      	movne	r3, #0
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d010      	beq.n	8003606 <_ZN9BallTrack8trackingEv+0x29e>
			outputXspeed = XspeedControl.Adjustment_output;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	635a      	str	r2, [r3, #52]	@ 0x34
			outputYspeed = 0;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80035f4:	e007      	b.n	8003606 <_ZN9BallTrack8trackingEv+0x29e>
		}
	} else {
		outputXspeed = XspeedControl.Adjustment_output;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	635a      	str	r2, [r3, #52]	@ 0x34
		outputYspeed = YspeedControl.Adjustment_output;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	if (BallState.displacement >= 15) {
 8003606:	4b1f      	ldr	r3, [pc, #124]	@ (8003684 <_ZN9BallTrack8trackingEv+0x31c>)
 8003608:	edd3 7a04 	vldr	s15, [r3, #16]
 800360c:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8003610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003618:	db0f      	blt.n	800363a <_ZN9BallTrack8trackingEv+0x2d2>
		Robotmovement.move(outputXspeed, outputYspeed, 0);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8003626:	ed9f 1a18 	vldr	s2, [pc, #96]	@ 8003688 <_ZN9BallTrack8trackingEv+0x320>
 800362a:	eef0 0a47 	vmov.f32	s1, s14
 800362e:	eeb0 0a67 	vmov.f32	s0, s15
 8003632:	4819      	ldr	r0, [pc, #100]	@ (8003698 <_ZN9BallTrack8trackingEv+0x330>)
 8003634:	f001 f81a 	bl	800466c <_ZN14movementSystem4moveEfff>
		//YdisFrom_Ball = 9;

		Robotmovement.move(Xspeed_lift, Yspeed_lift, 0);
	}
	//Robotmovement.move(outputXspeed, outputYspeed, 0);
}
 8003638:	e069      	b.n	800370e <_ZN9BallTrack8trackingEv+0x3a6>
		float VectorSpeed_lift = 197;
 800363a:	4b18      	ldr	r3, [pc, #96]	@ (800369c <_ZN9BallTrack8trackingEv+0x334>)
 800363c:	617b      	str	r3, [r7, #20]
		float Xspeed_lift = abs(VectorSpeed_lift * sin(toRadians(currentMovementAngle))) * (outputXspeed < 0 ? -1 : 1);
 800363e:	ed97 0a07 	vldr	s0, [r7, #28]
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7ff fe2c 	bl	80032a0 <_ZN9BallTrack9toRadiansEf>
 8003648:	eef0 7a40 	vmov.f32	s15, s0
 800364c:	eeb0 0a67 	vmov.f32	s0, s15
 8003650:	f7ff fd6f 	bl	8003132 <_ZSt3sinf>
 8003654:	eeb0 7a40 	vmov.f32	s14, s0
 8003658:	edd7 7a05 	vldr	s15, [r7, #20]
 800365c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003660:	eeb0 0a67 	vmov.f32	s0, s15
 8003664:	f7fd fccc 	bl	8001000 <_ZSt3absf>
 8003668:	eeb0 7a40 	vmov.f32	s14, s0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003672:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367a:	d511      	bpl.n	80036a0 <_ZN9BallTrack8trackingEv+0x338>
 800367c:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8003680:	e010      	b.n	80036a4 <_ZN9BallTrack8trackingEv+0x33c>
 8003682:	bf00      	nop
 8003684:	200002ec 	.word	0x200002ec
 8003688:	00000000 	.word	0x00000000
 800368c:	3fa66666 	.word	0x3fa66666
 8003690:	42b40000 	.word	0x42b40000
 8003694:	43340000 	.word	0x43340000
 8003698:	20001484 	.word	0x20001484
 800369c:	43450000 	.word	0x43450000
 80036a0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80036a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036a8:	edc7 7a04 	vstr	s15, [r7, #16]
		float Yspeed_lift = abs(VectorSpeed_lift * cos(toRadians(currentMovementAngle))) * (BallState.Ydistance < 0 ? -1 : 1);
 80036ac:	ed97 0a07 	vldr	s0, [r7, #28]
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff fdf5 	bl	80032a0 <_ZN9BallTrack9toRadiansEf>
 80036b6:	eef0 7a40 	vmov.f32	s15, s0
 80036ba:	eeb0 0a67 	vmov.f32	s0, s15
 80036be:	f7ff fd28 	bl	8003112 <_ZSt3cosf>
 80036c2:	eeb0 7a40 	vmov.f32	s14, s0
 80036c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80036ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ce:	eeb0 0a67 	vmov.f32	s0, s15
 80036d2:	f7fd fc95 	bl	8001000 <_ZSt3absf>
 80036d6:	eeb0 7a40 	vmov.f32	s14, s0
 80036da:	4b10      	ldr	r3, [pc, #64]	@ (800371c <_ZN9BallTrack8trackingEv+0x3b4>)
 80036dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80036e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e8:	d502      	bpl.n	80036f0 <_ZN9BallTrack8trackingEv+0x388>
 80036ea:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80036ee:	e001      	b.n	80036f4 <_ZN9BallTrack8trackingEv+0x38c>
 80036f0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80036f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036f8:	edc7 7a03 	vstr	s15, [r7, #12]
		Robotmovement.move(Xspeed_lift, Yspeed_lift, 0);
 80036fc:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 8003720 <_ZN9BallTrack8trackingEv+0x3b8>
 8003700:	edd7 0a03 	vldr	s1, [r7, #12]
 8003704:	ed97 0a04 	vldr	s0, [r7, #16]
 8003708:	4806      	ldr	r0, [pc, #24]	@ (8003724 <_ZN9BallTrack8trackingEv+0x3bc>)
 800370a:	f000 ffaf 	bl	800466c <_ZN14movementSystem4moveEfff>
}
 800370e:	bf00      	nop
 8003710:	3720      	adds	r7, #32
 8003712:	46bd      	mov	sp, r7
 8003714:	ecbd 8b02 	vpop	{d8}
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	200002ec 	.word	0x200002ec
 8003720:	00000000 	.word	0x00000000
 8003724:	20001484 	.word	0x20001484

08003728 <_ZSt4asinf>:
  { return __builtin_asinf(__x); }
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003732:	ed97 0a01 	vldr	s0, [r7, #4]
 8003736:	f006 fcbd 	bl	800a0b4 <asinf>
 800373a:	eef0 7a40 	vmov.f32	s15, s0
 800373e:	eeb0 0a67 	vmov.f32	s0, s15
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <_ZN23BallTrack_AngleChecking9toDegreesEf>:

float BallTrack_AngleChecking::toRadians(float degrees) {
	return degrees * M_PI / 180.0;
}

float BallTrack_AngleChecking::toDegrees(float rad) {
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	ed87 0a00 	vstr	s0, [r7]
	return rad * 180.0 / M_PI;
 8003754:	6838      	ldr	r0, [r7, #0]
 8003756:	f7fc ff0f 	bl	8000578 <__aeabi_f2d>
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	4b10      	ldr	r3, [pc, #64]	@ (80037a0 <_ZN23BallTrack_AngleChecking9toDegreesEf+0x58>)
 8003760:	f7fc ff62 	bl	8000628 <__aeabi_dmul>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	4610      	mov	r0, r2
 800376a:	4619      	mov	r1, r3
 800376c:	a30a      	add	r3, pc, #40	@ (adr r3, 8003798 <_ZN23BallTrack_AngleChecking9toDegreesEf+0x50>)
 800376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003772:	f7fd f883 	bl	800087c <__aeabi_ddiv>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4610      	mov	r0, r2
 800377c:	4619      	mov	r1, r3
 800377e:	f7fd fa23 	bl	8000bc8 <__aeabi_d2f>
 8003782:	4603      	mov	r3, r0
 8003784:	ee07 3a90 	vmov	s15, r3
}
 8003788:	eeb0 0a67 	vmov.f32	s0, s15
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	f3af 8000 	nop.w
 8003798:	54442d18 	.word	0x54442d18
 800379c:	400921fb 	.word	0x400921fb
 80037a0:	40668000 	.word	0x40668000

080037a4 <_ZN23BallTrack_AngleChecking16normalizeDegreesEf>:

float BallTrack_AngleChecking::normalizeDegrees(float degrees) {
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	ed87 0a00 	vstr	s0, [r7]
	int n = (int) (degrees / 360.0f);  // number of full rotations
 80037b0:	ed97 7a00 	vldr	s14, [r7]
 80037b4:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8003838 <_ZN23BallTrack_AngleChecking16normalizeDegreesEf+0x94>
 80037b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037c0:	ee17 3a90 	vmov	r3, s15
 80037c4:	60bb      	str	r3, [r7, #8]
	float normalized = degrees - n * 360.0f;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	ee07 3a90 	vmov	s15, r3
 80037cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037d0:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003838 <_ZN23BallTrack_AngleChecking16normalizeDegreesEf+0x94>
 80037d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037d8:	ed97 7a00 	vldr	s14, [r7]
 80037dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037e0:	edc7 7a03 	vstr	s15, [r7, #12]

	// Adjust if result is negative
	if (normalized < 0.0f) {
 80037e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80037e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f0:	d507      	bpl.n	8003802 <_ZN23BallTrack_AngleChecking16normalizeDegreesEf+0x5e>
		normalized += 360.0f;
 80037f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80037f6:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8003838 <_ZN23BallTrack_AngleChecking16normalizeDegreesEf+0x94>
 80037fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037fe:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	// Step 2: Convert to range (-180, 180]
	if (normalized > 180.0f) {
 8003802:	edd7 7a03 	vldr	s15, [r7, #12]
 8003806:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800383c <_ZN23BallTrack_AngleChecking16normalizeDegreesEf+0x98>
 800380a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800380e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003812:	dd07      	ble.n	8003824 <_ZN23BallTrack_AngleChecking16normalizeDegreesEf+0x80>
		normalized -= 360.0f;
 8003814:	edd7 7a03 	vldr	s15, [r7, #12]
 8003818:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003838 <_ZN23BallTrack_AngleChecking16normalizeDegreesEf+0x94>
 800381c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003820:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	return normalized;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	ee07 3a90 	vmov	s15, r3
}
 800382a:	eeb0 0a67 	vmov.f32	s0, s15
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	43b40000 	.word	0x43b40000
 800383c:	43340000 	.word	0x43340000

08003840 <_ZN23BallTrack_AngleChecking4signEf>:

int BallTrack_AngleChecking::sign(float x) {
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	ed87 0a00 	vstr	s0, [r7]
	if (x > 0) {
 800384c:	edd7 7a00 	vldr	s15, [r7]
 8003850:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003858:	dd01      	ble.n	800385e <_ZN23BallTrack_AngleChecking4signEf+0x1e>
		return 1;
 800385a:	2301      	movs	r3, #1
 800385c:	e00a      	b.n	8003874 <_ZN23BallTrack_AngleChecking4signEf+0x34>
	}
	if (x < 0) {
 800385e:	edd7 7a00 	vldr	s15, [r7]
 8003862:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800386a:	d502      	bpl.n	8003872 <_ZN23BallTrack_AngleChecking4signEf+0x32>
		return -1;
 800386c:	f04f 33ff 	mov.w	r3, #4294967295
 8003870:	e000      	b.n	8003874 <_ZN23BallTrack_AngleChecking4signEf+0x34>
	}
	return 0;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <_ZN23BallTrack_AngleChecking6updateEff>:

void BallTrack_AngleChecking::update(float TargetYdisFromBall, float Deviation_Distance) {
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	ed87 0a02 	vstr	s0, [r7, #8]
 800388c:	edc7 0a01 	vstr	s1, [r7, #4]
	targetYdisFromBall = TargetYdisFromBall;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	601a      	str	r2, [r3, #0]
	DeviationDistance = Deviation_Distance;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	605a      	str	r2, [r3, #4]
	robotRadius = KinematicState.robotRadius;
 800389c:	4b04      	ldr	r3, [pc, #16]	@ (80038b0 <_ZN23BallTrack_AngleChecking6updateEff+0x30>)
 800389e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	609a      	str	r2, [r3, #8]
}
 80038a4:	bf00      	nop
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	20000200 	.word	0x20000200

080038b4 <_ZN23BallTrack_AngleCheckingC1Ev>:

BallTrack_AngleChecking::BallTrack_AngleChecking() {
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	605a      	str	r2, [r3, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	609a      	str	r2, [r3, #8]
}
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4618      	mov	r0, r3
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <_ZSt4asinIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    asin(_Tp __x)
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b082      	sub	sp, #8
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
    { return __builtin_asin(__x); }
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fc fe32 	bl	8000554 <__aeabi_i2d>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	ec43 2b10 	vmov	d0, r2, r3
 80038f8:	f006 fb72 	bl	8009fe0 <asin>
 80038fc:	eeb0 7a40 	vmov.f32	s14, s0
 8003900:	eef0 7a60 	vmov.f32	s15, s1
 8003904:	eeb0 0a47 	vmov.f32	s0, s14
 8003908:	eef0 0a67 	vmov.f32	s1, s15
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <_ZN23BallTrack_AngleChecking23effectiveAngleFromYaxisEPi>:

float BallTrack_AngleChecking::effectiveAngleFromYaxis(int *CalculationState) {
 8003914:	b580      	push	{r7, lr}
 8003916:	ed2d 8b02 	vpush	{d8}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
	if (BallState.Ydistance > targetYdisFromBall) {
 8003922:	4b65      	ldr	r3, [pc, #404]	@ (8003ab8 <_ZN23BallTrack_AngleChecking23effectiveAngleFromYaxisEPi+0x1a4>)
 8003924:	ed93 7a01 	vldr	s14, [r3, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	edd3 7a00 	vldr	s15, [r3]
 800392e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003936:	dd1b      	ble.n	8003970 <_ZN23BallTrack_AngleChecking23effectiveAngleFromYaxisEPi+0x5c>
		float effectiveAngle = toDegrees(atan2(BallState.Xdistance, BallState.Ydistance - targetYdisFromBall));
 8003938:	4b5f      	ldr	r3, [pc, #380]	@ (8003ab8 <_ZN23BallTrack_AngleChecking23effectiveAngleFromYaxisEPi+0x1a4>)
 800393a:	edd3 6a00 	vldr	s13, [r3]
 800393e:	4b5e      	ldr	r3, [pc, #376]	@ (8003ab8 <_ZN23BallTrack_AngleChecking23effectiveAngleFromYaxisEPi+0x1a4>)
 8003940:	ed93 7a01 	vldr	s14, [r3, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	edd3 7a00 	vldr	s15, [r3]
 800394a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800394e:	eef0 0a67 	vmov.f32	s1, s15
 8003952:	eeb0 0a66 	vmov.f32	s0, s13
 8003956:	f7ff fbc8 	bl	80030ea <_ZSt5atan2ff>
 800395a:	eef0 7a40 	vmov.f32	s15, s0
 800395e:	eeb0 0a67 	vmov.f32	s0, s15
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7ff fef0 	bl	8003748 <_ZN23BallTrack_AngleChecking9toDegreesEf>
 8003968:	ed87 0a02 	vstr	s0, [r7, #8]
		return effectiveAngle;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	e09a      	b.n	8003aa6 <_ZN23BallTrack_AngleChecking23effectiveAngleFromYaxisEPi+0x192>
	}
	bool checkState1 = ((DeviationDistance < BallState.displacement) || (DeviationDistance == BallState.displacement));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	ed93 7a01 	vldr	s14, [r3, #4]
 8003976:	4b50      	ldr	r3, [pc, #320]	@ (8003ab8 <_ZN23BallTrack_AngleChecking23effectiveAngleFromYaxisEPi+0x1a4>)
 8003978:	edd3 7a04 	vldr	s15, [r3, #16]
 800397c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003984:	d40a      	bmi.n	800399c <_ZN23BallTrack_AngleChecking23effectiveAngleFromYaxisEPi+0x88>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	ed93 7a01 	vldr	s14, [r3, #4]
 800398c:	4b4a      	ldr	r3, [pc, #296]	@ (8003ab8 <_ZN23BallTrack_AngleChecking23effectiveAngleFromYaxisEPi+0x1a4>)
 800398e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003992:	eeb4 7a67 	vcmp.f32	s14, s15
 8003996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800399a:	d101      	bne.n	80039a0 <_ZN23BallTrack_AngleChecking23effectiveAngleFromYaxisEPi+0x8c>
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <_ZN23BallTrack_AngleChecking23effectiveAngleFromYaxisEPi+0x8e>
 80039a0:	2300      	movs	r3, #0
 80039a2:	75fb      	strb	r3, [r7, #23]
	bool checkState2 = ((DeviationDistance > -BallState.displacement) || (DeviationDistance == -BallState.displacement));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80039aa:	4b43      	ldr	r3, [pc, #268]	@ (8003ab8 <_ZN23BallTrack_AngleChecking23effectiveAngleFromYaxisEPi+0x1a4>)
 80039ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80039b0:	eef1 7a67 	vneg.f32	s15, s15
 80039b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039bc:	dc0c      	bgt.n	80039d8 <_ZN23BallTrack_AngleChecking23effectiveAngleFromYaxisEPi+0xc4>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80039c4:	4b3c      	ldr	r3, [pc, #240]	@ (8003ab8 <_ZN23BallTrack_AngleChecking23effectiveAngleFromYaxisEPi+0x1a4>)
 80039c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80039ca:	eef1 7a67 	vneg.f32	s15, s15
 80039ce:	eeb4 7a67 	vcmp.f32	s14, s15
 80039d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d6:	d101      	bne.n	80039dc <_ZN23BallTrack_AngleChecking23effectiveAngleFromYaxisEPi+0xc8>
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <_ZN23BallTrack_AngleChecking23effectiveAngleFromYaxisEPi+0xca>
 80039dc:	2300      	movs	r3, #0
 80039de:	75bb      	strb	r3, [r7, #22]

	if (checkState1 && checkState2) {
 80039e0:	7dfb      	ldrb	r3, [r7, #23]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d033      	beq.n	8003a4e <_ZN23BallTrack_AngleChecking23effectiveAngleFromYaxisEPi+0x13a>
 80039e6:	7dbb      	ldrb	r3, [r7, #22]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d030      	beq.n	8003a4e <_ZN23BallTrack_AngleChecking23effectiveAngleFromYaxisEPi+0x13a>
		float effectiveAngle = normalizeDegrees(BallState.AngleFrom_Yaxis + sign(BallState.AngleFrom_Yaxis) * toDegrees(asin(DeviationDistance / BallState.displacement)));
 80039ec:	4b32      	ldr	r3, [pc, #200]	@ (8003ab8 <_ZN23BallTrack_AngleChecking23effectiveAngleFromYaxisEPi+0x1a4>)
 80039ee:	ed93 8a05 	vldr	s16, [r3, #20]
 80039f2:	4b31      	ldr	r3, [pc, #196]	@ (8003ab8 <_ZN23BallTrack_AngleChecking23effectiveAngleFromYaxisEPi+0x1a4>)
 80039f4:	edd3 7a05 	vldr	s15, [r3, #20]
 80039f8:	eeb0 0a67 	vmov.f32	s0, s15
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff ff1f 	bl	8003840 <_ZN23BallTrack_AngleChecking4signEf>
 8003a02:	ee07 0a90 	vmov	s15, r0
 8003a06:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a10:	4b29      	ldr	r3, [pc, #164]	@ (8003ab8 <_ZN23BallTrack_AngleChecking23effectiveAngleFromYaxisEPi+0x1a4>)
 8003a12:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a16:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a1a:	eeb0 0a66 	vmov.f32	s0, s13
 8003a1e:	f7ff fe83 	bl	8003728 <_ZSt4asinf>
 8003a22:	eef0 7a40 	vmov.f32	s15, s0
 8003a26:	eeb0 0a67 	vmov.f32	s0, s15
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7ff fe8c 	bl	8003748 <_ZN23BallTrack_AngleChecking9toDegreesEf>
 8003a30:	eef0 7a40 	vmov.f32	s15, s0
 8003a34:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003a38:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff feaf 	bl	80037a4 <_ZN23BallTrack_AngleChecking16normalizeDegreesEf>
 8003a46:	ed87 0a04 	vstr	s0, [r7, #16]
		return effectiveAngle;
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	e02b      	b.n	8003aa6 <_ZN23BallTrack_AngleChecking23effectiveAngleFromYaxisEPi+0x192>
	}

	float effectiveAngle = normalizeDegrees(BallState.AngleFrom_Yaxis + sign(BallState.AngleFrom_Yaxis) * toDegrees(asin(1)));
 8003a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ab8 <_ZN23BallTrack_AngleChecking23effectiveAngleFromYaxisEPi+0x1a4>)
 8003a50:	ed93 8a05 	vldr	s16, [r3, #20]
 8003a54:	4b18      	ldr	r3, [pc, #96]	@ (8003ab8 <_ZN23BallTrack_AngleChecking23effectiveAngleFromYaxisEPi+0x1a4>)
 8003a56:	edd3 7a05 	vldr	s15, [r3, #20]
 8003a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff feee 	bl	8003840 <_ZN23BallTrack_AngleChecking4signEf>
 8003a64:	ee07 0a90 	vmov	s15, r0
 8003a68:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	f7ff ff38 	bl	80038e2 <_ZSt4asinIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8003a72:	ec53 2b10 	vmov	r2, r3, d0
 8003a76:	4610      	mov	r0, r2
 8003a78:	4619      	mov	r1, r3
 8003a7a:	f7fd f8a5 	bl	8000bc8 <__aeabi_d2f>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	ee00 3a10 	vmov	s0, r3
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7ff fe5f 	bl	8003748 <_ZN23BallTrack_AngleChecking9toDegreesEf>
 8003a8a:	eef0 7a40 	vmov.f32	s15, s0
 8003a8e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003a92:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003a96:	eeb0 0a67 	vmov.f32	s0, s15
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff fe82 	bl	80037a4 <_ZN23BallTrack_AngleChecking16normalizeDegreesEf>
 8003aa0:	ed87 0a03 	vstr	s0, [r7, #12]
	return effectiveAngle;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
	 float ratio = 1;
	 float effectiveAngle = normalizeDegrees(BallState.AngleFrom_Yaxis + sign(BallState.AngleFrom_Yaxis) * toDegrees(asin(ratio)));
	 return effectiveAngle;
	 }
	 */
}
 8003aa6:	ee07 3a90 	vmov	s15, r3
 8003aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	ecbd 8b02 	vpop	{d8}
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	200002ec 	.word	0x200002ec

08003abc <_ZN23BallTrack_AngleChecking22moveAngle_IS_effectiveEff>:

bool BallTrack_AngleChecking::moveAngle_IS_effective(float MoveAngle, float effectiveAngle) {
 8003abc:	b590      	push	{r4, r7, lr}
 8003abe:	ed2d 8b02 	vpush	{d8}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	ed87 0a02 	vstr	s0, [r7, #8]
 8003acc:	edc7 0a01 	vstr	s1, [r7, #4]
	if (sign(MoveAngle) != sign(effectiveAngle)) {
 8003ad0:	ed97 0a02 	vldr	s0, [r7, #8]
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f7ff feb3 	bl	8003840 <_ZN23BallTrack_AngleChecking4signEf>
 8003ada:	4604      	mov	r4, r0
 8003adc:	ed97 0a01 	vldr	s0, [r7, #4]
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f7ff fead 	bl	8003840 <_ZN23BallTrack_AngleChecking4signEf>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	429c      	cmp	r4, r3
 8003aea:	bf14      	ite	ne
 8003aec:	2301      	movne	r3, #1
 8003aee:	2300      	moveq	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <_ZN23BallTrack_AngleChecking22moveAngle_IS_effectiveEff+0x3e>
		return false;
 8003af6:	2300      	movs	r3, #0
 8003af8:	e013      	b.n	8003b22 <_ZN23BallTrack_AngleChecking22moveAngle_IS_effectiveEff+0x66>
	}

	return abs(MoveAngle) >= abs(effectiveAngle);
 8003afa:	ed97 0a02 	vldr	s0, [r7, #8]
 8003afe:	f7fd fa7f 	bl	8001000 <_ZSt3absf>
 8003b02:	eeb0 8a40 	vmov.f32	s16, s0
 8003b06:	ed97 0a01 	vldr	s0, [r7, #4]
 8003b0a:	f7fd fa79 	bl	8001000 <_ZSt3absf>
 8003b0e:	eef0 7a40 	vmov.f32	s15, s0
 8003b12:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b1a:	bfac      	ite	ge
 8003b1c:	2301      	movge	r3, #1
 8003b1e:	2300      	movlt	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	ecbd 8b02 	vpop	{d8}
 8003b2c:	bd90      	pop	{r4, r7, pc}
	...

08003b30 <_ZN27InverseKinematicCalculationC1Ev>:
#include "InverseKinematicCalculation.h"

InverseKinematicCalculation::InverseKinematicCalculation() {
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a28      	ldr	r2, [pc, #160]	@ (8003bdc <_ZN27InverseKinematicCalculationC1Ev+0xac>)
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	605a      	str	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	609a      	str	r2, [r3, #8]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	60da      	str	r2, [r3, #12]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	611a      	str	r2, [r3, #16]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	615a      	str	r2, [r3, #20]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	619a      	str	r2, [r3, #24]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	771a      	strb	r2, [r3, #28]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	621a      	str	r2, [r3, #32]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f04f 0200 	mov.w	r2, #0
 8003b82:	625a      	str	r2, [r3, #36]	@ 0x24
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f04f 0200 	mov.w	r2, #0
 8003ba2:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	639a      	str	r2, [r3, #56]	@ 0x38
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f04f 0200 	mov.w	r2, #0
 8003bb2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	641a      	str	r2, [r3, #64]	@ 0x40
	RobotRadius = KinematicState.robotRadius;
 8003bbc:	4b08      	ldr	r3, [pc, #32]	@ (8003be0 <_ZN27InverseKinematicCalculationC1Ev+0xb0>)
 8003bbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	621a      	str	r2, [r3, #32]
	MaxSpeed = KinematicState.maxSpeed;
 8003bc4:	4b06      	ldr	r3, [pc, #24]	@ (8003be0 <_ZN27InverseKinematicCalculationC1Ev+0xb0>)
 8003bc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	3f3504f3 	.word	0x3f3504f3
 8003be0:	20000200 	.word	0x20000200

08003be4 <_ZN27InverseKinematicCalculation19CalculateWheelSpeedEfff>:
	}

	Apply_wheelDirection();
}

void InverseKinematicCalculation::CalculateWheelSpeed(float Xspeed, float Yspeed, float Angular_Velocity) {
 8003be4:	b480      	push	{r7}
 8003be6:	b089      	sub	sp, #36	@ 0x24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	ed87 0a02 	vstr	s0, [r7, #8]
 8003bf0:	edc7 0a01 	vstr	s1, [r7, #4]
 8003bf4:	ed87 1a00 	vstr	s2, [r7]

	const float cos45 = sqrt(2) / 2.0f;
 8003bf8:	4b45      	ldr	r3, [pc, #276]	@ (8003d10 <_ZN27InverseKinematicCalculation19CalculateWheelSpeedEfff+0x12c>)
 8003bfa:	61fb      	str	r3, [r7, #28]
	const float Deg_Rad_Ratio = 57.2957795131;
 8003bfc:	4b45      	ldr	r3, [pc, #276]	@ (8003d14 <_ZN27InverseKinematicCalculation19CalculateWheelSpeedEfff+0x130>)
 8003bfe:	61bb      	str	r3, [r7, #24]
	float AngularVelocity_Rad = Angular_Velocity / Deg_Rad_Ratio;
 8003c00:	ed97 7a00 	vldr	s14, [r7]
 8003c04:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8003d18 <_ZN27InverseKinematicCalculation19CalculateWheelSpeedEfff+0x134>
 8003c08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c0c:	edc7 7a05 	vstr	s15, [r7, #20]
	float Rotational_LinearSpeed = AngularVelocity_Rad * 90; // RobotRadius = 90;
 8003c10:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c14:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8003d1c <_ZN27InverseKinematicCalculation19CalculateWheelSpeedEfff+0x138>
 8003c18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c1c:	edc7 7a04 	vstr	s15, [r7, #16]

	TL = ((cos45 * Yspeed) + (cos45 * Xspeed)) + Rotational_LinearSpeed;
 8003c20:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c24:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8003d20 <_ZN27InverseKinematicCalculation19CalculateWheelSpeedEfff+0x13c>
 8003c28:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c30:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8003d20 <_ZN27InverseKinematicCalculation19CalculateWheelSpeedEfff+0x13c>
 8003c34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	TR = ((cos45 * Yspeed) - (cos45 * Xspeed)) - Rotational_LinearSpeed;
 8003c4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c4e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8003d20 <_ZN27InverseKinematicCalculation19CalculateWheelSpeedEfff+0x13c>
 8003c52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c56:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c5a:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8003d20 <_ZN27InverseKinematicCalculation19CalculateWheelSpeedEfff+0x13c>
 8003c5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c66:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	DR = ((cos45 * Yspeed) + (cos45 * Xspeed)) - Rotational_LinearSpeed;
 8003c74:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c78:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8003d20 <_ZN27InverseKinematicCalculation19CalculateWheelSpeedEfff+0x13c>
 8003c7c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c80:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c84:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003d20 <_ZN27InverseKinematicCalculation19CalculateWheelSpeedEfff+0x13c>
 8003c88:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c90:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	DL = ((cos45 * Yspeed) - (cos45 * Xspeed)) + Rotational_LinearSpeed;
 8003c9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ca2:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8003d20 <_ZN27InverseKinematicCalculation19CalculateWheelSpeedEfff+0x13c>
 8003ca6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003caa:	edd7 7a02 	vldr	s15, [r7, #8]
 8003cae:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8003d20 <_ZN27InverseKinematicCalculation19CalculateWheelSpeedEfff+0x13c>
 8003cb2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003cb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cba:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	if (Xspeed == 0 && Yspeed == 0) {
 8003cc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ccc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd4:	d116      	bne.n	8003d04 <_ZN27InverseKinematicCalculation19CalculateWheelSpeedEfff+0x120>
 8003cd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cda:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce2:	d10f      	bne.n	8003d04 <_ZN27InverseKinematicCalculation19CalculateWheelSpeedEfff+0x120>
		TL = 0;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	631a      	str	r2, [r3, #48]	@ 0x30
		TR = 0;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	62da      	str	r2, [r3, #44]	@ 0x2c
		DR = 0;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	635a      	str	r2, [r3, #52]	@ 0x34
		DL = 0;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	639a      	str	r2, [r3, #56]	@ 0x38
	}

}
 8003d04:	bf00      	nop
 8003d06:	3724      	adds	r7, #36	@ 0x24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	3f3504f3 	.word	0x3f3504f3
 8003d14:	42652ee1 	.word	0x42652ee1
 8003d18:	42652ee1 	.word	0x42652ee1
 8003d1c:	42b40000 	.word	0x42b40000
 8003d20:	3f3504f3 	.word	0x3f3504f3

08003d24 <_ZSt4atanf>:
  { return __builtin_atanf(__x); }
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	ed87 0a01 	vstr	s0, [r7, #4]
 8003d2e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003d32:	f006 fa0b 	bl	800a14c <atanf>
 8003d36:	eef0 7a40 	vmov.f32	s15, s0
 8003d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <_ZN13KinematicDataC1Ev>:
#include "KinematicData.h"

KinematicData::KinematicData() {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	332c      	adds	r3, #44	@ 0x2c
 8003d50:	4618      	mov	r0, r3
 8003d52:	f007 ff64 	bl	800bc1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	3344      	adds	r3, #68	@ 0x44
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f007 ff5f 	bl	800bc1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	335c      	adds	r3, #92	@ 0x5c
 8003d64:	4618      	mov	r0, r3
 8003d66:	f007 ff5a 	bl	800bc1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3374      	adds	r3, #116	@ 0x74
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f007 ff55 	bl	800bc1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	338c      	adds	r3, #140	@ 0x8c
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f007 ff50 	bl	800bc1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	33a4      	adds	r3, #164	@ 0xa4
 8003d82:	4618      	mov	r0, r3
 8003d84:	f007 ff4b 	bl	800bc1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	33bc      	adds	r3, #188	@ 0xbc
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f007 ff46 	bl	800bc1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	33d4      	adds	r3, #212	@ 0xd4
 8003d96:	4618      	mov	r0, r3
 8003d98:	f007 ff41 	bl	800bc1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
}
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <_ZN13KinematicData6updateEfffffffNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_S5_S5_S5_S5_S5_S5_ff>:
void KinematicData::update(float Xencode, float Yencode, float Angular_Velocity, float TR, float TL, float DR, float DL, std::string TL_in1, std::string TL_in2, std::string TR_in1, std::string TR_in2,
		std::string DL_in1, std::string DL_in2, std::string DR_in1, std::string DR_in2, float robot_Radius, float maxspeed_) {
 8003da8:	b5b0      	push	{r4, r5, r7, lr}
 8003daa:	b08e      	sub	sp, #56	@ 0x38
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6378      	str	r0, [r7, #52]	@ 0x34
 8003db0:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 8003db4:	edc7 0a0b 	vstr	s1, [r7, #44]	@ 0x2c
 8003db8:	ed87 1a0a 	vstr	s2, [r7, #40]	@ 0x28
 8003dbc:	edc7 1a09 	vstr	s3, [r7, #36]	@ 0x24
 8003dc0:	ed87 2a08 	vstr	s4, [r7, #32]
 8003dc4:	edc7 2a07 	vstr	s5, [r7, #28]
 8003dc8:	ed87 3a06 	vstr	s6, [r7, #24]
 8003dcc:	6179      	str	r1, [r7, #20]
 8003dce:	613a      	str	r2, [r7, #16]
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	edc7 3a02 	vstr	s7, [r7, #8]
 8003dd6:	ed87 4a01 	vstr	s8, [r7, #4]
	Xspeed = Xencode;
 8003dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ddc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dde:	601a      	str	r2, [r3, #0]
	AngularVelocity = Angular_Velocity;
 8003de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003de4:	609a      	str	r2, [r3, #8]
	TRmotor_spd = TR;
 8003de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dea:	611a      	str	r2, [r3, #16]
	TLmotor_spd = TL;
 8003dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dee:	6a3a      	ldr	r2, [r7, #32]
 8003df0:	60da      	str	r2, [r3, #12]
	DRmotor_spd = DR;
 8003df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003df4:	69fa      	ldr	r2, [r7, #28]
 8003df6:	619a      	str	r2, [r3, #24]
	DLmotor_spd = DL;
 8003df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	615a      	str	r2, [r3, #20]
	TRin1 = TR_in1;
 8003dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e00:	335c      	adds	r3, #92	@ 0x5c
 8003e02:	68f9      	ldr	r1, [r7, #12]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f007 ff47 	bl	800bc98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	TRin2 = TR_in2;
 8003e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e0c:	3374      	adds	r3, #116	@ 0x74
 8003e0e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003e10:	4618      	mov	r0, r3
 8003e12:	f007 ff41 	bl	800bc98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	TLin1 = TL_in1;
 8003e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e18:	332c      	adds	r3, #44	@ 0x2c
 8003e1a:	6979      	ldr	r1, [r7, #20]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f007 ff3b 	bl	800bc98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	TLin2 = TL_in2;
 8003e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e24:	3344      	adds	r3, #68	@ 0x44
 8003e26:	6939      	ldr	r1, [r7, #16]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f007 ff35 	bl	800bc98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	DRin1 = DR_in1;
 8003e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e30:	33bc      	adds	r3, #188	@ 0xbc
 8003e32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e34:	4618      	mov	r0, r3
 8003e36:	f007 ff2f 	bl	800bc98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	DRin2 = DR_in2;
 8003e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e3c:	33d4      	adds	r3, #212	@ 0xd4
 8003e3e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003e40:	4618      	mov	r0, r3
 8003e42:	f007 ff29 	bl	800bc98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	DLin1 = DL_in1;
 8003e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e48:	338c      	adds	r3, #140	@ 0x8c
 8003e4a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f007 ff23 	bl	800bc98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	DLin2 = DL_in2;
 8003e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e54:	33a4      	adds	r3, #164	@ 0xa4
 8003e56:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f007 ff1d 	bl	800bc98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	robotRadius = robot_Radius;
 8003e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	625a      	str	r2, [r3, #36]	@ 0x24
	maxSpeed = maxspeed_;
 8003e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	629a      	str	r2, [r3, #40]	@ 0x28

	if (Angular_Velocity != 0) {
 8003e6a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003e6e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e76:	d01e      	beq.n	8003eb6 <_ZN13KinematicData6updateEfffffffNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_S5_S5_S5_S5_S5_S5_ff+0x10e>
		Yspeed = Yencode - ((2 * PI * 80) / Angular_Velocity);
 8003e78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e7a:	f7fc fb7d 	bl	8000578 <__aeabi_f2d>
 8003e7e:	4604      	mov	r4, r0
 8003e80:	460d      	mov	r5, r1
 8003e82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e84:	f7fc fb78 	bl	8000578 <__aeabi_f2d>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	a110      	add	r1, pc, #64	@ (adr r1, 8003ed0 <_ZN13KinematicData6updateEfffffffNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_S5_S5_S5_S5_S5_S5_ff+0x128>)
 8003e8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e92:	f7fc fcf3 	bl	800087c <__aeabi_ddiv>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4620      	mov	r0, r4
 8003e9c:	4629      	mov	r1, r5
 8003e9e:	f7fc fa0b 	bl	80002b8 <__aeabi_dsub>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	f7fc fe8d 	bl	8000bc8 <__aeabi_d2f>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb2:	605a      	str	r2, [r3, #4]
 8003eb4:	e002      	b.n	8003ebc <_ZN13KinematicData6updateEfffffffNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_S5_S5_S5_S5_S5_S5_ff+0x114>
	} else {
		Yspeed = Yencode;
 8003eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003eba:	605a      	str	r2, [r3, #4]
	}

	calculateVectorProperties();
 8003ebc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003ebe:	f000 f80b 	bl	8003ed8 <_ZN13KinematicData25calculateVectorPropertiesEv>
}
 8003ec2:	bf00      	nop
 8003ec4:	3738      	adds	r7, #56	@ 0x38
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	f3af 8000 	nop.w
 8003ed0:	2955385e 	.word	0x2955385e
 8003ed4:	407f6a7a 	.word	0x407f6a7a

08003ed8 <_ZN13KinematicData25calculateVectorPropertiesEv>:
void KinematicData::calculateVectorProperties() {
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	ed2d 8b02 	vpush	{d8}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
	VectorVelocity = sqrt((Xspeed * Xspeed) + (Yspeed * Yspeed));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	ed93 7a00 	vldr	s14, [r3]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	edd3 7a00 	vldr	s15, [r3]
 8003ef0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	edd3 6a01 	vldr	s13, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f08:	eeb0 0a67 	vmov.f32	s0, s15
 8003f0c:	f7ff f921 	bl	8003152 <_ZSt4sqrtf>
 8003f10:	eef0 7a40 	vmov.f32	s15, s0
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	edc3 7a07 	vstr	s15, [r3, #28]

	if (Xspeed == 0) {
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	edd3 7a00 	vldr	s15, [r3]
 8003f20:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f28:	d11d      	bne.n	8003f66 <_ZN13KinematicData25calculateVectorPropertiesEv+0x8e>
		if (Yspeed > 0) {
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f38:	dd04      	ble.n	8003f44 <_ZN13KinematicData25calculateVectorPropertiesEv+0x6c>
			VectorAngle = 0;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f04f 0200 	mov.w	r2, #0
 8003f40:	621a      	str	r2, [r3, #32]
			VectorAngle = -(PI / 2) - Angle;
		} else {
			VectorAngle = (PI / 2) * (Xspeed / abs(Xspeed));
		}
	}
}
 8003f42:	e074      	b.n	800402e <_ZN13KinematicData25calculateVectorPropertiesEv+0x156>
		} else if (Yspeed < 0) {
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f52:	d503      	bpl.n	8003f5c <_ZN13KinematicData25calculateVectorPropertiesEv+0x84>
			VectorAngle = PI / 2;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a3e      	ldr	r2, [pc, #248]	@ (8004050 <_ZN13KinematicData25calculateVectorPropertiesEv+0x178>)
 8003f58:	621a      	str	r2, [r3, #32]
}
 8003f5a:	e068      	b.n	800402e <_ZN13KinematicData25calculateVectorPropertiesEv+0x156>
			VectorAngle = 0;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f04f 0200 	mov.w	r2, #0
 8003f62:	621a      	str	r2, [r3, #32]
}
 8003f64:	e063      	b.n	800402e <_ZN13KinematicData25calculateVectorPropertiesEv+0x156>
		float Angle = atan(Yspeed / Xspeed);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	edd3 7a00 	vldr	s15, [r3]
 8003f72:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003f76:	eeb0 0a66 	vmov.f32	s0, s13
 8003f7a:	f7ff fed3 	bl	8003d24 <_ZSt4atanf>
 8003f7e:	ed87 0a03 	vstr	s0, [r7, #12]
		if (Angle > 0) {
 8003f82:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f8e:	dd13      	ble.n	8003fb8 <_ZN13KinematicData25calculateVectorPropertiesEv+0xe0>
			VectorAngle = (PI / 2) - Angle;
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f7fc faf1 	bl	8000578 <__aeabi_f2d>
 8003f96:	4602      	mov	r2, r0
 8003f98:	460b      	mov	r3, r1
 8003f9a:	a129      	add	r1, pc, #164	@ (adr r1, 8004040 <_ZN13KinematicData25calculateVectorPropertiesEv+0x168>)
 8003f9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fa0:	f7fc f98a 	bl	80002b8 <__aeabi_dsub>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4610      	mov	r0, r2
 8003faa:	4619      	mov	r1, r3
 8003fac:	f7fc fe0c 	bl	8000bc8 <__aeabi_d2f>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	621a      	str	r2, [r3, #32]
}
 8003fb6:	e03a      	b.n	800402e <_ZN13KinematicData25calculateVectorPropertiesEv+0x156>
		} else if (Angle < 0) {
 8003fb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc4:	d513      	bpl.n	8003fee <_ZN13KinematicData25calculateVectorPropertiesEv+0x116>
			VectorAngle = -(PI / 2) - Angle;
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f7fc fad6 	bl	8000578 <__aeabi_f2d>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	a11d      	add	r1, pc, #116	@ (adr r1, 8004048 <_ZN13KinematicData25calculateVectorPropertiesEv+0x170>)
 8003fd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fd6:	f7fc f96f 	bl	80002b8 <__aeabi_dsub>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	4610      	mov	r0, r2
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	f7fc fdf1 	bl	8000bc8 <__aeabi_d2f>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	621a      	str	r2, [r3, #32]
}
 8003fec:	e01f      	b.n	800402e <_ZN13KinematicData25calculateVectorPropertiesEv+0x156>
			VectorAngle = (PI / 2) * (Xspeed / abs(Xspeed));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	ed93 8a00 	vldr	s16, [r3]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	edd3 7a00 	vldr	s15, [r3]
 8003ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8003ffe:	f7fc ffff 	bl	8001000 <_ZSt3absf>
 8004002:	eef0 7a40 	vmov.f32	s15, s0
 8004006:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800400a:	ee17 0a10 	vmov	r0, s14
 800400e:	f7fc fab3 	bl	8000578 <__aeabi_f2d>
 8004012:	a30b      	add	r3, pc, #44	@ (adr r3, 8004040 <_ZN13KinematicData25calculateVectorPropertiesEv+0x168>)
 8004014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004018:	f7fc fb06 	bl	8000628 <__aeabi_dmul>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4610      	mov	r0, r2
 8004022:	4619      	mov	r1, r3
 8004024:	f7fc fdd0 	bl	8000bc8 <__aeabi_d2f>
 8004028:	4602      	mov	r2, r0
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	621a      	str	r2, [r3, #32]
}
 800402e:	bf00      	nop
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	ecbd 8b02 	vpop	{d8}
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	f3af 8000 	nop.w
 8004040:	54442d18 	.word	0x54442d18
 8004044:	3ff921fb 	.word	0x3ff921fb
 8004048:	54442d18 	.word	0x54442d18
 800404c:	bff921fb 	.word	0xbff921fb
 8004050:	3fc90fdb 	.word	0x3fc90fdb

08004054 <_ZN12motorControlC1Ev>:
#include "motorControl.h"
#include "Timer.h"
int16_t sigmoidArray[500];

motorControl::motorControl() {
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4618      	mov	r0, r3
 8004060:	f007 fddd 	bl	800bc1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3318      	adds	r3, #24
 8004068:	4618      	mov	r0, r3
 800406a:	f007 fdd8 	bl	800bc1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	661a      	str	r2, [r3, #96]	@ 0x60
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	665a      	str	r2, [r3, #100]	@ 0x64
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	336c      	adds	r3, #108	@ 0x6c
 800409a:	4618      	mov	r0, r3
 800409c:	f7fc ffc0 	bl	8001020 <_ZN13PIDControllerC1Ev>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3378      	adds	r3, #120	@ 0x78
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fc ffbb 	bl	8001020 <_ZN13PIDControllerC1Ev>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3384      	adds	r3, #132	@ 0x84
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fc ffb6 	bl	8001020 <_ZN13PIDControllerC1Ev>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3390      	adds	r3, #144	@ 0x90
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fc ffb1 	bl	8001020 <_ZN13PIDControllerC1Ev>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f04f 0200 	mov.w	r2, #0
 80040fe:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	//preCalculateSigmoidArray();
}
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <_ZN12motorControl5SetupENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fffifffffif>:

bool motorControl::signbit(float x) {
	return x < 0;
}
void motorControl::Setup(std::string in1, std::string in2, float p_pos, float i_pos, float d_pos, int period_msPos, float thresholdPos, float current_speed, float p_neg, float i_neg, float d_neg,
		int period_msNeg, float thresholdNeg) {
 800410c:	b580      	push	{r7, lr}
 800410e:	b08e      	sub	sp, #56	@ 0x38
 8004110:	af00      	add	r7, sp, #0
 8004112:	6378      	str	r0, [r7, #52]	@ 0x34
 8004114:	6339      	str	r1, [r7, #48]	@ 0x30
 8004116:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004118:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
 800411c:	edc7 0a09 	vstr	s1, [r7, #36]	@ 0x24
 8004120:	ed87 1a08 	vstr	s2, [r7, #32]
 8004124:	61fb      	str	r3, [r7, #28]
 8004126:	edc7 1a06 	vstr	s3, [r7, #24]
 800412a:	ed87 2a05 	vstr	s4, [r7, #20]
 800412e:	edc7 2a04 	vstr	s5, [r7, #16]
 8004132:	ed87 3a03 	vstr	s6, [r7, #12]
 8004136:	edc7 3a02 	vstr	s7, [r7, #8]
 800413a:	ed87 4a01 	vstr	s8, [r7, #4]
	in1pin = in1;
 800413e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004140:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004142:	4618      	mov	r0, r3
 8004144:	f007 fda8 	bl	800bc98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	in2pin = in2;
 8004148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800414a:	3318      	adds	r3, #24
 800414c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800414e:	4618      	mov	r0, r3
 8004150:	f007 fda2 	bl	800bc98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	kp_pos = p_pos;
 8004154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004156:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004158:	631a      	str	r2, [r3, #48]	@ 0x30
	ki_pos = i_pos;
 800415a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800415c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800415e:	635a      	str	r2, [r3, #52]	@ 0x34
	kd_pos = d_pos;
 8004160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004162:	6a3a      	ldr	r2, [r7, #32]
 8004164:	639a      	str	r2, [r3, #56]	@ 0x38
	periodMS_pos = period_msPos;
 8004166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004168:	69fa      	ldr	r2, [r7, #28]
 800416a:	63da      	str	r2, [r3, #60]	@ 0x3c
	threshold_pos = thresholdPos;
 800416c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	641a      	str	r2, [r3, #64]	@ 0x40
	currentSpeed = current_speed;
 8004172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	kp_neg = p_neg;
 800417a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	645a      	str	r2, [r3, #68]	@ 0x44
	ki_neg = i_neg;
 8004180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	649a      	str	r2, [r3, #72]	@ 0x48
	kd_neg = d_neg;
 8004186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	64da      	str	r2, [r3, #76]	@ 0x4c
	periodMS_neg = period_msNeg;
 800418c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800418e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004190:	651a      	str	r2, [r3, #80]	@ 0x50
	threshold_neg = thresholdNeg;
 8004192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8004198:	bf00      	nop
 800419a:	3738      	adds	r7, #56	@ 0x38
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <_ZN12motorControl4spinEsff>:
void motorControl::spin(int16_t speed, float PosOFFset, float NegOFFset) {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	460b      	mov	r3, r1
 80041aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80041ae:	edc7 0a00 	vstr	s1, [r7]
 80041b2:	817b      	strh	r3, [r7, #10]
	float totalSpeed = 0;
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
	posoffset = PosOFFset;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	negoffset = NegOFFset;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
//	if (abs(speed) > 500) {
//		speed = 500 * abs(speed) / speed;
//	}
	// approrpriate PosOFFset = 185, // NegOffset = 105
	if (speed > 0) {
 80041ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	dd10      	ble.n	80041f4 <_ZN12motorControl4spinEsff+0x54>
		totalSpeed = 1500 + (speed + PosOFFset); // 186, 160
 80041d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80041d6:	ee07 3a90 	vmov	s15, r3
 80041da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041de:	edd7 7a01 	vldr	s15, [r7, #4]
 80041e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041e6:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8004240 <_ZN12motorControl4spinEsff+0xa0>
 80041ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041ee:	edc7 7a05 	vstr	s15, [r7, #20]
 80041f2:	e016      	b.n	8004222 <_ZN12motorControl4spinEsff+0x82>
		//PWM_Write(in1pin, 1500 + (speed + 155));
	} else if (speed < 0) {
 80041f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	da10      	bge.n	800421e <_ZN12motorControl4spinEsff+0x7e>
		totalSpeed = 1500 + (speed - NegOFFset); // 114, 105
 80041fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004200:	ee07 3a90 	vmov	s15, r3
 8004204:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004208:	edd7 7a00 	vldr	s15, [r7]
 800420c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004210:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8004240 <_ZN12motorControl4spinEsff+0xa0>
 8004214:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004218:	edc7 7a05 	vstr	s15, [r7, #20]
 800421c:	e001      	b.n	8004222 <_ZN12motorControl4spinEsff+0x82>
		//PWM_Write(in1pin, 1500 + (speed - 95));
	} else {
		totalSpeed = 1500;
 800421e:	4b09      	ldr	r3, [pc, #36]	@ (8004244 <_ZN12motorControl4spinEsff+0xa4>)
 8004220:	617b      	str	r3, [r7, #20]
	 totalSpeed = 2000;
	 }
	 if (totalSpeed < 1000) {
	 totalSpeed = 1000;
	 }*/
	PWM_Write(in1pin, totalSpeed);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	edd7 7a05 	vldr	s15, [r7, #20]
 8004228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800422c:	ee17 1a90 	vmov	r1, s15
 8004230:	4618      	mov	r0, r3
 8004232:	f7fd f9df 	bl	80015f4 <_Z9PWM_WriteRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm>
}
 8004236:	bf00      	nop
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	44bb8000 	.word	0x44bb8000
 8004244:	44bb8000 	.word	0x44bb8000

08004248 <_ZN12motorControl5driveEffff>:
void motorControl::drive(float speed, float currentSpeed, float posaddgain, float negaddgain) {
 8004248:	b580      	push	{r7, lr}
 800424a:	b088      	sub	sp, #32
 800424c:	af00      	add	r7, sp, #0
 800424e:	6178      	str	r0, [r7, #20]
 8004250:	ed87 0a04 	vstr	s0, [r7, #16]
 8004254:	edc7 0a03 	vstr	s1, [r7, #12]
 8004258:	ed87 1a02 	vstr	s2, [r7, #8]
 800425c:	edc7 1a01 	vstr	s3, [r7, #4]
	const uint16_t AssistUpdatePeriod_ms = 70;
 8004260:	2346      	movs	r3, #70	@ 0x46
 8004262:	83fb      	strh	r3, [r7, #30]
	const uint16_t AssistThreshold = 0;
 8004264:	2300      	movs	r3, #0
 8004266:	83bb      	strh	r3, [r7, #28]

	Motor_PIDcontrol_positive.update(speed, currentSpeed, threshold_pos, kp_pos, kd_pos, ki_pos, periodMS_pos);
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	ed93 6a0d 	vldr	s12, [r3, #52]	@ 0x34
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800428a:	4619      	mov	r1, r3
 800428c:	eef0 2a46 	vmov.f32	s5, s12
 8004290:	eeb0 2a66 	vmov.f32	s4, s13
 8004294:	eef0 1a47 	vmov.f32	s3, s14
 8004298:	eeb0 1a67 	vmov.f32	s2, s15
 800429c:	edd7 0a03 	vldr	s1, [r7, #12]
 80042a0:	ed97 0a04 	vldr	s0, [r7, #16]
 80042a4:	4610      	mov	r0, r2
 80042a6:	f7fc fed1 	bl	800104c <_ZN13PIDController6updateEffffffm>
	Motor_PIDcontrol_negative.update(speed, currentSpeed, threshold_neg, kp_neg, kd_neg, ki_neg, periodMS_neg);
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f103 0278 	add.w	r2, r3, #120	@ 0x78
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	ed93 6a12 	vldr	s12, [r3, #72]	@ 0x48
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042cc:	4619      	mov	r1, r3
 80042ce:	eef0 2a46 	vmov.f32	s5, s12
 80042d2:	eeb0 2a66 	vmov.f32	s4, s13
 80042d6:	eef0 1a47 	vmov.f32	s3, s14
 80042da:	eeb0 1a67 	vmov.f32	s2, s15
 80042de:	edd7 0a03 	vldr	s1, [r7, #12]
 80042e2:	ed97 0a04 	vldr	s0, [r7, #16]
 80042e6:	4610      	mov	r0, r2
 80042e8:	f7fc feb0 	bl	800104c <_ZN13PIDController6updateEffffffm>

	AddedSpeed_PIDcontrol_positive.update(speed, currentSpeed, threshold_pos, posaddgain, 0.38, 0.0f, 10); // 0.23
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80042f8:	210a      	movs	r1, #10
 80042fa:	eddf 2a89 	vldr	s5, [pc, #548]	@ 8004520 <_ZN12motorControl5driveEffff+0x2d8>
 80042fe:	ed9f 2a89 	vldr	s4, [pc, #548]	@ 8004524 <_ZN12motorControl5driveEffff+0x2dc>
 8004302:	edd7 1a02 	vldr	s3, [r7, #8]
 8004306:	eeb0 1a67 	vmov.f32	s2, s15
 800430a:	edd7 0a03 	vldr	s1, [r7, #12]
 800430e:	ed97 0a04 	vldr	s0, [r7, #16]
 8004312:	4610      	mov	r0, r2
 8004314:	f7fc fe9a 	bl	800104c <_ZN13PIDController6updateEffffffm>
	AddedSpeed_PIDcontrol_negative.update(speed, currentSpeed, threshold_neg, negaddgain, 0.45, 0.0f, 10); // 0.28
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8004324:	210a      	movs	r1, #10
 8004326:	eddf 2a7e 	vldr	s5, [pc, #504]	@ 8004520 <_ZN12motorControl5driveEffff+0x2d8>
 800432a:	ed9f 2a7f 	vldr	s4, [pc, #508]	@ 8004528 <_ZN12motorControl5driveEffff+0x2e0>
 800432e:	edd7 1a01 	vldr	s3, [r7, #4]
 8004332:	eeb0 1a67 	vmov.f32	s2, s15
 8004336:	edd7 0a03 	vldr	s1, [r7, #12]
 800433a:	ed97 0a04 	vldr	s0, [r7, #16]
 800433e:	4610      	mov	r0, r2
 8004340:	f7fc fe84 	bl	800104c <_ZN13PIDController6updateEffffffm>
	if (abs(speed - currentSpeed) >= AssistThreshold) {
 8004344:	ed97 7a04 	vldr	s14, [r7, #16]
 8004348:	edd7 7a03 	vldr	s15, [r7, #12]
 800434c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004350:	eeb0 0a67 	vmov.f32	s0, s15
 8004354:	f7fc fe54 	bl	8001000 <_ZSt3absf>
 8004358:	eef0 7a40 	vmov.f32	s15, s0
 800435c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	/*
	 if ((SystemTimer.milliseconds - updateTime < AssistUpdatePeriod_ms)) { // && (abs(speed - currentSpeed) >= AssistThreshold)}
	 updateTime = SystemTimer.milliseconds;
	 }
	 */
	integral_pos += Motor_PIDcontrol_positive.Adjustment_output;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	ed93 7a28 	vldr	s14, [r3, #160]	@ 0xa0
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8004370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	edc3 7a28 	vstr	s15, [r3, #160]	@ 0xa0
	integral_neg += Motor_PIDcontrol_negative.Adjustment_output;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	ed93 7a29 	vldr	s14, [r3, #164]	@ 0xa4
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 8004386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4

	if (speed * currentSpeed < 0 || currentSpeed == 0) {
 8004390:	ed97 7a04 	vldr	s14, [r7, #16]
 8004394:	edd7 7a03 	vldr	s15, [r7, #12]
 8004398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800439c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a4:	d406      	bmi.n	80043b4 <_ZN12motorControl5driveEffff+0x16c>
 80043a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80043aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80043ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b2:	d160      	bne.n	8004476 <_ZN12motorControl5driveEffff+0x22e>
		addedSpeed_pos = abs(AddedSpeed_PIDcontrol_positive.Adjustment_output); // (speed - currentSpeed) * posaddgain; // 0.75
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 80043ba:	eeb0 0a67 	vmov.f32	s0, s15
 80043be:	f7fc fe1f 	bl	8001000 <_ZSt3absf>
 80043c2:	eef0 7a40 	vmov.f32	s15, s0
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
		addedSpeed_neg = abs(AddedSpeed_PIDcontrol_negative.Adjustment_output); // (speed - currentSpeed) * negaddgain; // 0.58
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80043d2:	eeb0 0a67 	vmov.f32	s0, s15
 80043d6:	f7fc fe13 	bl	8001000 <_ZSt3absf>
 80043da:	eef0 7a40 	vmov.f32	s15, s0
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
		if (addedSpeed_pos > 167) {
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80043ea:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800452c <_ZN12motorControl5driveEffff+0x2e4>
 80043ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f6:	dd02      	ble.n	80043fe <_ZN12motorControl5driveEffff+0x1b6>
			addedSpeed_pos = 167;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	4a4d      	ldr	r2, [pc, #308]	@ (8004530 <_ZN12motorControl5driveEffff+0x2e8>)
 80043fc:	661a      	str	r2, [r3, #96]	@ 0x60
		}
		if (addedSpeed_neg > 107) {
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8004404:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8004534 <_ZN12motorControl5driveEffff+0x2ec>
 8004408:	eef4 7ac7 	vcmpe.f32	s15, s14
 800440c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004410:	dd02      	ble.n	8004418 <_ZN12motorControl5driveEffff+0x1d0>
			addedSpeed_neg = 107;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	4a48      	ldr	r2, [pc, #288]	@ (8004538 <_ZN12motorControl5driveEffff+0x2f0>)
 8004416:	665a      	str	r2, [r3, #100]	@ 0x64
		}
		if (speed > 0) {
 8004418:	edd7 7a04 	vldr	s15, [r7, #16]
 800441c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004424:	dd0f      	ble.n	8004446 <_ZN12motorControl5driveEffff+0x1fe>
			//totalSpeed = 135;
			totalSpeed = (int16_t) addedSpeed_pos;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800442c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004430:	ee17 3a90 	vmov	r3, s15
 8004434:	b21b      	sxth	r3, r3
 8004436:	ee07 3a90 	vmov	s15, r3
 800443a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8
 8004444:	e017      	b.n	8004476 <_ZN12motorControl5driveEffff+0x22e>
		} else if (speed < 0) {
 8004446:	edd7 7a04 	vldr	s15, [r7, #16]
 800444a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800444e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004452:	d510      	bpl.n	8004476 <_ZN12motorControl5driveEffff+0x22e>
			//totalSpeed = -88;
			totalSpeed = (int16_t) -addedSpeed_neg;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800445a:	eef1 7a67 	vneg.f32	s15, s15
 800445e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004462:	ee17 3a90 	vmov	r3, s15
 8004466:	b21b      	sxth	r3, r3
 8004468:	ee07 3a90 	vmov	s15, r3
 800446c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8
	 }
	 } else {
	 startmotorstate = true;
	 }
	 */
	if (speed >= 0) {
 8004476:	edd7 7a04 	vldr	s15, [r7, #16]
 800447a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800447e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004482:	db0b      	blt.n	800449c <_ZN12motorControl5driveEffff+0x254>
		totalSpeed += Motor_PIDcontrol_positive.Adjustment_output; // + getSigmoidOutput(speed - currentSpeed);
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	ed93 7a2a 	vldr	s14, [r3, #168]	@ 0xa8
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8004490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8
 800449a:	e00a      	b.n	80044b2 <_ZN12motorControl5driveEffff+0x26a>
	} else {
		totalSpeed += Motor_PIDcontrol_negative.Adjustment_output; // + getSigmoidOutput(speed - currentSpeed);
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	ed93 7a2a 	vldr	s14, [r3, #168]	@ 0xa8
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 80044a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8
	}

	if (totalSpeed > 500) {
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	edd3 7a2a 	vldr	s15, [r3, #168]	@ 0xa8
 80044b8:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800453c <_ZN12motorControl5driveEffff+0x2f4>
 80044bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c4:	dd04      	ble.n	80044d0 <_ZN12motorControl5driveEffff+0x288>
		totalSpeed = 500;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004540 <_ZN12motorControl5driveEffff+0x2f8>)
 80044ca:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 80044ce:	e00d      	b.n	80044ec <_ZN12motorControl5driveEffff+0x2a4>
	} else if (totalSpeed < -500) {
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	edd3 7a2a 	vldr	s15, [r3, #168]	@ 0xa8
 80044d6:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8004544 <_ZN12motorControl5driveEffff+0x2fc>
 80044da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044e2:	d503      	bpl.n	80044ec <_ZN12motorControl5driveEffff+0x2a4>
		totalSpeed = -500;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	4a18      	ldr	r2, [pc, #96]	@ (8004548 <_ZN12motorControl5driveEffff+0x300>)
 80044e8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	}
	spin((int16_t) totalSpeed, posoffset, negoffset); // + getSigmoidOutput(speed - currentSpeed)
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	edd3 7a2a 	vldr	s15, [r3, #168]	@ 0xa8
 80044f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044f6:	ee17 3a90 	vmov	r3, s15
 80044fa:	b21a      	sxth	r2, r3
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	ed93 7a2d 	vldr	s14, [r3, #180]	@ 0xb4
 8004508:	eef0 0a47 	vmov.f32	s1, s14
 800450c:	eeb0 0a67 	vmov.f32	s0, s15
 8004510:	4611      	mov	r1, r2
 8004512:	6978      	ldr	r0, [r7, #20]
 8004514:	f7ff fe44 	bl	80041a0 <_ZN12motorControl4spinEsff>

}
 8004518:	bf00      	nop
 800451a:	3720      	adds	r7, #32
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	00000000 	.word	0x00000000
 8004524:	3ec28f5c 	.word	0x3ec28f5c
 8004528:	3ee66666 	.word	0x3ee66666
 800452c:	43270000 	.word	0x43270000
 8004530:	43270000 	.word	0x43270000
 8004534:	42d60000 	.word	0x42d60000
 8004538:	42d60000 	.word	0x42d60000
 800453c:	43fa0000 	.word	0x43fa0000
 8004540:	43fa0000 	.word	0x43fa0000
 8004544:	c3fa0000 	.word	0xc3fa0000
 8004548:	c3fa0000 	.word	0xc3fa0000

0800454c <_ZN14movementSystemC1Ev>:
#include "MovementSystem.h"

movementSystem::movementSystem() {
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f04f 0200 	mov.w	r2, #0
 8004562:	605a      	str	r2, [r3, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f04f 0200 	mov.w	r2, #0
 800456a:	609a      	str	r2, [r3, #8]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	60da      	str	r2, [r3, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	611a      	str	r2, [r3, #16]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	615a      	str	r2, [r3, #20]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	619a      	str	r2, [r3, #24]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	61da      	str	r2, [r3, #28]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f04f 0200 	mov.w	r2, #0
 800459a:	621a      	str	r2, [r3, #32]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	635a      	str	r2, [r3, #52]	@ 0x34
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	333c      	adds	r3, #60	@ 0x3c
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff fd40 	bl	8004054 <_ZN12motorControlC1Ev>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	33f4      	adds	r3, #244	@ 0xf4
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff fd3b 	bl	8004054 <_ZN12motorControlC1Ev>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff fd35 	bl	8004054 <_ZN12motorControlC1Ev>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff fd2f 	bl	8004054 <_ZN12motorControlC1Ev>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fc fd0f 	bl	8001020 <_ZN13PIDControllerC1Ev>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f503 734a 	add.w	r3, r3, #808	@ 0x328
 8004608:	4618      	mov	r0, r3
 800460a:	f7fc fd09 	bl	8001020 <_ZN13PIDControllerC1Ev>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8004614:	4618      	mov	r0, r3
 8004616:	f7fc fd03 	bl	8001020 <_ZN13PIDControllerC1Ev>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f503 7350 	add.w	r3, r3, #832	@ 0x340
 8004620:	4618      	mov	r0, r3
 8004622:	f7fc fcfd 	bl	8001020 <_ZN13PIDControllerC1Ev>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 800462c:	4618      	mov	r0, r3
 800462e:	f7fc fcf7 	bl	8001020 <_ZN13PIDControllerC1Ev>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8004638:	4618      	mov	r0, r3
 800463a:	f7fc fcf1 	bl	8001020 <_ZN13PIDControllerC1Ev>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f503 7359 	add.w	r3, r3, #868	@ 0x364
 8004644:	4618      	mov	r0, r3
 8004646:	f7fc fceb 	bl	8001020 <_ZN13PIDControllerC1Ev>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f503 735c 	add.w	r3, r3, #880	@ 0x370
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff fa6d 	bl	8003b30 <_ZN27InverseKinematicCalculationC1Ev>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
}
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
	...

0800466c <_ZN14movementSystem4moveEfff>:
	synAdjust_TL = TLmotor_sync.Adjustment_output;
	synAdjust_TR = TRmotor_sync.Adjustment_output;
	synAdjust_DL = DLmotor_sync.Adjustment_output;
	synAdjust_DR = DRmotor_sync.Adjustment_output;
}
void movementSystem::move(float inputXspeed, float inputYspeed, float HeadingAngle) {
 800466c:	b590      	push	{r4, r7, lr}
 800466e:	ed2d 8b02 	vpush	{d8}
 8004672:	b0c5      	sub	sp, #276	@ 0x114
 8004674:	af02      	add	r7, sp, #8
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800467c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004680:	ed83 0a00 	vstr	s0, [r3]
 8004684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004688:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800468c:	edc3 0a00 	vstr	s1, [r3]
 8004690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004698:	ed83 1a00 	vstr	s2, [r3]
	// if heading is on the left side of field orientation means HeaderAngleError must be negative
	flag = 1;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80046a2:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
	 TRmotor.Setup(KinematicState.TRin1, KinematicState.TRin2, 0.0001, 0, 0.00007, 10, 0, KinematicState.TRmotor_spd, 0.0001, 0, 0.00007, 10, 0);
	 DLmotor.Setup(KinematicState.DLin1, KinematicState.DLin2, 0.0001, 0, 0.00007, 10, 0, KinematicState.DLmotor_spd, 0.0001, 0, 0.00007, 10, 0);
	 DRmotor.Setup(KinematicState.DRin1, KinematicState.DRin2, 0.0001, 0, 0.00007, 10, 0, KinematicState.DRmotor_spd, 0.0001, 0, 0.00007, 10, 0);
	 */

	TLmotor.Setup(KinematicState.TLin1, KinematicState.TLin2, 0.00071, 0, 0.00029, 10, 0, KinematicState.TLmotor_spd, 0.00071, 0, 0.00029, 10, 0); // D 0.025 neg
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f103 043c 	add.w	r4, r3, #60	@ 0x3c
 80046ac:	f107 0310 	add.w	r3, r7, #16
 80046b0:	49da      	ldr	r1, [pc, #872]	@ (8004a1c <_ZN14movementSystem4moveEfff+0x3b0>)
 80046b2:	4618      	mov	r0, r3
 80046b4:	f007 fb13 	bl	800bcde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80046b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80046bc:	49d8      	ldr	r1, [pc, #864]	@ (8004a20 <_ZN14movementSystem4moveEfff+0x3b4>)
 80046be:	4618      	mov	r0, r3
 80046c0:	f007 fb0d 	bl	800bcde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80046c4:	4bd7      	ldr	r3, [pc, #860]	@ (8004a24 <_ZN14movementSystem4moveEfff+0x3b8>)
 80046c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80046ca:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80046ce:	f107 0110 	add.w	r1, r7, #16
 80046d2:	230a      	movs	r3, #10
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	ed9f 4ad4 	vldr	s8, [pc, #848]	@ 8004a28 <_ZN14movementSystem4moveEfff+0x3bc>
 80046da:	eddf 3ad4 	vldr	s7, [pc, #848]	@ 8004a2c <_ZN14movementSystem4moveEfff+0x3c0>
 80046de:	ed9f 3ad2 	vldr	s6, [pc, #840]	@ 8004a28 <_ZN14movementSystem4moveEfff+0x3bc>
 80046e2:	eddf 2ad3 	vldr	s5, [pc, #844]	@ 8004a30 <_ZN14movementSystem4moveEfff+0x3c4>
 80046e6:	eeb0 2a67 	vmov.f32	s4, s15
 80046ea:	eddf 1acf 	vldr	s3, [pc, #828]	@ 8004a28 <_ZN14movementSystem4moveEfff+0x3bc>
 80046ee:	230a      	movs	r3, #10
 80046f0:	ed9f 1ace 	vldr	s2, [pc, #824]	@ 8004a2c <_ZN14movementSystem4moveEfff+0x3c0>
 80046f4:	eddf 0acc 	vldr	s1, [pc, #816]	@ 8004a28 <_ZN14movementSystem4moveEfff+0x3bc>
 80046f8:	ed9f 0acd 	vldr	s0, [pc, #820]	@ 8004a30 <_ZN14movementSystem4moveEfff+0x3c4>
 80046fc:	4620      	mov	r0, r4
 80046fe:	f7ff fd05 	bl	800410c <_ZN12motorControl5SetupENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fffifffffif>
 8004702:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004706:	4618      	mov	r0, r3
 8004708:	f007 fa90 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800470c:	f107 0310 	add.w	r3, r7, #16
 8004710:	4618      	mov	r0, r3
 8004712:	f007 fa8b 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	TRmotor.Setup(KinematicState.TRin1, KinematicState.TRin2, 0.00071, 0, 0.00029, 10, 0, KinematicState.TRmotor_spd, 0.00071, 0, 0.00029, 10, 0);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f103 04f4 	add.w	r4, r3, #244	@ 0xf4
 800471c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004720:	49c4      	ldr	r1, [pc, #784]	@ (8004a34 <_ZN14movementSystem4moveEfff+0x3c8>)
 8004722:	4618      	mov	r0, r3
 8004724:	f007 fadb 	bl	800bcde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004728:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800472c:	49c2      	ldr	r1, [pc, #776]	@ (8004a38 <_ZN14movementSystem4moveEfff+0x3cc>)
 800472e:	4618      	mov	r0, r3
 8004730:	f007 fad5 	bl	800bcde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004734:	4bbb      	ldr	r3, [pc, #748]	@ (8004a24 <_ZN14movementSystem4moveEfff+0x3b8>)
 8004736:	edd3 7a04 	vldr	s15, [r3, #16]
 800473a:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800473e:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8004742:	230a      	movs	r3, #10
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	ed9f 4ab8 	vldr	s8, [pc, #736]	@ 8004a28 <_ZN14movementSystem4moveEfff+0x3bc>
 800474a:	eddf 3ab8 	vldr	s7, [pc, #736]	@ 8004a2c <_ZN14movementSystem4moveEfff+0x3c0>
 800474e:	ed9f 3ab6 	vldr	s6, [pc, #728]	@ 8004a28 <_ZN14movementSystem4moveEfff+0x3bc>
 8004752:	eddf 2ab7 	vldr	s5, [pc, #732]	@ 8004a30 <_ZN14movementSystem4moveEfff+0x3c4>
 8004756:	eeb0 2a67 	vmov.f32	s4, s15
 800475a:	eddf 1ab3 	vldr	s3, [pc, #716]	@ 8004a28 <_ZN14movementSystem4moveEfff+0x3bc>
 800475e:	230a      	movs	r3, #10
 8004760:	ed9f 1ab2 	vldr	s2, [pc, #712]	@ 8004a2c <_ZN14movementSystem4moveEfff+0x3c0>
 8004764:	eddf 0ab0 	vldr	s1, [pc, #704]	@ 8004a28 <_ZN14movementSystem4moveEfff+0x3bc>
 8004768:	ed9f 0ab1 	vldr	s0, [pc, #708]	@ 8004a30 <_ZN14movementSystem4moveEfff+0x3c4>
 800476c:	4620      	mov	r0, r4
 800476e:	f7ff fccd 	bl	800410c <_ZN12motorControl5SetupENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fffifffffif>
 8004772:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004776:	4618      	mov	r0, r3
 8004778:	f007 fa58 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800477c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004780:	4618      	mov	r0, r3
 8004782:	f007 fa53 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	DLmotor.Setup(KinematicState.DLin1, KinematicState.DLin2, 0.00071, 0, 0.00029, 10, 0, KinematicState.DLmotor_spd, 0.00071, 0, 0.00029, 10, 0);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f503 74d6 	add.w	r4, r3, #428	@ 0x1ac
 800478c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8004790:	49aa      	ldr	r1, [pc, #680]	@ (8004a3c <_ZN14movementSystem4moveEfff+0x3d0>)
 8004792:	4618      	mov	r0, r3
 8004794:	f007 faa3 	bl	800bcde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004798:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800479c:	49a8      	ldr	r1, [pc, #672]	@ (8004a40 <_ZN14movementSystem4moveEfff+0x3d4>)
 800479e:	4618      	mov	r0, r3
 80047a0:	f007 fa9d 	bl	800bcde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80047a4:	4b9f      	ldr	r3, [pc, #636]	@ (8004a24 <_ZN14movementSystem4moveEfff+0x3b8>)
 80047a6:	edd3 7a05 	vldr	s15, [r3, #20]
 80047aa:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80047ae:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80047b2:	230a      	movs	r3, #10
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	ed9f 4a9c 	vldr	s8, [pc, #624]	@ 8004a28 <_ZN14movementSystem4moveEfff+0x3bc>
 80047ba:	eddf 3a9c 	vldr	s7, [pc, #624]	@ 8004a2c <_ZN14movementSystem4moveEfff+0x3c0>
 80047be:	ed9f 3a9a 	vldr	s6, [pc, #616]	@ 8004a28 <_ZN14movementSystem4moveEfff+0x3bc>
 80047c2:	eddf 2a9b 	vldr	s5, [pc, #620]	@ 8004a30 <_ZN14movementSystem4moveEfff+0x3c4>
 80047c6:	eeb0 2a67 	vmov.f32	s4, s15
 80047ca:	eddf 1a97 	vldr	s3, [pc, #604]	@ 8004a28 <_ZN14movementSystem4moveEfff+0x3bc>
 80047ce:	230a      	movs	r3, #10
 80047d0:	ed9f 1a96 	vldr	s2, [pc, #600]	@ 8004a2c <_ZN14movementSystem4moveEfff+0x3c0>
 80047d4:	eddf 0a94 	vldr	s1, [pc, #592]	@ 8004a28 <_ZN14movementSystem4moveEfff+0x3bc>
 80047d8:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 8004a30 <_ZN14movementSystem4moveEfff+0x3c4>
 80047dc:	4620      	mov	r0, r4
 80047de:	f7ff fc95 	bl	800410c <_ZN12motorControl5SetupENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fffifffffif>
 80047e2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80047e6:	4618      	mov	r0, r3
 80047e8:	f007 fa20 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80047ec:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80047f0:	4618      	mov	r0, r3
 80047f2:	f007 fa1b 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	DRmotor.Setup(KinematicState.DRin1, KinematicState.DRin2, 0.00071, 0, 0.00029, 10, 0, KinematicState.DRmotor_spd, 0.00071, 0, 0.00029, 10, 0);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f503 7419 	add.w	r4, r3, #612	@ 0x264
 80047fc:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8004800:	4990      	ldr	r1, [pc, #576]	@ (8004a44 <_ZN14movementSystem4moveEfff+0x3d8>)
 8004802:	4618      	mov	r0, r3
 8004804:	f007 fa6b 	bl	800bcde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004808:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800480c:	498e      	ldr	r1, [pc, #568]	@ (8004a48 <_ZN14movementSystem4moveEfff+0x3dc>)
 800480e:	4618      	mov	r0, r3
 8004810:	f007 fa65 	bl	800bcde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004814:	4b83      	ldr	r3, [pc, #524]	@ (8004a24 <_ZN14movementSystem4moveEfff+0x3b8>)
 8004816:	edd3 7a06 	vldr	s15, [r3, #24]
 800481a:	f107 02b8 	add.w	r2, r7, #184	@ 0xb8
 800481e:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8004822:	230a      	movs	r3, #10
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	ed9f 4a80 	vldr	s8, [pc, #512]	@ 8004a28 <_ZN14movementSystem4moveEfff+0x3bc>
 800482a:	eddf 3a80 	vldr	s7, [pc, #512]	@ 8004a2c <_ZN14movementSystem4moveEfff+0x3c0>
 800482e:	ed9f 3a7e 	vldr	s6, [pc, #504]	@ 8004a28 <_ZN14movementSystem4moveEfff+0x3bc>
 8004832:	eddf 2a7f 	vldr	s5, [pc, #508]	@ 8004a30 <_ZN14movementSystem4moveEfff+0x3c4>
 8004836:	eeb0 2a67 	vmov.f32	s4, s15
 800483a:	eddf 1a7b 	vldr	s3, [pc, #492]	@ 8004a28 <_ZN14movementSystem4moveEfff+0x3bc>
 800483e:	230a      	movs	r3, #10
 8004840:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 8004a2c <_ZN14movementSystem4moveEfff+0x3c0>
 8004844:	eddf 0a78 	vldr	s1, [pc, #480]	@ 8004a28 <_ZN14movementSystem4moveEfff+0x3bc>
 8004848:	ed9f 0a79 	vldr	s0, [pc, #484]	@ 8004a30 <_ZN14movementSystem4moveEfff+0x3c4>
 800484c:	4620      	mov	r0, r4
 800484e:	f7ff fc5d 	bl	800410c <_ZN12motorControl5SetupENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fffifffffif>
 8004852:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8004856:	4618      	mov	r0, r3
 8004858:	f007 f9e8 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800485c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8004860:	4618      	mov	r0, r3
 8004862:	f007 f9e3 	bl	800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	HeadingController.update(HeadingAngle, IMU.HeaderAngleError, 1.1, 2.9, 1.1, 0, 10);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f503 7247 	add.w	r2, r3, #796	@ 0x31c
 800486c:	4b77      	ldr	r3, [pc, #476]	@ (8004a4c <_ZN14movementSystem4moveEfff+0x3e0>)
 800486e:	edd3 7a06 	vldr	s15, [r3, #24]
 8004872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800487a:	210a      	movs	r1, #10
 800487c:	eddf 2a6a 	vldr	s5, [pc, #424]	@ 8004a28 <_ZN14movementSystem4moveEfff+0x3bc>
 8004880:	ed9f 2a73 	vldr	s4, [pc, #460]	@ 8004a50 <_ZN14movementSystem4moveEfff+0x3e4>
 8004884:	eddf 1a73 	vldr	s3, [pc, #460]	@ 8004a54 <_ZN14movementSystem4moveEfff+0x3e8>
 8004888:	ed9f 1a71 	vldr	s2, [pc, #452]	@ 8004a50 <_ZN14movementSystem4moveEfff+0x3e4>
 800488c:	eef0 0a67 	vmov.f32	s1, s15
 8004890:	ed93 0a00 	vldr	s0, [r3]
 8004894:	4610      	mov	r0, r2
 8004896:	f7fc fbd9 	bl	800104c <_ZN13PIDController6updateEffffffm>
	 float scale = minVectorSpeed / vectorSpeed;
	 inputXspeed *= scale;
	 inputYspeed *= scale;
	 }
	 */
	InverseKinematic.CalculateWheelSpeed(inputXspeed, inputYspeed, HeadingController.Adjustment_output);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f503 715c 	add.w	r1, r3, #880	@ 0x370
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 80048a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048aa:	f5a3 7282 	sub.w	r2, r3, #260	@ 0x104
 80048ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048b2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80048b6:	eeb0 1a67 	vmov.f32	s2, s15
 80048ba:	edd2 0a00 	vldr	s1, [r2]
 80048be:	ed93 0a00 	vldr	s0, [r3]
 80048c2:	4608      	mov	r0, r1
 80048c4:	f7ff f98e 	bl	8003be4 <_ZN27InverseKinematicCalculation19CalculateWheelSpeedEfff>

	total_TL = InverseKinematic.TL;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f8d3 23a0 	ldr.w	r2, [r3, #928]	@ 0x3a0
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	621a      	str	r2, [r3, #32]
	total_TR = InverseKinematic.TR;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f8d3 239c 	ldr.w	r2, [r3, #924]	@ 0x39c
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	625a      	str	r2, [r3, #36]	@ 0x24
	total_DL = InverseKinematic.DL;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f8d3 23a8 	ldr.w	r2, [r3, #936]	@ 0x3a8
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	629a      	str	r2, [r3, #40]	@ 0x28
	total_DR = InverseKinematic.DR;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f8d3 23a4 	ldr.w	r2, [r3, #932]	@ 0x3a4
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	62da      	str	r2, [r3, #44]	@ 0x2c

	// calculate Vectordiff

	float speedDif_Gain = 0.264; //0.08
 80048f0:	4b59      	ldr	r3, [pc, #356]	@ (8004a58 <_ZN14movementSystem4moveEfff+0x3ec>)
 80048f2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
	float VectorDif_ratio = 0;
 80048f6:	f04f 0300 	mov.w	r3, #0
 80048fa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
	float Vector2Adjust = 0;
 80048fe:	f04f 0300 	mov.w	r3, #0
 8004902:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	float Vector1Adjust = 0;
 8004906:	f04f 0300 	mov.w	r3, #0
 800490a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

	float averageVector1_currentspd = (abs(KinematicState.TLmotor_spd) + abs(KinematicState.DRmotor_spd)) / 2;
 800490e:	4b45      	ldr	r3, [pc, #276]	@ (8004a24 <_ZN14movementSystem4moveEfff+0x3b8>)
 8004910:	edd3 7a03 	vldr	s15, [r3, #12]
 8004914:	eeb0 0a67 	vmov.f32	s0, s15
 8004918:	f7fc fb72 	bl	8001000 <_ZSt3absf>
 800491c:	eeb0 8a40 	vmov.f32	s16, s0
 8004920:	4b40      	ldr	r3, [pc, #256]	@ (8004a24 <_ZN14movementSystem4moveEfff+0x3b8>)
 8004922:	edd3 7a06 	vldr	s15, [r3, #24]
 8004926:	eeb0 0a67 	vmov.f32	s0, s15
 800492a:	f7fc fb69 	bl	8001000 <_ZSt3absf>
 800492e:	eef0 7a40 	vmov.f32	s15, s0
 8004932:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004936:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800493a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800493e:	edc7 7a3b 	vstr	s15, [r7, #236]	@ 0xec
	float averageVector2_currentspd = (abs(KinematicState.TRmotor_spd) + abs(KinematicState.DLmotor_spd)) / 2;
 8004942:	4b38      	ldr	r3, [pc, #224]	@ (8004a24 <_ZN14movementSystem4moveEfff+0x3b8>)
 8004944:	edd3 7a04 	vldr	s15, [r3, #16]
 8004948:	eeb0 0a67 	vmov.f32	s0, s15
 800494c:	f7fc fb58 	bl	8001000 <_ZSt3absf>
 8004950:	eeb0 8a40 	vmov.f32	s16, s0
 8004954:	4b33      	ldr	r3, [pc, #204]	@ (8004a24 <_ZN14movementSystem4moveEfff+0x3b8>)
 8004956:	edd3 7a05 	vldr	s15, [r3, #20]
 800495a:	eeb0 0a67 	vmov.f32	s0, s15
 800495e:	f7fc fb4f 	bl	8001000 <_ZSt3absf>
 8004962:	eef0 7a40 	vmov.f32	s15, s0
 8004966:	ee38 7a27 	vadd.f32	s14, s16, s15
 800496a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800496e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004972:	edc7 7a3a 	vstr	s15, [r7, #232]	@ 0xe8

	float avgVector1_speedDif = abs(total_TL) - averageVector1_currentspd;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	edd3 7a08 	vldr	s15, [r3, #32]
 800497c:	eeb0 0a67 	vmov.f32	s0, s15
 8004980:	f7fc fb3e 	bl	8001000 <_ZSt3absf>
 8004984:	eeb0 7a40 	vmov.f32	s14, s0
 8004988:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 800498c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004990:	edc7 7a39 	vstr	s15, [r7, #228]	@ 0xe4
	float avgVector2_speedDif = abs(total_TR) - averageVector2_currentspd;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800499a:	eeb0 0a67 	vmov.f32	s0, s15
 800499e:	f7fc fb2f 	bl	8001000 <_ZSt3absf>
 80049a2:	eeb0 7a40 	vmov.f32	s14, s0
 80049a6:	edd7 7a3a 	vldr	s15, [r7, #232]	@ 0xe8
 80049aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049ae:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

	if (avgVector2_speedDif == 0 && avgVector1_speedDif == 0) {
 80049b2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80049b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80049ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049be:	d10e      	bne.n	80049de <_ZN14movementSystem4moveEfff+0x372>
 80049c0:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 80049c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80049c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049cc:	d107      	bne.n	80049de <_ZN14movementSystem4moveEfff+0x372>
		Vector1Adjust = 0;
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
		Vector2Adjust = 0;
 80049d6:	f04f 0300 	mov.w	r3, #0
 80049da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	}
	if (avgVector2_speedDif != 0 && avgVector1_speedDif == 0) {
 80049de:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80049e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80049e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ea:	d043      	beq.n	8004a74 <_ZN14movementSystem4moveEfff+0x408>
 80049ec:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 80049f0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80049f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f8:	d13c      	bne.n	8004a74 <_ZN14movementSystem4moveEfff+0x408>
		Vector2Adjust = (avgVector2_speedDif * speedDif_Gain) * (total_TR < 0 ? -1 : 1);
 80049fa:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 80049fe:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8004a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004a0c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a14:	d524      	bpl.n	8004a60 <_ZN14movementSystem4moveEfff+0x3f4>
 8004a16:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004a1a:	e023      	b.n	8004a64 <_ZN14movementSystem4moveEfff+0x3f8>
 8004a1c:	2000022c 	.word	0x2000022c
 8004a20:	20000244 	.word	0x20000244
 8004a24:	20000200 	.word	0x20000200
 8004a28:	00000000 	.word	0x00000000
 8004a2c:	39980b24 	.word	0x39980b24
 8004a30:	3a3a1f4b 	.word	0x3a3a1f4b
 8004a34:	2000025c 	.word	0x2000025c
 8004a38:	20000274 	.word	0x20000274
 8004a3c:	2000028c 	.word	0x2000028c
 8004a40:	200002a4 	.word	0x200002a4
 8004a44:	200002bc 	.word	0x200002bc
 8004a48:	200002d4 	.word	0x200002d4
 8004a4c:	2000101c 	.word	0x2000101c
 8004a50:	3f8ccccd 	.word	0x3f8ccccd
 8004a54:	4039999a 	.word	0x4039999a
 8004a58:	3e872b02 	.word	0x3e872b02
 8004a5c:	447a0000 	.word	0x447a0000
 8004a60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a68:	edc7 7a41 	vstr	s15, [r7, #260]	@ 0x104
		Vector1Adjust = 0;
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
	}
	if (avgVector2_speedDif == 0 && avgVector1_speedDif != 0) {
 8004a74:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8004a78:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a80:	d121      	bne.n	8004ac6 <_ZN14movementSystem4moveEfff+0x45a>
 8004a82:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8004a86:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a8e:	d01a      	beq.n	8004ac6 <_ZN14movementSystem4moveEfff+0x45a>
		Vector1Adjust = (avgVector1_speedDif * speedDif_Gain) * (total_TL < 0 ? -1 : 1);
 8004a90:	ed97 7a39 	vldr	s14, [r7, #228]	@ 0xe4
 8004a94:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8004a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	ed93 7a08 	vldr	s14, [r3, #32]
 8004aa2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aaa:	d502      	bpl.n	8004ab2 <_ZN14movementSystem4moveEfff+0x446>
 8004aac:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004ab0:	e001      	b.n	8004ab6 <_ZN14movementSystem4moveEfff+0x44a>
 8004ab2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aba:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
		Vector2Adjust = 0;
 8004abe:	f04f 0300 	mov.w	r3, #0
 8004ac2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	}
	if (avgVector1_speedDif != 0 && avgVector2_speedDif != 0) {
 8004ac6:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8004aca:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad2:	f000 80c1 	beq.w	8004c58 <_ZN14movementSystem4moveEfff+0x5ec>
 8004ad6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8004ada:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae2:	f000 80b9 	beq.w	8004c58 <_ZN14movementSystem4moveEfff+0x5ec>
		VectorDif_ratio = avgVector1_speedDif / avgVector2_speedDif;
 8004ae6:	edd7 6a39 	vldr	s13, [r7, #228]	@ 0xe4
 8004aea:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8004aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004af2:	edc7 7a3c 	vstr	s15, [r7, #240]	@ 0xf0

		if ((Vector1Adjust * Vector2Adjust > 0) && (Vector1Adjust > 0)) {
 8004af6:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8004afa:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 8004afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b0a:	dd77      	ble.n	8004bfc <_ZN14movementSystem4moveEfff+0x590>
 8004b0c:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8004b10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b18:	dd70      	ble.n	8004bfc <_ZN14movementSystem4moveEfff+0x590>

			if (avgVector1_speedDif > avgVector2_speedDif) {
 8004b1a:	ed97 7a39 	vldr	s14, [r7, #228]	@ 0xe4
 8004b1e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8004b22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b2a:	dd2e      	ble.n	8004b8a <_ZN14movementSystem4moveEfff+0x51e>

				Vector1Adjust = (Vector2Adjust * VectorDif_ratio) * (total_TL < 0 ? 1 : -1);
 8004b2c:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 8004b30:	edd7 7a3c 	vldr	s15, [r7, #240]	@ 0xf0
 8004b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	ed93 7a08 	vldr	s14, [r3, #32]
 8004b3e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b46:	d502      	bpl.n	8004b4e <_ZN14movementSystem4moveEfff+0x4e2>
 8004b48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b4c:	e001      	b.n	8004b52 <_ZN14movementSystem4moveEfff+0x4e6>
 8004b4e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b56:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
				Vector2Adjust = (avgVector2_speedDif * speedDif_Gain) * (total_TR < 0 ? -1 : 1);
 8004b5a:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8004b5e:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8004b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004b6c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b74:	d502      	bpl.n	8004b7c <_ZN14movementSystem4moveEfff+0x510>
 8004b76:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004b7a:	e001      	b.n	8004b80 <_ZN14movementSystem4moveEfff+0x514>
 8004b7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b84:	edc7 7a41 	vstr	s15, [r7, #260]	@ 0x104
			if (avgVector1_speedDif > avgVector2_speedDif) {
 8004b88:	e066      	b.n	8004c58 <_ZN14movementSystem4moveEfff+0x5ec>
			} else if (avgVector2_speedDif > avgVector1_speedDif) {
 8004b8a:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8004b8e:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8004b92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b9a:	dc00      	bgt.n	8004b9e <_ZN14movementSystem4moveEfff+0x532>
			if (avgVector1_speedDif > avgVector2_speedDif) {
 8004b9c:	e05c      	b.n	8004c58 <_ZN14movementSystem4moveEfff+0x5ec>

				Vector1Adjust = (Vector2Adjust * VectorDif_ratio) * (total_TL < 0 ? -1 : 1);
 8004b9e:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 8004ba2:	edd7 7a3c 	vldr	s15, [r7, #240]	@ 0xf0
 8004ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	ed93 7a08 	vldr	s14, [r3, #32]
 8004bb0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb8:	d502      	bpl.n	8004bc0 <_ZN14movementSystem4moveEfff+0x554>
 8004bba:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004bbe:	e001      	b.n	8004bc4 <_ZN14movementSystem4moveEfff+0x558>
 8004bc0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc8:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
				Vector2Adjust = (avgVector2_speedDif * speedDif_Gain) * (total_TR < 0 ? 1 : -1);
 8004bcc:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8004bd0:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8004bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004bde:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be6:	d502      	bpl.n	8004bee <_ZN14movementSystem4moveEfff+0x582>
 8004be8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bec:	e001      	b.n	8004bf2 <_ZN14movementSystem4moveEfff+0x586>
 8004bee:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bf6:	edc7 7a41 	vstr	s15, [r7, #260]	@ 0x104
			if (avgVector1_speedDif > avgVector2_speedDif) {
 8004bfa:	e02d      	b.n	8004c58 <_ZN14movementSystem4moveEfff+0x5ec>
			}
		} else {
			Vector2Adjust = (avgVector2_speedDif * speedDif_Gain) * (total_TR < 0 ? -1 : 1);
 8004bfc:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8004c00:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8004c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004c0e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c16:	d502      	bpl.n	8004c1e <_ZN14movementSystem4moveEfff+0x5b2>
 8004c18:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004c1c:	e001      	b.n	8004c22 <_ZN14movementSystem4moveEfff+0x5b6>
 8004c1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c26:	edc7 7a41 	vstr	s15, [r7, #260]	@ 0x104
			Vector1Adjust = (Vector2Adjust * VectorDif_ratio) * (total_TL < 0 ? -1 : 1);
 8004c2a:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 8004c2e:	edd7 7a3c 	vldr	s15, [r7, #240]	@ 0xf0
 8004c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	ed93 7a08 	vldr	s14, [r3, #32]
 8004c3c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c44:	d502      	bpl.n	8004c4c <_ZN14movementSystem4moveEfff+0x5e0>
 8004c46:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004c4a:	e001      	b.n	8004c50 <_ZN14movementSystem4moveEfff+0x5e4>
 8004c4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c54:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
		}
	}

	float maxSpeed = fmaxf(fabsf(total_TL), fmaxf(fabsf(total_TR), fmaxf(fabsf(total_DL), fabsf(total_DR))));
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	edd3 7a08 	vldr	s15, [r3, #32]
 8004c5e:	eeb0 8ae7 	vabs.f32	s16, s15
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004c68:	eef0 8ae7 	vabs.f32	s17, s15
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004c72:	eeb0 7ae7 	vabs.f32	s14, s15
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004c7c:	eef0 7ae7 	vabs.f32	s15, s15
 8004c80:	eef0 0a67 	vmov.f32	s1, s15
 8004c84:	eeb0 0a47 	vmov.f32	s0, s14
 8004c88:	f005 fc00 	bl	800a48c <fmaxf>
 8004c8c:	eef0 7a40 	vmov.f32	s15, s0
 8004c90:	eef0 0a67 	vmov.f32	s1, s15
 8004c94:	eeb0 0a68 	vmov.f32	s0, s17
 8004c98:	f005 fbf8 	bl	800a48c <fmaxf>
 8004c9c:	eef0 7a40 	vmov.f32	s15, s0
 8004ca0:	eef0 0a67 	vmov.f32	s1, s15
 8004ca4:	eeb0 0a48 	vmov.f32	s0, s16
 8004ca8:	f005 fbf0 	bl	800a48c <fmaxf>
 8004cac:	ed87 0a37 	vstr	s0, [r7, #220]	@ 0xdc
	if (maxSpeed > 1000.0f) {
 8004cb0:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8004cb4:	ed1f 7a97 	vldr	s14, [pc, #-604]	@ 8004a5c <_ZN14movementSystem4moveEfff+0x3f0>
 8004cb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc0:	dd2f      	ble.n	8004d22 <_ZN14movementSystem4moveEfff+0x6b6>
		float scale = 1000.0f / maxSpeed;
 8004cc2:	ed5f 6a9a 	vldr	s13, [pc, #-616]	@ 8004a5c <_ZN14movementSystem4moveEfff+0x3f0>
 8004cc6:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8004cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cce:	edc7 7a36 	vstr	s15, [r7, #216]	@ 0xd8
		total_TL *= scale;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	ed93 7a08 	vldr	s14, [r3, #32]
 8004cd8:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 8004cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	edc3 7a08 	vstr	s15, [r3, #32]
		total_TR *= scale;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004cec:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 8004cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		total_DL *= scale;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004d00:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 8004d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		total_DR *= scale;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8004d14:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 8004d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}
	float TL_DR_Dif = abs(KinematicState.TLmotor_spd) - abs(KinematicState.DRmotor_spd);
 8004d22:	4bc0      	ldr	r3, [pc, #768]	@ (8005024 <_ZN14movementSystem4moveEfff+0x9b8>)
 8004d24:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d28:	eeb0 0a67 	vmov.f32	s0, s15
 8004d2c:	f7fc f968 	bl	8001000 <_ZSt3absf>
 8004d30:	eeb0 8a40 	vmov.f32	s16, s0
 8004d34:	4bbb      	ldr	r3, [pc, #748]	@ (8005024 <_ZN14movementSystem4moveEfff+0x9b8>)
 8004d36:	edd3 7a06 	vldr	s15, [r3, #24]
 8004d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8004d3e:	f7fc f95f 	bl	8001000 <_ZSt3absf>
 8004d42:	eef0 7a40 	vmov.f32	s15, s0
 8004d46:	ee78 7a67 	vsub.f32	s15, s16, s15
 8004d4a:	edc7 7a35 	vstr	s15, [r7, #212]	@ 0xd4
	float TR_DL_Dif = abs(KinematicState.TRmotor_spd) - abs(KinematicState.DLmotor_spd);
 8004d4e:	4bb5      	ldr	r3, [pc, #724]	@ (8005024 <_ZN14movementSystem4moveEfff+0x9b8>)
 8004d50:	edd3 7a04 	vldr	s15, [r3, #16]
 8004d54:	eeb0 0a67 	vmov.f32	s0, s15
 8004d58:	f7fc f952 	bl	8001000 <_ZSt3absf>
 8004d5c:	eeb0 8a40 	vmov.f32	s16, s0
 8004d60:	4bb0      	ldr	r3, [pc, #704]	@ (8005024 <_ZN14movementSystem4moveEfff+0x9b8>)
 8004d62:	edd3 7a05 	vldr	s15, [r3, #20]
 8004d66:	eeb0 0a67 	vmov.f32	s0, s15
 8004d6a:	f7fc f949 	bl	8001000 <_ZSt3absf>
 8004d6e:	eef0 7a40 	vmov.f32	s15, s0
 8004d72:	ee78 7a67 	vsub.f32	s15, s16, s15
 8004d76:	edc7 7a34 	vstr	s15, [r7, #208]	@ 0xd0

	PairMotorTLDR_sync.update(0, -TL_DR_Dif, 0, 0.28, 0.27, 0, 50); // kp = 0.48, kd = 0.4
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8004d80:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8004d84:	eef1 7a67 	vneg.f32	s15, s15
 8004d88:	2132      	movs	r1, #50	@ 0x32
 8004d8a:	eddf 2aa7 	vldr	s5, [pc, #668]	@ 8005028 <_ZN14movementSystem4moveEfff+0x9bc>
 8004d8e:	ed9f 2aa7 	vldr	s4, [pc, #668]	@ 800502c <_ZN14movementSystem4moveEfff+0x9c0>
 8004d92:	eddf 1aa7 	vldr	s3, [pc, #668]	@ 8005030 <_ZN14movementSystem4moveEfff+0x9c4>
 8004d96:	ed9f 1aa4 	vldr	s2, [pc, #656]	@ 8005028 <_ZN14movementSystem4moveEfff+0x9bc>
 8004d9a:	eef0 0a67 	vmov.f32	s1, s15
 8004d9e:	ed9f 0aa2 	vldr	s0, [pc, #648]	@ 8005028 <_ZN14movementSystem4moveEfff+0x9bc>
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fc f952 	bl	800104c <_ZN13PIDController6updateEffffffm>
	PairMotorTRDL_sync.update(0, -TR_DL_Dif, 0, 0.28, 0.27, 0, 50);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f503 7359 	add.w	r3, r3, #868	@ 0x364
 8004dae:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 8004db2:	eef1 7a67 	vneg.f32	s15, s15
 8004db6:	2132      	movs	r1, #50	@ 0x32
 8004db8:	eddf 2a9b 	vldr	s5, [pc, #620]	@ 8005028 <_ZN14movementSystem4moveEfff+0x9bc>
 8004dbc:	ed9f 2a9b 	vldr	s4, [pc, #620]	@ 800502c <_ZN14movementSystem4moveEfff+0x9c0>
 8004dc0:	eddf 1a9b 	vldr	s3, [pc, #620]	@ 8005030 <_ZN14movementSystem4moveEfff+0x9c4>
 8004dc4:	ed9f 1a98 	vldr	s2, [pc, #608]	@ 8005028 <_ZN14movementSystem4moveEfff+0x9bc>
 8004dc8:	eef0 0a67 	vmov.f32	s1, s15
 8004dcc:	ed9f 0a96 	vldr	s0, [pc, #600]	@ 8005028 <_ZN14movementSystem4moveEfff+0x9bc>
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7fc f93b 	bl	800104c <_ZN13PIDController6updateEffffffm>

	float TL_DR_adjust = PairMotorTLDR_sync.Adjustment_output * (total_TL < 0 ? -1 : 1); // 0.385
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	edd3 7ad6 	vldr	s15, [r3, #856]	@ 0x358
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	ed93 7a08 	vldr	s14, [r3, #32]
 8004de2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dea:	d502      	bpl.n	8004df2 <_ZN14movementSystem4moveEfff+0x786>
 8004dec:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004df0:	e001      	b.n	8004df6 <_ZN14movementSystem4moveEfff+0x78a>
 8004df2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dfa:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc
	float TR_DL_adjust = PairMotorTRDL_sync.Adjustment_output * (total_TR < 0 ? -1 : 1);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	edd3 7ad9 	vldr	s15, [r3, #868]	@ 0x364
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004e0a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e12:	d502      	bpl.n	8004e1a <_ZN14movementSystem4moveEfff+0x7ae>
 8004e14:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004e18:	e001      	b.n	8004e1e <_ZN14movementSystem4moveEfff+0x7b2>
 8004e1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e22:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

	if (abs(IMU.HeaderAngleError) >= 4) {
 8004e26:	4b83      	ldr	r3, [pc, #524]	@ (8005034 <_ZN14movementSystem4moveEfff+0x9c8>)
 8004e28:	edd3 7a06 	vldr	s15, [r3, #24]
 8004e2c:	eeb0 0a67 	vmov.f32	s0, s15
 8004e30:	f7fc f8e6 	bl	8001000 <_ZSt3absf>
 8004e34:	eef0 7a40 	vmov.f32	s15, s0
 8004e38:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8004e3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e44:	bfac      	ite	ge
 8004e46:	2301      	movge	r3, #1
 8004e48:	2300      	movlt	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00f      	beq.n	8004e70 <_ZN14movementSystem4moveEfff+0x804>
		TL_DR_adjust = 0;
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
		TR_DL_adjust = 0;
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
		Vector2Adjust = 0;
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
		Vector1Adjust = 0;
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
	}

	TLmotor.posoffset = 20;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4a71      	ldr	r2, [pc, #452]	@ (8005038 <_ZN14movementSystem4moveEfff+0x9cc>)
 8004e74:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	TRmotor.posoffset = 20;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4a6f      	ldr	r2, [pc, #444]	@ (8005038 <_ZN14movementSystem4moveEfff+0x9cc>)
 8004e7c:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
	DLmotor.posoffset = 20;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4a6d      	ldr	r2, [pc, #436]	@ (8005038 <_ZN14movementSystem4moveEfff+0x9cc>)
 8004e84:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
	DRmotor.posoffset = 65;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4a6c      	ldr	r2, [pc, #432]	@ (800503c <_ZN14movementSystem4moveEfff+0x9d0>)
 8004e8c:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314

	TLmotor.negoffset = 14;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4a6b      	ldr	r2, [pc, #428]	@ (8005040 <_ZN14movementSystem4moveEfff+0x9d4>)
 8004e94:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	TRmotor.negoffset = 14;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4a69      	ldr	r2, [pc, #420]	@ (8005040 <_ZN14movementSystem4moveEfff+0x9d4>)
 8004e9c:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
	DLmotor.negoffset = 14;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4a67      	ldr	r2, [pc, #412]	@ (8005040 <_ZN14movementSystem4moveEfff+0x9d4>)
 8004ea4:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
	DRmotor.negoffset = 55;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4a66      	ldr	r2, [pc, #408]	@ (8005044 <_ZN14movementSystem4moveEfff+0x9d8>)
 8004eac:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
	//TR_DL_adjust = 0;

	//Vector1Adjust = 0;
	//Vector2Adjust = 0;

	if (inputXspeed == 0 && inputYspeed == 0) {
 8004eb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eb4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004eb8:	edd3 7a00 	vldr	s15, [r3]
 8004ebc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec4:	d135      	bne.n	8004f32 <_ZN14movementSystem4moveEfff+0x8c6>
 8004ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ece:	edd3 7a00 	vldr	s15, [r3]
 8004ed2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eda:	d12a      	bne.n	8004f32 <_ZN14movementSystem4moveEfff+0x8c6>
		TLmotor.spin(0, 0, 0);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	333c      	adds	r3, #60	@ 0x3c
 8004ee0:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8005028 <_ZN14movementSystem4moveEfff+0x9bc>
 8004ee4:	ed9f 0a50 	vldr	s0, [pc, #320]	@ 8005028 <_ZN14movementSystem4moveEfff+0x9bc>
 8004ee8:	2100      	movs	r1, #0
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff f958 	bl	80041a0 <_ZN12motorControl4spinEsff>
		TRmotor.spin(0, 0, 0);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	33f4      	adds	r3, #244	@ 0xf4
 8004ef4:	eddf 0a4c 	vldr	s1, [pc, #304]	@ 8005028 <_ZN14movementSystem4moveEfff+0x9bc>
 8004ef8:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 8005028 <_ZN14movementSystem4moveEfff+0x9bc>
 8004efc:	2100      	movs	r1, #0
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7ff f94e 	bl	80041a0 <_ZN12motorControl4spinEsff>
		DLmotor.spin(0, 0, 0);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 8004f0a:	eddf 0a47 	vldr	s1, [pc, #284]	@ 8005028 <_ZN14movementSystem4moveEfff+0x9bc>
 8004f0e:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 8005028 <_ZN14movementSystem4moveEfff+0x9bc>
 8004f12:	2100      	movs	r1, #0
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7ff f943 	bl	80041a0 <_ZN12motorControl4spinEsff>
		DRmotor.spin(0, 0, 0);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004f20:	eddf 0a41 	vldr	s1, [pc, #260]	@ 8005028 <_ZN14movementSystem4moveEfff+0x9bc>
 8004f24:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8005028 <_ZN14movementSystem4moveEfff+0x9bc>
 8004f28:	2100      	movs	r1, #0
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff f938 	bl	80041a0 <_ZN12motorControl4spinEsff>
 8004f30:	e070      	b.n	8005014 <_ZN14movementSystem4moveEfff+0x9a8>
	} else {
		TLmotor.drive((total_TL + Vector1Adjust) - TL_DR_adjust, KinematicState.TLmotor_spd, 1, 1);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	ed93 7a08 	vldr	s14, [r3, #32]
 8004f3e:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8004f42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f46:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8004f4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f4e:	4b35      	ldr	r3, [pc, #212]	@ (8005024 <_ZN14movementSystem4moveEfff+0x9b8>)
 8004f50:	ed93 7a03 	vldr	s14, [r3, #12]
 8004f54:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8004f58:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8004f5c:	eef0 0a47 	vmov.f32	s1, s14
 8004f60:	eeb0 0a67 	vmov.f32	s0, s15
 8004f64:	4610      	mov	r0, r2
 8004f66:	f7ff f96f 	bl	8004248 <_ZN12motorControl5driveEffff>
		TRmotor.drive((total_TR + Vector2Adjust) - TR_DL_adjust, KinematicState.TRmotor_spd, 1, 1);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f103 02f4 	add.w	r2, r3, #244	@ 0xf4
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004f76:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 8004f7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f7e:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 8004f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f86:	4b27      	ldr	r3, [pc, #156]	@ (8005024 <_ZN14movementSystem4moveEfff+0x9b8>)
 8004f88:	ed93 7a04 	vldr	s14, [r3, #16]
 8004f8c:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8004f90:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8004f94:	eef0 0a47 	vmov.f32	s1, s14
 8004f98:	eeb0 0a67 	vmov.f32	s0, s15
 8004f9c:	4610      	mov	r0, r2
 8004f9e:	f7ff f953 	bl	8004248 <_ZN12motorControl5driveEffff>
		DLmotor.drive((total_DL + Vector2Adjust) + TR_DL_adjust, KinematicState.DLmotor_spd, 1, 1);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f503 72d6 	add.w	r2, r3, #428	@ 0x1ac
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004fae:	edd7 7a41 	vldr	s15, [r7, #260]	@ 0x104
 8004fb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004fb6:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 8004fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fbe:	4b19      	ldr	r3, [pc, #100]	@ (8005024 <_ZN14movementSystem4moveEfff+0x9b8>)
 8004fc0:	ed93 7a05 	vldr	s14, [r3, #20]
 8004fc4:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8004fc8:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8004fcc:	eef0 0a47 	vmov.f32	s1, s14
 8004fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	f7ff f937 	bl	8004248 <_ZN12motorControl5driveEffff>
		DRmotor.drive((total_DR + Vector1Adjust) + TL_DR_adjust, KinematicState.DRmotor_spd, 0.6, 0.6);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f503 7219 	add.w	r2, r3, #612	@ 0x264
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8004fe6:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8004fea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004fee:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8004ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8005024 <_ZN14movementSystem4moveEfff+0x9b8>)
 8004ff8:	ed93 7a06 	vldr	s14, [r3, #24]
 8004ffc:	eddf 1a12 	vldr	s3, [pc, #72]	@ 8005048 <_ZN14movementSystem4moveEfff+0x9dc>
 8005000:	ed9f 1a11 	vldr	s2, [pc, #68]	@ 8005048 <_ZN14movementSystem4moveEfff+0x9dc>
 8005004:	eef0 0a47 	vmov.f32	s1, s14
 8005008:	eeb0 0a67 	vmov.f32	s0, s15
 800500c:	4610      	mov	r0, r2
 800500e:	f7ff f91b 	bl	8004248 <_ZN12motorControl5driveEffff>
	}

}
 8005012:	bf00      	nop
 8005014:	bf00      	nop
 8005016:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 800501a:	46bd      	mov	sp, r7
 800501c:	ecbd 8b02 	vpop	{d8}
 8005020:	bd90      	pop	{r4, r7, pc}
 8005022:	bf00      	nop
 8005024:	20000200 	.word	0x20000200
 8005028:	00000000 	.word	0x00000000
 800502c:	3e8a3d71 	.word	0x3e8a3d71
 8005030:	3e8f5c29 	.word	0x3e8f5c29
 8005034:	2000101c 	.word	0x2000101c
 8005038:	41a00000 	.word	0x41a00000
 800503c:	42820000 	.word	0x42820000
 8005040:	41600000 	.word	0x41600000
 8005044:	425c0000 	.word	0x425c0000
 8005048:	3f19999a 	.word	0x3f19999a

0800504c <_ZN12LocalizationC1Ef>:
#include "Localization.h"

Localization::Localization(float overdriftThreshold) {
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	ed87 0a00 	vstr	s0, [r7]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f04f 0200 	mov.w	r2, #0
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	605a      	str	r2, [r3, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f04f 0200 	mov.w	r2, #0
 800506e:	609a      	str	r2, [r3, #8]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	60da      	str	r2, [r3, #12]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f04f 0200 	mov.w	r2, #0
 800507e:	611a      	str	r2, [r3, #16]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	615a      	str	r2, [r3, #20]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f04f 0200 	mov.w	r2, #0
 800508e:	619a      	str	r2, [r3, #24]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f04f 0200 	mov.w	r2, #0
 8005096:	61da      	str	r2, [r3, #28]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f04f 0200 	mov.w	r2, #0
 800509e:	621a      	str	r2, [r3, #32]
	overdrift_threshold = overdriftThreshold;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	615a      	str	r2, [r3, #20]
}
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4618      	mov	r0, r3
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <_ZN9fieldDataC1Ev>:
#include "fieldData.h"

fieldData::fieldData() {
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
}
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4618      	mov	r0, r3
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
	...

080050cc <_ZN6AS5600C1EP17I2C_HandleTypeDeff>:
#include "AS5600.h"

AS5600::AS5600(I2C_HandleTypeDef *hi2c, float wheelCircumference) {
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	809a      	strh	r2, [r3, #4]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	609a      	str	r2, [r3, #8]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	611a      	str	r2, [r3, #16]
	this->hi2c = hi2c;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	601a      	str	r2, [r3, #0]
	this->wheel_circumference = wheelCircumference;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	60da      	str	r2, [r3, #12]
	lastTime = SystemTimer.getMicroseconds();
 80050fa:	4809      	ldr	r0, [pc, #36]	@ (8005120 <_ZN6AS5600C1EP17I2C_HandleTypeDeff+0x54>)
 80050fc:	f7fc fb5c 	bl	80017b8 <_ZNK5Timer15getMicrosecondsEv>
 8005100:	4602      	mov	r2, r0
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	611a      	str	r2, [r3, #16]
	lastAngle = 0;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	809a      	strh	r2, [r3, #4]
	angularVelocity = 0.0f;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f04f 0200 	mov.w	r2, #0
 8005112:	609a      	str	r2, [r3, #8]
}
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	200001f4 	.word	0x200001f4

08005124 <_ZN6BNO055C1Ev>:
#include "BNO055.h"

// Constructor
BNO055::BNO055() {
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f04f 0200 	mov.w	r2, #0
 8005132:	601a      	str	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f04f 0200 	mov.w	r2, #0
 800513a:	605a      	str	r2, [r3, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f04f 0200 	mov.w	r2, #0
 8005142:	609a      	str	r2, [r3, #8]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f04f 0200 	mov.w	r2, #0
 800514a:	60da      	str	r2, [r3, #12]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	611a      	str	r2, [r3, #16]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	615a      	str	r2, [r3, #20]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f04f 0200 	mov.w	r2, #0
 8005162:	619a      	str	r2, [r3, #24]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	771a      	strb	r2, [r3, #28]
}
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4618      	mov	r0, r3
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <_ZN6BNO05513writeRegisterEhh>:

// Write to a register
void BNO055::writeRegister(uint8_t reg, uint8_t value) {
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af02      	add	r7, sp, #8
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	460b      	mov	r3, r1
 8005182:	70fb      	strb	r3, [r7, #3]
 8005184:	4613      	mov	r3, r2
 8005186:	70bb      	strb	r3, [r7, #2]
	uint8_t data[2] = { reg, value };
 8005188:	78fb      	ldrb	r3, [r7, #3]
 800518a:	733b      	strb	r3, [r7, #12]
 800518c:	78bb      	ldrb	r3, [r7, #2]
 800518e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, BNO055_ADDRESS, data, 2, HAL_MAX_DELAY);
 8005190:	f107 020c 	add.w	r2, r7, #12
 8005194:	f04f 33ff 	mov.w	r3, #4294967295
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	2302      	movs	r3, #2
 800519c:	2152      	movs	r1, #82	@ 0x52
 800519e:	4805      	ldr	r0, [pc, #20]	@ (80051b4 <_ZN6BNO05513writeRegisterEhh+0x3c>)
 80051a0:	f001 fd0e 	bl	8006bc0 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80051a4:	200a      	movs	r0, #10
 80051a6:	f001 f831 	bl	800620c <HAL_Delay>
}
 80051aa:	bf00      	nop
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	2000183c 	.word	0x2000183c

080051b8 <_ZN6BNO05512readRegisterEhPhh>:

// Read from a register
void BNO055::readRegister(uint8_t reg, uint8_t *buffer, uint8_t len) {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b088      	sub	sp, #32
 80051bc:	af04      	add	r7, sp, #16
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	607a      	str	r2, [r7, #4]
 80051c2:	461a      	mov	r2, r3
 80051c4:	460b      	mov	r3, r1
 80051c6:	72fb      	strb	r3, [r7, #11]
 80051c8:	4613      	mov	r3, r2
 80051ca:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Mem_Read(&hi2c1, BNO055_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, buffer, len, HAL_MAX_DELAY);
 80051cc:	7afb      	ldrb	r3, [r7, #11]
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	7abb      	ldrb	r3, [r7, #10]
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	f04f 31ff 	mov.w	r1, #4294967295
 80051d8:	9102      	str	r1, [sp, #8]
 80051da:	9301      	str	r3, [sp, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	2301      	movs	r3, #1
 80051e2:	2152      	movs	r1, #82	@ 0x52
 80051e4:	4803      	ldr	r0, [pc, #12]	@ (80051f4 <_ZN6BNO05512readRegisterEhPhh+0x3c>)
 80051e6:	f001 fde9 	bl	8006dbc <HAL_I2C_Mem_Read>
}
 80051ea:	bf00      	nop
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	2000183c 	.word	0x2000183c

080051f8 <_ZN6BNO0554initEv>:

// Initialize the sensor
void BNO055::init() {
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
	// Step 1: Soft reset
	writeRegister(0x3F, 0x20); // SYS_TRIGGER: Reset
 8005200:	2220      	movs	r2, #32
 8005202:	213f      	movs	r1, #63	@ 0x3f
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f7ff ffb7 	bl	8005178 <_ZN6BNO05513writeRegisterEhh>
	HAL_Delay(650);            // Delay >650ms after reset
 800520a:	f240 208a 	movw	r0, #650	@ 0x28a
 800520e:	f000 fffd 	bl	800620c <HAL_Delay>

	// Step 2: Check chip ID (optional but helpful)
	uint8_t id = 0;
 8005212:	2300      	movs	r3, #0
 8005214:	73fb      	strb	r3, [r7, #15]
	readRegister(0x00, &id, 1); // CHIP_ID
 8005216:	f107 020f 	add.w	r2, r7, #15
 800521a:	2301      	movs	r3, #1
 800521c:	2100      	movs	r1, #0
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7ff ffca 	bl	80051b8 <_ZN6BNO05512readRegisterEhPhh>
	if (id != 0xA0) {
		// Retry logic or error handling here
	}

	// Step 3: Set to config mode
	writeRegister(BNO055_OPR_MODE, BNO055_CONFIG_MODE);
 8005224:	2200      	movs	r2, #0
 8005226:	213d      	movs	r1, #61	@ 0x3d
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f7ff ffa5 	bl	8005178 <_ZN6BNO05513writeRegisterEhh>
	HAL_Delay(25);
 800522e:	2019      	movs	r0, #25
 8005230:	f000 ffec 	bl	800620c <HAL_Delay>

	// Step 4: Set power mode to NORMAL (0x00)
	writeRegister(BNO055_PWR_MODE, 0x00);
 8005234:	2200      	movs	r2, #0
 8005236:	213e      	movs	r1, #62	@ 0x3e
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff ff9d 	bl	8005178 <_ZN6BNO05513writeRegisterEhh>
	HAL_Delay(10);
 800523e:	200a      	movs	r0, #10
 8005240:	f000 ffe4 	bl	800620c <HAL_Delay>

	// Step 5: Set units (optional)
	writeRegister(BNO055_UNIT_SEL, 0x01); // Deg + DPS
 8005244:	2201      	movs	r2, #1
 8005246:	213b      	movs	r1, #59	@ 0x3b
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7ff ff95 	bl	8005178 <_ZN6BNO05513writeRegisterEhh>

	// Step 6: Set operation mode to NDOF (0x0C) or IMU (0x08)
	writeRegister(BNO055_OPR_MODE, BNO055_NDOF_MODE); // or BNO055_IMU_MODE
 800524e:	220c      	movs	r2, #12
 8005250:	213d      	movs	r1, #61	@ 0x3d
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7ff ff90 	bl	8005178 <_ZN6BNO05513writeRegisterEhh>
	HAL_Delay(50);
 8005258:	2032      	movs	r0, #50	@ 0x32
 800525a:	f000 ffd7 	bl	800620c <HAL_Delay>
}
 800525e:	bf00      	nop
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <_ZN6BNO0558readGyroEv>:
	readRegister(BNO055_INT_STA, &status, 1);
	return (status & 0x01) || (status & 0x02);  // GYR_INT or ACC_INT
}

// Read gyroscope data
void BNO055::readGyro() {
 8005266:	b580      	push	{r7, lr}
 8005268:	b086      	sub	sp, #24
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
	uint8_t buffer[6];
	readRegister(BNO055_GYR_DATA_X_LSB, buffer, 6);
 800526e:	f107 020c 	add.w	r2, r7, #12
 8005272:	2306      	movs	r3, #6
 8005274:	2114      	movs	r1, #20
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff ff9e 	bl	80051b8 <_ZN6BNO05512readRegisterEhPhh>

	int16_t rawX = (int16_t)((buffer[1] << 8) | buffer[0]);
 800527c:	7b7b      	ldrb	r3, [r7, #13]
 800527e:	b21b      	sxth	r3, r3
 8005280:	021b      	lsls	r3, r3, #8
 8005282:	b21a      	sxth	r2, r3
 8005284:	7b3b      	ldrb	r3, [r7, #12]
 8005286:	b21b      	sxth	r3, r3
 8005288:	4313      	orrs	r3, r2
 800528a:	82fb      	strh	r3, [r7, #22]
	int16_t rawY = (int16_t)((buffer[3] << 8) | buffer[2]);
 800528c:	7bfb      	ldrb	r3, [r7, #15]
 800528e:	b21b      	sxth	r3, r3
 8005290:	021b      	lsls	r3, r3, #8
 8005292:	b21a      	sxth	r2, r3
 8005294:	7bbb      	ldrb	r3, [r7, #14]
 8005296:	b21b      	sxth	r3, r3
 8005298:	4313      	orrs	r3, r2
 800529a:	82bb      	strh	r3, [r7, #20]
	int16_t rawZ = (int16_t)((buffer[5] << 8) | buffer[4]);
 800529c:	7c7b      	ldrb	r3, [r7, #17]
 800529e:	b21b      	sxth	r3, r3
 80052a0:	021b      	lsls	r3, r3, #8
 80052a2:	b21a      	sxth	r2, r3
 80052a4:	7c3b      	ldrb	r3, [r7, #16]
 80052a6:	b21b      	sxth	r3, r3
 80052a8:	4313      	orrs	r3, r2
 80052aa:	827b      	strh	r3, [r7, #18]

	AngularVelocity_Xaxis = rawX / 16.0f;
 80052ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80052b0:	ee07 3a90 	vmov	s15, r3
 80052b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052b8:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80052bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	edc3 7a00 	vstr	s15, [r3]
	AngularVelocity_Yaxis = rawY / 16.0f;
 80052c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80052ca:	ee07 3a90 	vmov	s15, r3
 80052ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052d2:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80052d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	edc3 7a01 	vstr	s15, [r3, #4]
	AngularVelocity_Zaxis = rawZ / 16.0f;
 80052e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80052e4:	ee07 3a90 	vmov	s15, r3
 80052e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052ec:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80052f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80052fa:	bf00      	nop
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <_ZN6BNO05511readCompassEv>:

// Read compass (Euler angles)
void BNO055::readCompass() {
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[6];
	readRegister(BNO055_EUL_DATA_X_LSB, buffer, 6);
 800530c:	f107 020c 	add.w	r2, r7, #12
 8005310:	2306      	movs	r3, #6
 8005312:	211a      	movs	r1, #26
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f7ff ff4f 	bl	80051b8 <_ZN6BNO05512readRegisterEhPhh>

	int16_t rawH = (buffer[1] << 8) | buffer[0];
 800531a:	7b7b      	ldrb	r3, [r7, #13]
 800531c:	b21b      	sxth	r3, r3
 800531e:	021b      	lsls	r3, r3, #8
 8005320:	b21a      	sxth	r2, r3
 8005322:	7b3b      	ldrb	r3, [r7, #12]
 8005324:	b21b      	sxth	r3, r3
 8005326:	4313      	orrs	r3, r2
 8005328:	82fb      	strh	r3, [r7, #22]
	int16_t rawP = (buffer[3] << 8) | buffer[2];
 800532a:	7bfb      	ldrb	r3, [r7, #15]
 800532c:	b21b      	sxth	r3, r3
 800532e:	021b      	lsls	r3, r3, #8
 8005330:	b21a      	sxth	r2, r3
 8005332:	7bbb      	ldrb	r3, [r7, #14]
 8005334:	b21b      	sxth	r3, r3
 8005336:	4313      	orrs	r3, r2
 8005338:	82bb      	strh	r3, [r7, #20]
	int16_t rawR = (buffer[5] << 8) | buffer[4];
 800533a:	7c7b      	ldrb	r3, [r7, #17]
 800533c:	b21b      	sxth	r3, r3
 800533e:	021b      	lsls	r3, r3, #8
 8005340:	b21a      	sxth	r2, r3
 8005342:	7c3b      	ldrb	r3, [r7, #16]
 8005344:	b21b      	sxth	r3, r3
 8005346:	4313      	orrs	r3, r2
 8005348:	827b      	strh	r3, [r7, #18]

	Heading = rawH / 16.0f;
 800534a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800534e:	ee07 3a90 	vmov	s15, r3
 8005352:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005356:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800535a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	edc3 7a03 	vstr	s15, [r3, #12]
	Pitch = rawP / 16.0f;
 8005364:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005368:	ee07 3a90 	vmov	s15, r3
 800536c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005370:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8005374:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	edc3 7a04 	vstr	s15, [r3, #16]
	Roll = rawR / 16.0f;
 800537e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005382:	ee07 3a90 	vmov	s15, r3
 8005386:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800538a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800538e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	edc3 7a05 	vstr	s15, [r3, #20]

	static float HeaderAngle = Heading;
 8005398:	4b1a      	ldr	r3, [pc, #104]	@ (8005404 <_ZN6BNO05511readCompassEv+0x100>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f3bf 8f5b 	dmb	ish
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	bf0c      	ite	eq
 80053a8:	2301      	moveq	r3, #1
 80053aa:	2300      	movne	r3, #0
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d011      	beq.n	80053d6 <_ZN6BNO05511readCompassEv+0xd2>
 80053b2:	4814      	ldr	r0, [pc, #80]	@ (8005404 <_ZN6BNO05511readCompassEv+0x100>)
 80053b4:	f006 fbd0 	bl	800bb58 <__cxa_guard_acquire>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	bf14      	ite	ne
 80053be:	2301      	movne	r3, #1
 80053c0:	2300      	moveq	r3, #0
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d006      	beq.n	80053d6 <_ZN6BNO05511readCompassEv+0xd2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	4a0e      	ldr	r2, [pc, #56]	@ (8005408 <_ZN6BNO05511readCompassEv+0x104>)
 80053ce:	6013      	str	r3, [r2, #0]
 80053d0:	480c      	ldr	r0, [pc, #48]	@ (8005404 <_ZN6BNO05511readCompassEv+0x100>)
 80053d2:	f006 fbcd 	bl	800bb70 <__cxa_guard_release>
	HeaderAngleError = calculateAngleDifference(Heading, HeaderAngle);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80053dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005408 <_ZN6BNO05511readCompassEv+0x104>)
 80053de:	ed93 7a00 	vldr	s14, [r3]
 80053e2:	eef0 0a47 	vmov.f32	s1, s14
 80053e6:	eeb0 0a67 	vmov.f32	s0, s15
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f846 	bl	800547c <_ZN6BNO05524calculateAngleDifferenceEff>
 80053f0:	eef0 7a40 	vmov.f32	s15, s0
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	edc3 7a06 	vstr	s15, [r3, #24]
}
 80053fa:	bf00      	nop
 80053fc:	3718      	adds	r7, #24
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	20001a9c 	.word	0x20001a9c
 8005408:	20001a98 	.word	0x20001a98
 800540c:	00000000 	.word	0x00000000

08005410 <_ZN6BNO05514normalizeAngleEf>:

// Normalize angle to 0–360
float BNO055::normalizeAngle(float angle) {
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	ed87 0a00 	vstr	s0, [r7]
	angle = fmod(angle, 360.0f);
 800541c:	6838      	ldr	r0, [r7, #0]
 800541e:	f7fb f8ab 	bl	8000578 <__aeabi_f2d>
 8005422:	4602      	mov	r2, r0
 8005424:	460b      	mov	r3, r1
 8005426:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 8005470 <_ZN6BNO05514normalizeAngleEf+0x60>
 800542a:	ec43 2b10 	vmov	d0, r2, r3
 800542e:	f004 fe0b 	bl	800a048 <fmod>
 8005432:	ec53 2b10 	vmov	r2, r3, d0
 8005436:	4610      	mov	r0, r2
 8005438:	4619      	mov	r1, r3
 800543a:	f7fb fbc5 	bl	8000bc8 <__aeabi_d2f>
 800543e:	4603      	mov	r3, r0
 8005440:	603b      	str	r3, [r7, #0]
	if (angle < 0) {
 8005442:	edd7 7a00 	vldr	s15, [r7]
 8005446:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800544a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800544e:	d507      	bpl.n	8005460 <_ZN6BNO05514normalizeAngleEf+0x50>
		angle += 360.0f;
 8005450:	edd7 7a00 	vldr	s15, [r7]
 8005454:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8005478 <_ZN6BNO05514normalizeAngleEf+0x68>
 8005458:	ee77 7a87 	vadd.f32	s15, s15, s14
 800545c:	edc7 7a00 	vstr	s15, [r7]
	}
	return angle;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	ee07 3a90 	vmov	s15, r3
}
 8005466:	eeb0 0a67 	vmov.f32	s0, s15
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	00000000 	.word	0x00000000
 8005474:	40768000 	.word	0x40768000
 8005478:	43b40000 	.word	0x43b40000

0800547c <_ZN6BNO05524calculateAngleDifferenceEff>:

// Calculate signed shortest angle difference
float BNO055::calculateAngleDifference(float heading, float headerAngle) {
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	ed87 0a02 	vstr	s0, [r7, #8]
 8005488:	edc7 0a01 	vstr	s1, [r7, #4]
	heading = normalizeAngle(heading);
 800548c:	ed97 0a02 	vldr	s0, [r7, #8]
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f7ff ffbd 	bl	8005410 <_ZN6BNO05514normalizeAngleEf>
 8005496:	ed87 0a02 	vstr	s0, [r7, #8]
	headerAngle = normalizeAngle(headerAngle);
 800549a:	ed97 0a01 	vldr	s0, [r7, #4]
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f7ff ffb6 	bl	8005410 <_ZN6BNO05514normalizeAngleEf>
 80054a4:	ed87 0a01 	vstr	s0, [r7, #4]
	float diff = heading - headerAngle;
 80054a8:	ed97 7a02 	vldr	s14, [r7, #8]
 80054ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80054b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054b4:	edc7 7a05 	vstr	s15, [r7, #20]

	if (diff > 180.0f) {
 80054b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80054bc:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8005510 <_ZN6BNO05524calculateAngleDifferenceEff+0x94>
 80054c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c8:	dd08      	ble.n	80054dc <_ZN6BNO05524calculateAngleDifferenceEff+0x60>
		diff -= 360.0f;
 80054ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80054ce:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8005514 <_ZN6BNO05524calculateAngleDifferenceEff+0x98>
 80054d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80054d6:	edc7 7a05 	vstr	s15, [r7, #20]
 80054da:	e010      	b.n	80054fe <_ZN6BNO05524calculateAngleDifferenceEff+0x82>
	} else if (diff < -180.0f) {
 80054dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80054e0:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8005518 <_ZN6BNO05524calculateAngleDifferenceEff+0x9c>
 80054e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ec:	d507      	bpl.n	80054fe <_ZN6BNO05524calculateAngleDifferenceEff+0x82>
		diff += 360.0f;
 80054ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80054f2:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8005514 <_ZN6BNO05524calculateAngleDifferenceEff+0x98>
 80054f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054fa:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	return diff;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	ee07 3a90 	vmov	s15, r3
}
 8005504:	eeb0 0a67 	vmov.f32	s0, s15
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	43340000 	.word	0x43340000
 8005514:	43b40000 	.word	0x43b40000
 8005518:	c3340000 	.word	0xc3340000

0800551c <_ZN6BNO05510updateDataEv>:

// Public updateData method (calls internal reads if new data ready)
void BNO055::updateData() {
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
	readGyro();
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff fe9e 	bl	8005266 <_ZN6BNO0558readGyroEv>
	readCompass();
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7ff feea 	bl	8005304 <_ZN6BNO05511readCompassEv>
	 readRegister(0x35, &calib, 1);

	 gyroCalibration = (calib >> 4) & 0x03;
	 */

}
 8005530:	bf00      	nop
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <_ZN7EncoderC1EffmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_>:
#include "Encoder.h"

Encoder::Encoder(float Encoder_Circumference, float Encoder_PulsePerRevolution, uint32_t thresholdTimeforCompleteStop, const std::string &PinNumbersPhase1, const std::string &PinNumbersPhase2) :
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6178      	str	r0, [r7, #20]
 8005540:	ed87 0a04 	vstr	s0, [r7, #16]
 8005544:	edc7 0a03 	vstr	s1, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	603b      	str	r3, [r7, #0]
		EncoderCircumference(Encoder_Circumference), EncoderPulsePerRevolution(Encoder_PulsePerRevolution), thresholdTime_forCompleteStop(thresholdTimeforCompleteStop), PinNum1(PinNumbersPhase1), PinNum2(
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	605a      	str	r2, [r3, #4]
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	609a      	str	r2, [r3, #8]
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	330c      	adds	r3, #12
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	4618      	mov	r0, r3
 8005568:	f006 fbb9 	bl	800bcde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	3324      	adds	r3, #36	@ 0x24
 8005570:	6839      	ldr	r1, [r7, #0]
 8005572:	4618      	mov	r0, r3
 8005574:	f006 fbb3 	bl	800bcde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
				PinNumbersPhase2), lastDirection(0) {
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	2200      	movs	r2, #0
 8005584:	641a      	str	r2, [r3, #64]	@ 0x40
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2200      	movs	r2, #0
 800558a:	645a      	str	r2, [r3, #68]	@ 0x44
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	2200      	movs	r2, #0
 8005598:	64da      	str	r2, [r3, #76]	@ 0x4c
 800559a:	6979      	ldr	r1, [r7, #20]
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	f04f 0300 	mov.w	r3, #0
 80055a4:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
}
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	4618      	mov	r0, r3
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
	...

080055b4 <_ZN7Encoder10EncoderISREtt>:

	checkDirection();  // Updates lastDirection if needed
	return speed * lastDirection;
}

void Encoder::EncoderISR(uint16_t TriggerPin, uint16_t interruptPin) {
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	807b      	strh	r3, [r7, #2]
 80055c0:	4613      	mov	r3, r2
 80055c2:	803b      	strh	r3, [r7, #0]
	if (TriggerPin == interruptPin) {
 80055c4:	887a      	ldrh	r2, [r7, #2]
 80055c6:	883b      	ldrh	r3, [r7, #0]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d134      	bne.n	8005636 <_ZN7Encoder10EncoderISREtt+0x82>
		uint32_t us_timer = SystemTimer.getMicroseconds();
 80055cc:	481c      	ldr	r0, [pc, #112]	@ (8005640 <_ZN7Encoder10EncoderISREtt+0x8c>)
 80055ce:	f7fc f8f3 	bl	80017b8 <_ZNK5Timer15getMicrosecondsEv>
 80055d2:	60f8      	str	r0, [r7, #12]
		ElapseTime = (uint32_t) (us_timer - Last_time);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	1ad2      	subs	r2, r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	645a      	str	r2, [r3, #68]	@ 0x44
		if (ElapseTime == 0) {
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	bf0c      	ite	eq
 80055e8:	2301      	moveq	r3, #1
 80055ea:	2300      	movne	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d002      	beq.n	80055f8 <_ZN7Encoder10EncoderISREtt+0x44>
			ElapseTime = 1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		Last_time = us_timer;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	641a      	str	r2, [r3, #64]	@ 0x40
		Last_time_ms = SystemTimer.getMilliseconds();
 80055fe:	4810      	ldr	r0, [pc, #64]	@ (8005640 <_ZN7Encoder10EncoderISREtt+0x8c>)
 8005600:	f7fc f8f8 	bl	80017f4 <_ZN5Timer15getMillisecondsEv>
 8005604:	4602      	mov	r2, r0
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	64da      	str	r2, [r3, #76]	@ 0x4c
		if (digitalRead(PinNum2) == true) {
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	3324      	adds	r3, #36	@ 0x24
 800560e:	4618      	mov	r0, r3
 8005610:	f7fb fed8 	bl	80013c4 <_Z11digitalReadRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8005614:	4603      	mov	r3, r0
 8005616:	2b01      	cmp	r3, #1
 8005618:	bf0c      	ite	eq
 800561a:	2301      	moveq	r3, #1
 800561c:	2300      	movne	r3, #0
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	d004      	beq.n	800562e <_ZN7Encoder10EncoderISREtt+0x7a>
			DirectionCheck = 1;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		} else {
			DirectionCheck = -1; //  recently -1
		}
	}
}
 800562c:	e003      	b.n	8005636 <_ZN7Encoder10EncoderISREtt+0x82>
			DirectionCheck = -1; //  recently -1
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	22ff      	movs	r2, #255	@ 0xff
 8005632:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
}
 8005636:	bf00      	nop
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	200001f4 	.word	0x200001f4
 8005644:	00000000 	.word	0x00000000

08005648 <_ZN7Encoder11getSpeed_ITEv>:
double Encoder::getSpeed_IT() {
 8005648:	b5b0      	push	{r4, r5, r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
	if (SystemTimer.getMilliseconds() - Last_time_ms >= thresholdTime_forCompleteStop) {
 8005650:	483f      	ldr	r0, [pc, #252]	@ (8005750 <_ZN7Encoder11getSpeed_ITEv+0x108>)
 8005652:	f7fc f8cf 	bl	80017f4 <_ZN5Timer15getMillisecondsEv>
 8005656:	4602      	mov	r2, r0
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800565c:	1ad2      	subs	r2, r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	429a      	cmp	r2, r3
 8005664:	bf2c      	ite	cs
 8005666:	2301      	movcs	r3, #1
 8005668:	2300      	movcc	r3, #0
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <_ZN7Encoder11getSpeed_ITEv+0x30>
		DirectionCheck = 0;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	}
	if ((ElapseTime * EncoderPulsePerRevolution) == 0) {
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567c:	ee07 3a90 	vmov	s15, r3
 8005680:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	edd3 7a01 	vldr	s15, [r3, #4]
 800568a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800568e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005696:	bf0c      	ite	eq
 8005698:	2301      	moveq	r3, #1
 800569a:	2300      	movne	r3, #0
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <_ZN7Encoder11getSpeed_ITEv+0x60>
		ElapseTime = 1;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	645a      	str	r2, [r3, #68]	@ 0x44
	}
	speed = ((1.0 / (ElapseTime * EncoderPulsePerRevolution)) * EncoderCircumference * 1e6) * DirectionCheck;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ac:	ee07 3a90 	vmov	s15, r3
 80056b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80056ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056be:	ee17 0a90 	vmov	r0, s15
 80056c2:	f7fa ff59 	bl	8000578 <__aeabi_f2d>
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	f04f 0000 	mov.w	r0, #0
 80056ce:	4921      	ldr	r1, [pc, #132]	@ (8005754 <_ZN7Encoder11getSpeed_ITEv+0x10c>)
 80056d0:	f7fb f8d4 	bl	800087c <__aeabi_ddiv>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4614      	mov	r4, r2
 80056da:	461d      	mov	r5, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7fa ff49 	bl	8000578 <__aeabi_f2d>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	4620      	mov	r0, r4
 80056ec:	4629      	mov	r1, r5
 80056ee:	f7fa ff9b 	bl	8000628 <__aeabi_dmul>
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	4610      	mov	r0, r2
 80056f8:	4619      	mov	r1, r3
 80056fa:	a313      	add	r3, pc, #76	@ (adr r3, 8005748 <_ZN7Encoder11getSpeed_ITEv+0x100>)
 80056fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005700:	f7fa ff92 	bl	8000628 <__aeabi_dmul>
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	4614      	mov	r4, r2
 800570a:	461d      	mov	r5, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005712:	b25b      	sxtb	r3, r3
 8005714:	4618      	mov	r0, r3
 8005716:	f7fa ff1d 	bl	8000554 <__aeabi_i2d>
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	4620      	mov	r0, r4
 8005720:	4629      	mov	r1, r5
 8005722:	f7fa ff81 	bl	8000628 <__aeabi_dmul>
 8005726:	4602      	mov	r2, r0
 8005728:	460b      	mov	r3, r1
 800572a:	6879      	ldr	r1, [r7, #4]
 800572c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	return speed;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8005736:	ec43 2b17 	vmov	d7, r2, r3
	//return ((1 / EncoderPulsePerRevolution) / ElapseTime) * 1e6 * 60;

}
 800573a:	eeb0 0a47 	vmov.f32	s0, s14
 800573e:	eef0 0a67 	vmov.f32	s1, s15
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bdb0      	pop	{r4, r5, r7, pc}
 8005748:	00000000 	.word	0x00000000
 800574c:	412e8480 	.word	0x412e8480
 8005750:	200001f4 	.word	0x200001f4
 8005754:	3ff00000 	.word	0x3ff00000

08005758 <_ZN11LidarReaderC1Ev>:
#include "LidarReader.h"
#include <cstdio> // For printf debug

LidarReader::LidarReader() :
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
		currentX(0), currentY(0), packetIndex(0) {
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	701a      	strb	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	705a      	strb	r2, [r3, #1]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f04f 0200 	mov.w	r2, #0
 8005772:	605a      	str	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f04f 0200 	mov.w	r2, #0
 800577a:	609a      	str	r2, [r3, #8]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	330c      	adds	r3, #12
 8005780:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8005784:	2100      	movs	r1, #0
 8005786:	4618      	mov	r0, r3
 8005788:	f007 fafb 	bl	800cd82 <memset>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f04f 0200 	mov.w	r2, #0
 8005792:	f8c3 232c 	str.w	r2, [r3, #812]	@ 0x32c
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f04f 0200 	mov.w	r2, #0
 800579c:	f8c3 2330 	str.w	r2, [r3, #816]	@ 0x330
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2334 	strb.w	r2, [r3, #820]	@ 0x334
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2335 	strb.w	r2, [r3, #821]	@ 0x335
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f04f 0200 	mov.w	r2, #0
 80057b6:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f04f 0200 	mov.w	r2, #0
 80057c0:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f04f 0200 	mov.w	r2, #0
 80057ca:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 80057d4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80057d8:	2100      	movs	r1, #0
 80057da:	4618      	mov	r0, r3
 80057dc:	f007 fad1 	bl	800cd82 <memset>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
 80057e6:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80057ea:	2100      	movs	r1, #0
 80057ec:	4618      	mov	r0, r3
 80057ee:	f007 fac8 	bl	800cd82 <memset>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f8c3 27f4 	str.w	r2, [r3, #2036]	@ 0x7f4
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f503 63ff 	add.w	r3, r3, #2040	@ 0x7f8
 8005800:	f04f 0200 	mov.w	r2, #0
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f203 73fc 	addw	r3, r3, #2044	@ 0x7fc
 800580c:	f04f 0200 	mov.w	r2, #0
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f8a3 28ce 	strh.w	r2, [r3, #2254]	@ 0x8ce
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f8a3 28d0 	strh.w	r2, [r3, #2256]	@ 0x8d0
	resetBuffers();
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f805 	bl	800583a <_ZN11LidarReader12resetBuffersEv>
}
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4618      	mov	r0, r3
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <_ZN11LidarReader12resetBuffersEv>:

void LidarReader::resetBuffers() {
 800583a:	b580      	push	{r7, lr}
 800583c:	b082      	sub	sp, #8
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
	memset(tempBuffer, 0, sizeof(tempBuffer));
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f603 0305 	addw	r3, r3, #2053	@ 0x805
 8005848:	22c8      	movs	r2, #200	@ 0xc8
 800584a:	2100      	movs	r1, #0
 800584c:	4618      	mov	r0, r3
 800584e:	f007 fa98 	bl	800cd82 <memset>
	rx = 0;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
	packetIndex = 0;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f8a3 28d0 	strh.w	r2, [r3, #2256]	@ 0x8d0
}
 8005862:	bf00      	nop
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <_ZN11LidarReader4initEv>:

void LidarReader::init() {
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, &rx, 1);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f603 0304 	addw	r3, r3, #2052	@ 0x804
 800587a:	2201      	movs	r2, #1
 800587c:	4619      	mov	r1, r3
 800587e:	4809      	ldr	r0, [pc, #36]	@ (80058a4 <_ZN11LidarReader4initEv+0x38>)
 8005880:	f003 fc27 	bl	80090d2 <HAL_UART_Receive_IT>

	uint8_t startScanCmd[2] = { 0xA5, 0x60 };  // Continuous scan command
 8005884:	f246 03a5 	movw	r3, #24741	@ 0x60a5
 8005888:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, startScanCmd, 2, HAL_MAX_DELAY);
 800588a:	f107 010c 	add.w	r1, r7, #12
 800588e:	f04f 33ff 	mov.w	r3, #4294967295
 8005892:	2202      	movs	r2, #2
 8005894:	4803      	ldr	r0, [pc, #12]	@ (80058a4 <_ZN11LidarReader4initEv+0x38>)
 8005896:	f003 fb91 	bl	8008fbc <HAL_UART_Transmit>
}
 800589a:	bf00      	nop
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	20001a04 	.word	0x20001a04

080058a8 <_ZN11LidarReader21onUartReceiveCompleteEv>:

void LidarReader::onUartReceiveComplete() {
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
	uint8_t byte = rx;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 3804 	ldrb.w	r3, [r3, #2052]	@ 0x804
 80058b6:	73fb      	strb	r3, [r7, #15]

	// Step 1: Detect header
	if (packetIndex == 0) {
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f9b3 38d0 	ldrsh.w	r3, [r3, #2256]	@ 0x8d0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d116      	bne.n	80058f0 <_ZN11LidarReader21onUartReceiveCompleteEv+0x48>
		if (byte == 0xAA) { // 0x55
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
 80058c4:	2baa      	cmp	r3, #170	@ 0xaa
 80058c6:	d17e      	bne.n	80059c6 <_ZN11LidarReader21onUartReceiveCompleteEv+0x11e>
			tempBuffer[packetIndex] = byte;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f9b3 38d0 	ldrsh.w	r3, [r3, #2256]	@ 0x8d0
 80058ce:	461a      	mov	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4413      	add	r3, r2
 80058d4:	7bfa      	ldrb	r2, [r7, #15]
 80058d6:	f883 2805 	strb.w	r2, [r3, #2053]	@ 0x805
			packetIndex++;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f9b3 38d0 	ldrsh.w	r3, [r3, #2256]	@ 0x8d0
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	3301      	adds	r3, #1
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	b21a      	sxth	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8a3 28d0 	strh.w	r2, [r3, #2256]	@ 0x8d0
 80058ee:	e06a      	b.n	80059c6 <_ZN11LidarReader21onUartReceiveCompleteEv+0x11e>
		}
	} else if (packetIndex == 1) {
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f9b3 38d0 	ldrsh.w	r3, [r3, #2256]	@ 0x8d0
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d11b      	bne.n	8005932 <_ZN11LidarReader21onUartReceiveCompleteEv+0x8a>
		if (byte == 0x55) { // 0xAA
 80058fa:	7bfb      	ldrb	r3, [r7, #15]
 80058fc:	2b55      	cmp	r3, #85	@ 0x55
 80058fe:	d113      	bne.n	8005928 <_ZN11LidarReader21onUartReceiveCompleteEv+0x80>
			tempBuffer[packetIndex] = byte;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f9b3 38d0 	ldrsh.w	r3, [r3, #2256]	@ 0x8d0
 8005906:	461a      	mov	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4413      	add	r3, r2
 800590c:	7bfa      	ldrb	r2, [r7, #15]
 800590e:	f883 2805 	strb.w	r2, [r3, #2053]	@ 0x805
			packetIndex++;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f9b3 38d0 	ldrsh.w	r3, [r3, #2256]	@ 0x8d0
 8005918:	b29b      	uxth	r3, r3
 800591a:	3301      	adds	r3, #1
 800591c:	b29b      	uxth	r3, r3
 800591e:	b21a      	sxth	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8a3 28d0 	strh.w	r2, [r3, #2256]	@ 0x8d0
 8005926:	e04e      	b.n	80059c6 <_ZN11LidarReader21onUartReceiveCompleteEv+0x11e>
		} else {
			packetIndex = 0;  // Reset if second byte isn't 0xAA
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f8a3 28d0 	strh.w	r2, [r3, #2256]	@ 0x8d0
 8005930:	e049      	b.n	80059c6 <_ZN11LidarReader21onUartReceiveCompleteEv+0x11e>
		}
	} else {
		// Step 2: Collect rest of packet
		tempBuffer[packetIndex] = byte;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f9b3 38d0 	ldrsh.w	r3, [r3, #2256]	@ 0x8d0
 8005938:	461a      	mov	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4413      	add	r3, r2
 800593e:	7bfa      	ldrb	r2, [r7, #15]
 8005940:	f883 2805 	strb.w	r2, [r3, #2053]	@ 0x805

		if (packetIndex == HEADER_SIZE) {
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f9b3 38d0 	ldrsh.w	r3, [r3, #2256]	@ 0x8d0
 800594a:	2b0a      	cmp	r3, #10
 800594c:	d117      	bne.n	800597e <_ZN11LidarReader21onUartReceiveCompleteEv+0xd6>
			// Step 3: Extract LSN and calculate expected full packet size
			uint8_t lsn = tempBuffer[3];  // LSN is at index 3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 3808 	ldrb.w	r3, [r3, #2056]	@ 0x808
 8005954:	73bb      	strb	r3, [r7, #14]
			expectedPacketLength = HEADER_SIZE + (lsn * 3);
 8005956:	7bbb      	ldrb	r3, [r7, #14]
 8005958:	b29b      	uxth	r3, r3
 800595a:	461a      	mov	r2, r3
 800595c:	0052      	lsls	r2, r2, #1
 800595e:	4413      	add	r3, r2
 8005960:	b29b      	uxth	r3, r3
 8005962:	330a      	adds	r3, #10
 8005964:	b29a      	uxth	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8a3 28ce 	strh.w	r2, [r3, #2254]	@ 0x8ce
			if (expectedPacketLength > MAX_PACKET_SIZE) {
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	@ 0x8ce
 8005972:	2bc8      	cmp	r3, #200	@ 0xc8
 8005974:	d903      	bls.n	800597e <_ZN11LidarReader21onUartReceiveCompleteEv+0xd6>
				packetIndex = 0;  // Safety reset
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f8a3 28d0 	strh.w	r2, [r3, #2256]	@ 0x8d0
			}
		}

		// Step 4: Check if full packet received
		if (expectedPacketLength > 0 && packetIndex == expectedPacketLength) {
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	@ 0x8ce
 8005984:	2b00      	cmp	r3, #0
 8005986:	d014      	beq.n	80059b2 <_ZN11LidarReader21onUartReceiveCompleteEv+0x10a>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f9b3 38d0 	ldrsh.w	r3, [r3, #2256]	@ 0x8d0
 800598e:	461a      	mov	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8b3 38ce 	ldrh.w	r3, [r3, #2254]	@ 0x8ce
 8005996:	429a      	cmp	r2, r3
 8005998:	d10b      	bne.n	80059b2 <_ZN11LidarReader21onUartReceiveCompleteEv+0x10a>
			processData();  // full packet ready
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f84a 	bl	8005a34 <_ZN11LidarReader11processDataEv>
			packetIndex = -1; // Reset for next packet
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80059a6:	f8a3 28d0 	strh.w	r2, [r3, #2256]	@ 0x8d0
			expectedPacketLength = 0;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f8a3 28ce 	strh.w	r2, [r3, #2254]	@ 0x8ce
		}
		packetIndex++;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f9b3 38d0 	ldrsh.w	r3, [r3, #2256]	@ 0x8d0
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	3301      	adds	r3, #1
 80059bc:	b29b      	uxth	r3, r3
 80059be:	b21a      	sxth	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8a3 28d0 	strh.w	r2, [r3, #2256]	@ 0x8d0
	}

	// Continue receiving next byte
	HAL_UART_Receive_IT(&huart2, &rx, 1);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f603 0304 	addw	r3, r3, #2052	@ 0x804
 80059cc:	2201      	movs	r2, #1
 80059ce:	4619      	mov	r1, r3
 80059d0:	4803      	ldr	r0, [pc, #12]	@ (80059e0 <_ZN11LidarReader21onUartReceiveCompleteEv+0x138>)
 80059d2:	f003 fb7e 	bl	80090d2 <HAL_UART_Receive_IT>
}
 80059d6:	bf00      	nop
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	20001a04 	.word	0x20001a04

080059e4 <_ZN11LidarReader11decodeAngleEhh>:

float LidarReader::decodeAngle(uint8_t low, uint8_t high) {
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	460b      	mov	r3, r1
 80059ee:	70fb      	strb	r3, [r7, #3]
 80059f0:	4613      	mov	r3, r2
 80059f2:	70bb      	strb	r3, [r7, #2]
	uint16_t raw = (high << 8) | low;
 80059f4:	78bb      	ldrb	r3, [r7, #2]
 80059f6:	b21b      	sxth	r3, r3
 80059f8:	021b      	lsls	r3, r3, #8
 80059fa:	b21a      	sxth	r2, r3
 80059fc:	78fb      	ldrb	r3, [r7, #3]
 80059fe:	b21b      	sxth	r3, r3
 8005a00:	4313      	orrs	r3, r2
 8005a02:	b21b      	sxth	r3, r3
 8005a04:	81fb      	strh	r3, [r7, #14]
	return ((raw >> 1) / 64.0f);  // angle in degrees
 8005a06:	89fb      	ldrh	r3, [r7, #14]
 8005a08:	085b      	lsrs	r3, r3, #1
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	ee07 3a90 	vmov	s15, r3
 8005a10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a14:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005a30 <_ZN11LidarReader11decodeAngleEhh+0x4c>
 8005a18:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005a1c:	eef0 7a66 	vmov.f32	s15, s13
}
 8005a20:	eeb0 0a67 	vmov.f32	s0, s15
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	42800000 	.word	0x42800000

08005a34 <_ZN11LidarReader11processDataEv>:
void LidarReader::processData() {
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08a      	sub	sp, #40	@ 0x28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
	// Checksum = sum of first 6 bytes must equal 7th byte
	fsa = decodeAngle(tempBuffer[4], tempBuffer[5]);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 1809 	ldrb.w	r1, [r3, #2057]	@ 0x809
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 380a 	ldrb.w	r3, [r3, #2058]	@ 0x80a
 8005a48:	461a      	mov	r2, r3
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7ff ffca 	bl	80059e4 <_ZN11LidarReader11decodeAngleEhh>
 8005a50:	eef0 7a40 	vmov.f32	s15, s0
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	edc3 7ace 	vstr	s15, [r3, #824]	@ 0x338
	lsa = decodeAngle(tempBuffer[6], tempBuffer[7]);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 180b 	ldrb.w	r1, [r3, #2059]	@ 0x80b
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 380c 	ldrb.w	r3, [r3, #2060]	@ 0x80c
 8005a66:	461a      	mov	r2, r3
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7ff ffbb 	bl	80059e4 <_ZN11LidarReader11decodeAngleEhh>
 8005a6e:	eef0 7a40 	vmov.f32	s15, s0
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	edc3 7acf 	vstr	s15, [r3, #828]	@ 0x33c
	SampleAmount = tempBuffer[3];
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 2808 	ldrb.w	r2, [r3, #2056]	@ 0x808
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f883 2335 	strb.w	r2, [r3, #821]	@ 0x335
	/*
	 SampleAmount = tempBuffer[3] & 0x0F;  // Only lower 4 bits are valid
	 SampleAmount += 1;
	 */
	float angle_diff = lsa - fsa;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	ed93 7acf 	vldr	s14, [r3, #828]	@ 0x33c
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8005a90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a94:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	if (angle_diff < 0) {
 8005a98:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005a9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa4:	d507      	bpl.n	8005ab6 <_ZN11LidarReader11processDataEv+0x82>
		angle_diff += 360.0f;
 8005aa6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005aaa:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8005bec <_ZN11LidarReader11processDataEv+0x1b8>
 8005aae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ab2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	}
	AngleStep = angle_diff / SampleAmount;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8005abc:	ee07 3a90 	vmov	s15, r3
 8005ac0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ac4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005ac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	edc3 7ad0 	vstr	s15, [r3, #832]	@ 0x340

	uint8_t *sample_start = &tempBuffer[10];
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f603 030f 	addw	r3, r3, #2063	@ 0x80f
 8005ad8:	61bb      	str	r3, [r7, #24]

	for (uint8_t i = 0; i < SampleAmount; ++i) {
 8005ada:	2300      	movs	r3, #0
 8005adc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ae0:	e074      	b.n	8005bcc <_ZN11LidarReader11processDataEv+0x198>
		uint8_t *sample = &sample_start[i * 3];
 8005ae2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	005b      	lsls	r3, r3, #1
 8005aea:	4413      	add	r3, r2
 8005aec:	461a      	mov	r2, r3
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	4413      	add	r3, r2
 8005af2:	617b      	str	r3, [r7, #20]

		uint8_t dist_low = sample[1];
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	785b      	ldrb	r3, [r3, #1]
 8005af8:	74fb      	strb	r3, [r7, #19]
		uint8_t dist_high = sample[2];
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	789b      	ldrb	r3, [r3, #2]
 8005afe:	74bb      	strb	r3, [r7, #18]

		uint16_t distance_mm = (dist_high << 6) | (dist_low >> 2);
 8005b00:	7cbb      	ldrb	r3, [r7, #18]
 8005b02:	b21b      	sxth	r3, r3
 8005b04:	019b      	lsls	r3, r3, #6
 8005b06:	b21a      	sxth	r2, r3
 8005b08:	7cfb      	ldrb	r3, [r7, #19]
 8005b0a:	089b      	lsrs	r3, r3, #2
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	b21b      	sxth	r3, r3
 8005b10:	4313      	orrs	r3, r2
 8005b12:	b21b      	sxth	r3, r3
 8005b14:	823b      	strh	r3, [r7, #16]

		// Calculate angle
		float angle = fsa + AngleStep * i;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	ed93 7ace 	vldr	s14, [r3, #824]	@ 0x338
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	edd3 6ad0 	vldr	s13, [r3, #832]	@ 0x340
 8005b22:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b26:	ee07 3a90 	vmov	s15, r3
 8005b2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b36:	edc7 7a07 	vstr	s15, [r7, #28]
		if (angle >= 360.0f)
 8005b3a:	edd7 7a07 	vldr	s15, [r7, #28]
 8005b3e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8005bec <_ZN11LidarReader11processDataEv+0x1b8>
 8005b42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b4a:	db07      	blt.n	8005b5c <_ZN11LidarReader11processDataEv+0x128>
			angle -= 360.0f;
 8005b4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8005b50:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8005bec <_ZN11LidarReader11processDataEv+0x1b8>
 8005b54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b58:	edc7 7a07 	vstr	s15, [r7, #28]
		if (angle < 0)
 8005b5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8005b60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b68:	d507      	bpl.n	8005b7a <_ZN11LidarReader11processDataEv+0x146>
			angle += 360.0f;
 8005b6a:	edd7 7a07 	vldr	s15, [r7, #28]
 8005b6e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8005bec <_ZN11LidarReader11processDataEv+0x1b8>
 8005b72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b76:	edc7 7a07 	vstr	s15, [r7, #28]

		int angle_index = static_cast<int>(angle + 0.5f) % 360;
 8005b7a:	edd7 7a07 	vldr	s15, [r7, #28]
 8005b7e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005b82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b8a:	ee17 3a90 	vmov	r3, s15
 8005b8e:	4a18      	ldr	r2, [pc, #96]	@ (8005bf0 <_ZN11LidarReader11processDataEv+0x1bc>)
 8005b90:	fb82 1203 	smull	r1, r2, r2, r3
 8005b94:	441a      	add	r2, r3
 8005b96:	1211      	asrs	r1, r2, #8
 8005b98:	17da      	asrs	r2, r3, #31
 8005b9a:	1a8a      	subs	r2, r1, r2
 8005b9c:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8005ba0:	fb01 f202 	mul.w	r2, r1, r2
 8005ba4:	1a9b      	subs	r3, r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]
		angleBuffer[angle_index] = distance_mm;
 8005ba8:	8a3b      	ldrh	r3, [r7, #16]
 8005baa:	ee07 3a90 	vmov	s15, r3
 8005bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	3302      	adds	r3, #2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < SampleAmount; ++i) {
 8005bc2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8005bd2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d383      	bcc.n	8005ae2 <_ZN11LidarReader11processDataEv+0xae>
	}

	newFrameAvailable = true;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2334 	strb.w	r2, [r3, #820]	@ 0x334
}
 8005be2:	bf00      	nop
 8005be4:	3728      	adds	r7, #40	@ 0x28
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	43b40000 	.word	0x43b40000
 8005bf0:	b60b60b7 	.word	0xb60b60b7

08005bf4 <_ZN19SSD1306_HardwareI2CC1Ev>:
#include "SSD1306_HardwareI2C.h"

SSD1306_HardwareI2C::SSD1306_HardwareI2C() :
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
		_cursorX(0), _cursorY(0) {
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2278      	movs	r2, #120	@ 0x78
 8005c00:	701a      	strb	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2402 	strb.w	r2, [r3, #1026]	@ 0x402
	memset(_buffer, 0, sizeof(_buffer));
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	3301      	adds	r3, #1
 8005c16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f007 f8b0 	bl	800cd82 <memset>
}
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4618      	mov	r0, r3
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <_ZN19SSD1306_HardwareI2C4initEv>:

void SSD1306_HardwareI2C::init() {
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8005c34:	2064      	movs	r0, #100	@ 0x64
 8005c36:	f000 fae9 	bl	800620c <HAL_Delay>
	writeCommand(0xAE); // Display off
 8005c3a:	21ae      	movs	r1, #174	@ 0xae
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f8b1 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	writeCommand(0x20); // Set memory addressing mode
 8005c42:	2120      	movs	r1, #32
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f8ad 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	writeCommand(0x10); // Page addressing mode
 8005c4a:	2110      	movs	r1, #16
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 f8a9 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	writeCommand(0xB0); // Set page start
 8005c52:	21b0      	movs	r1, #176	@ 0xb0
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f8a5 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	writeCommand(0xC8); // COM scan direction
 8005c5a:	21c8      	movs	r1, #200	@ 0xc8
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f8a1 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	writeCommand(0x00); // Low col
 8005c62:	2100      	movs	r1, #0
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f89d 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	writeCommand(0x10); // High col
 8005c6a:	2110      	movs	r1, #16
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 f899 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	writeCommand(0x40); // Start line address
 8005c72:	2140      	movs	r1, #64	@ 0x40
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f895 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	writeCommand(0x81); // Contrast
 8005c7a:	2181      	movs	r1, #129	@ 0x81
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f891 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	writeCommand(0xFF);
 8005c82:	21ff      	movs	r1, #255	@ 0xff
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f88d 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	writeCommand(0xA1); // Segment remap
 8005c8a:	21a1      	movs	r1, #161	@ 0xa1
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f889 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	writeCommand(0xA6); // Normal display
 8005c92:	21a6      	movs	r1, #166	@ 0xa6
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 f885 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	writeCommand(0xA8); // Multiplex ratio
 8005c9a:	21a8      	movs	r1, #168	@ 0xa8
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 f881 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	writeCommand(0x3F);
 8005ca2:	213f      	movs	r1, #63	@ 0x3f
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f87d 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	writeCommand(0xA4); // Output RAM to display
 8005caa:	21a4      	movs	r1, #164	@ 0xa4
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f879 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	writeCommand(0xD3); // Display offset
 8005cb2:	21d3      	movs	r1, #211	@ 0xd3
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f875 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	writeCommand(0x00);
 8005cba:	2100      	movs	r1, #0
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f871 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	writeCommand(0xD5); // Clock divide
 8005cc2:	21d5      	movs	r1, #213	@ 0xd5
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f86d 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	writeCommand(0xF0);
 8005cca:	21f0      	movs	r1, #240	@ 0xf0
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f869 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	writeCommand(0xD9); // Precharge
 8005cd2:	21d9      	movs	r1, #217	@ 0xd9
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f865 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	writeCommand(0x22);
 8005cda:	2122      	movs	r1, #34	@ 0x22
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 f861 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	writeCommand(0xDA); // COM pins
 8005ce2:	21da      	movs	r1, #218	@ 0xda
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f85d 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	writeCommand(0x12);
 8005cea:	2112      	movs	r1, #18
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f859 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	writeCommand(0xDB); // VCOM detect
 8005cf2:	21db      	movs	r1, #219	@ 0xdb
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f855 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	writeCommand(0x20);
 8005cfa:	2120      	movs	r1, #32
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f851 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	writeCommand(0x8D); // Charge pump
 8005d02:	218d      	movs	r1, #141	@ 0x8d
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f84d 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	writeCommand(0x14);
 8005d0a:	2114      	movs	r1, #20
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f849 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	writeCommand(0xAF); // Display on
 8005d12:	21af      	movs	r1, #175	@ 0xaf
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f845 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
	clear();
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f804 	bl	8005d28 <_ZN19SSD1306_HardwareI2C5clearEv>
}
 8005d20:	bf00      	nop
 8005d22:	3708      	adds	r7, #8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <_ZN19SSD1306_HardwareI2C5clearEv>:

void SSD1306_HardwareI2C::clear() {
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
	memset(_buffer, 0, sizeof(_buffer));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3301      	adds	r3, #1
 8005d34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d38:	2100      	movs	r1, #0
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f007 f821 	bl	800cd82 <memset>
	updateScreen();
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f804 	bl	8005d4e <_ZN19SSD1306_HardwareI2C12updateScreenEv>
}
 8005d46:	bf00      	nop
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <_ZN19SSD1306_HardwareI2C12updateScreenEv>:
	while (*str) {
		writeChar(*str++);
	}
}

void SSD1306_HardwareI2C::updateScreen() {
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b084      	sub	sp, #16
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
	for (uint8_t page = 0; page < 8; page++) {
 8005d56:	2300      	movs	r3, #0
 8005d58:	73fb      	strb	r3, [r7, #15]
 8005d5a:	e01b      	b.n	8005d94 <_ZN19SSD1306_HardwareI2C12updateScreenEv+0x46>
		writeCommand(0xB0 + page);
 8005d5c:	7bfb      	ldrb	r3, [r7, #15]
 8005d5e:	3b50      	subs	r3, #80	@ 0x50
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	4619      	mov	r1, r3
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 f81d 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
		writeCommand(0x00);
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f819 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
		writeCommand(0x10);
 8005d72:	2110      	movs	r1, #16
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f815 	bl	8005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>
		writeData(&_buffer[page * 128], 128);
 8005d7a:	7bfb      	ldrb	r3, [r7, #15]
 8005d7c:	01db      	lsls	r3, r3, #7
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	4413      	add	r3, r2
 8005d82:	3301      	adds	r3, #1
 8005d84:	2280      	movs	r2, #128	@ 0x80
 8005d86:	4619      	mov	r1, r3
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f829 	bl	8005de0 <_ZN19SSD1306_HardwareI2C9writeDataEPKhj>
	for (uint8_t page = 0; page < 8; page++) {
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
 8005d90:	3301      	adds	r3, #1
 8005d92:	73fb      	strb	r3, [r7, #15]
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
 8005d96:	2b07      	cmp	r3, #7
 8005d98:	d9e0      	bls.n	8005d5c <_ZN19SSD1306_HardwareI2C12updateScreenEv+0xe>
	}
}
 8005d9a:	bf00      	nop
 8005d9c:	bf00      	nop
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <_ZN19SSD1306_HardwareI2C12writeCommandEh>:

void SSD1306_HardwareI2C::writeCommand(uint8_t cmd) {
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af02      	add	r7, sp, #8
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2] = { 0x00, cmd };
 8005db0:	2300      	movs	r3, #0
 8005db2:	81bb      	strh	r3, [r7, #12]
 8005db4:	78fb      	ldrb	r3, [r7, #3]
 8005db6:	737b      	strb	r3, [r7, #13]
	if (HAL_I2C_Master_Transmit(&hi2c1, _address, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	f107 020c 	add.w	r2, r7, #12
 8005dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	2302      	movs	r3, #2
 8005dca:	4804      	ldr	r0, [pc, #16]	@ (8005ddc <_ZN19SSD1306_HardwareI2C12writeCommandEh+0x38>)
 8005dcc:	f000 fef8 	bl	8006bc0 <HAL_I2C_Master_Transmit>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
		// Handle error here if needed
	}
}
 8005dd4:	bf00      	nop
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	2000183c 	.word	0x2000183c

08005de0 <_ZN19SSD1306_HardwareI2C9writeDataEPKhj>:

void SSD1306_HardwareI2C::writeData(const uint8_t *data, size_t size) {
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af02      	add	r7, sp, #8
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
	static uint8_t temp[129];
	temp[0] = 0x40;
 8005dec:	4b0d      	ldr	r3, [pc, #52]	@ (8005e24 <_ZN19SSD1306_HardwareI2C9writeDataEPKhj+0x44>)
 8005dee:	2240      	movs	r2, #64	@ 0x40
 8005df0:	701a      	strb	r2, [r3, #0]
	memcpy(&temp[1], data, size);
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	68b9      	ldr	r1, [r7, #8]
 8005df6:	480c      	ldr	r0, [pc, #48]	@ (8005e28 <_ZN19SSD1306_HardwareI2C9writeDataEPKhj+0x48>)
 8005df8:	f007 f8a5 	bl	800cf46 <memcpy>

	if (HAL_I2C_Master_Transmit(&hi2c1, _address, temp, size + 1, HAL_MAX_DELAY) != HAL_OK) {
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	4619      	mov	r1, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	3301      	adds	r3, #1
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e0e:	9200      	str	r2, [sp, #0]
 8005e10:	4a04      	ldr	r2, [pc, #16]	@ (8005e24 <_ZN19SSD1306_HardwareI2C9writeDataEPKhj+0x44>)
 8005e12:	4806      	ldr	r0, [pc, #24]	@ (8005e2c <_ZN19SSD1306_HardwareI2C9writeDataEPKhj+0x4c>)
 8005e14:	f000 fed4 	bl	8006bc0 <HAL_I2C_Master_Transmit>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
		// Handle error here if needed
	}
}
 8005e1c:	bf00      	nop
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	20001aa0 	.word	0x20001aa0
 8005e28:	20001aa1 	.word	0x20001aa1
 8005e2c:	2000183c 	.word	0x2000183c

08005e30 <_ZN8UartCommC1EP20__UART_HandleTypeDef>:
#include "UartComm.h"
#include <cstring>
#include <cstdlib>

UartComm::UartComm(UART_HandleTypeDef *huart) {
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
	_huart = huart;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	683a      	ldr	r2, [r7, #0]
 8005e56:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

	memset(txBuffer, 0, TX_BUFFER_SIZE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	33a8      	adds	r3, #168	@ 0xa8
 8005e5e:	2280      	movs	r2, #128	@ 0x80
 8005e60:	2100      	movs	r1, #0
 8005e62:	4618      	mov	r0, r3
 8005e64:	f006 ff8d 	bl	800cd82 <memset>
	memset(rxLineBuffer, 0, RX_LINE_BUFFER_SIZE);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	331c      	adds	r3, #28
 8005e6c:	2280      	movs	r2, #128	@ 0x80
 8005e6e:	2100      	movs	r1, #0
 8005e70:	4618      	mov	r0, r3
 8005e72:	f006 ff86 	bl	800cd82 <memset>

	ball_is_detected = false;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	701a      	strb	r2, [r3, #0]
	ball_x = ball_y = ball_vx = ball_vy = ball_displacement = ball_angle = 0.0f;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f04f 0200 	mov.w	r2, #0
 8005e82:	619a      	str	r2, [r3, #24]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	699a      	ldr	r2, [r3, #24]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	615a      	str	r2, [r3, #20]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	695a      	ldr	r2, [r3, #20]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	611a      	str	r2, [r3, #16]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	691a      	ldr	r2, [r3, #16]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	60da      	str	r2, [r3, #12]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	609a      	str	r2, [r3, #8]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	605a      	str	r2, [r3, #4]
}
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3708      	adds	r7, #8
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <_ZN8UartComm21receiveAndProcessLineEv>:

	isTransmitting = true;
	HAL_UART_Transmit_IT(_huart, (uint8_t*) txBuffer, len);
}

void UartComm::receiveAndProcessLine() {
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b082      	sub	sp, #8
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(_huart, &c, 1);  // Re-enable interrupt for next byte
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	33a1      	adds	r3, #161	@ 0xa1
 8005ec8:	2201      	movs	r2, #1
 8005eca:	4619      	mov	r1, r3
 8005ecc:	f003 f901 	bl	80090d2 <HAL_UART_Receive_IT>

	if (c == '\n') {
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005ed6:	2b0a      	cmp	r3, #10
 8005ed8:	d111      	bne.n	8005efe <_ZN8UartComm21receiveAndProcessLineEv+0x48>
		rxLineBuffer[rxIndex] = '\0';  // Null terminate
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	2200      	movs	r2, #0
 8005eea:	771a      	strb	r2, [r3, #28]
		lineReady = true;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		rxIndex = 0;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
	} else if (rxIndex < RX_LINE_BUFFER_SIZE - 1) {
		rxLineBuffer[rxIndex++] = c;
	} else {
		rxIndex = 0;  // Buffer overflow, reset index or handle error
	}
}
 8005efc:	e01f      	b.n	8005f3e <_ZN8UartComm21receiveAndProcessLineEv+0x88>
	} else if (rxIndex < RX_LINE_BUFFER_SIZE - 1) {
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	2b7e      	cmp	r3, #126	@ 0x7e
 8005f08:	bf94      	ite	ls
 8005f0a:	2301      	movls	r3, #1
 8005f0c:	2300      	movhi	r3, #0
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d010      	beq.n	8005f36 <_ZN8UartComm21receiveAndProcessLineEv+0x80>
		rxLineBuffer[rxIndex++] = c;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	b291      	uxth	r1, r2
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	f8a2 109e 	strh.w	r1, [r2, #158]	@ 0x9e
 8005f26:	4619      	mov	r1, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 20a1 	ldrb.w	r2, [r3, #161]	@ 0xa1
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	440b      	add	r3, r1
 8005f32:	771a      	strb	r2, [r3, #28]
}
 8005f34:	e003      	b.n	8005f3e <_ZN8UartComm21receiveAndProcessLineEv+0x88>
		rxIndex = 0;  // Buffer overflow, reset index or handle error
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
}
 8005f3e:	bf00      	nop
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <_ZN8UartComm4initEv>:
void UartComm::init() {
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b082      	sub	sp, #8
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(_huart, &c, 1);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	33a1      	adds	r3, #161	@ 0xa1
 8005f58:	2201      	movs	r2, #1
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	f003 f8b9 	bl	80090d2 <HAL_UART_Receive_IT>
}
 8005f60:	bf00      	nop
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <_ZN8UartComm19processReceivedDataEv>:
void UartComm::processReceivedData() {
 8005f68:	b590      	push	{r4, r7, lr}
 8005f6a:	b091      	sub	sp, #68	@ 0x44
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
	// Temporary buffer for each token
	if (!lineReady) {
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	f083 0301 	eor.w	r3, r3, #1
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f040 80a3 	bne.w	80060ca <_ZN8UartComm19processReceivedDataEv+0x162>
		return;
	}

	char token[16];
	int token_index = 0;
 8005f84:	2300      	movs	r3, #0
 8005f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int field_index = 0;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	63bb      	str	r3, [r7, #56]	@ 0x38

	// Storage for parsed values
	bool ball_detected_flag = false;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	bool ball_in_control_flag = false;
 8005f92:	2300      	movs	r3, #0
 8005f94:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	float values[6] = { 0 };
 8005f98:	f107 0308 	add.w	r3, r7, #8
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	605a      	str	r2, [r3, #4]
 8005fa2:	609a      	str	r2, [r3, #8]
 8005fa4:	60da      	str	r2, [r3, #12]
 8005fa6:	611a      	str	r2, [r3, #16]
 8005fa8:	615a      	str	r2, [r3, #20]

	for (uint16_t i = 0; i <= strlen(rxLineBuffer); i++) {
 8005faa:	2300      	movs	r3, #0
 8005fac:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005fae:	e064      	b.n	800607a <_ZN8UartComm19processReceivedDataEv+0x112>
		char c = rxLineBuffer[i];
 8005fb0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	7f1b      	ldrb	r3, [r3, #28]
 8005fb8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		if (c == ',' || c == '\0') {
 8005fbc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005fc0:	2b2c      	cmp	r3, #44	@ 0x2c
 8005fc2:	d003      	beq.n	8005fcc <_ZN8UartComm19processReceivedDataEv+0x64>
 8005fc4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d147      	bne.n	800605c <_ZN8UartComm19processReceivedDataEv+0xf4>
			token[token_index] = '\0';  // Null-terminate the token
 8005fcc:	f107 0220 	add.w	r2, r7, #32
 8005fd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fd2:	4413      	add	r3, r2
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	701a      	strb	r2, [r3, #0]

			switch (field_index) {
 8005fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fda:	2b07      	cmp	r3, #7
 8005fdc:	dc37      	bgt.n	800604e <_ZN8UartComm19processReceivedDataEv+0xe6>
 8005fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	da22      	bge.n	800602a <_ZN8UartComm19processReceivedDataEv+0xc2>
 8005fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <_ZN8UartComm19processReceivedDataEv+0x8a>
 8005fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d00e      	beq.n	800600e <_ZN8UartComm19processReceivedDataEv+0xa6>
			case 6:
			case 7:
				values[field_index - 2] = atof(token);
				break;
			default:
				break;
 8005ff0:	e02d      	b.n	800604e <_ZN8UartComm19processReceivedDataEv+0xe6>
				ball_detected_flag = (strcmp(token, "true") == 0);
 8005ff2:	f107 0320 	add.w	r3, r7, #32
 8005ff6:	4937      	ldr	r1, [pc, #220]	@ (80060d4 <_ZN8UartComm19processReceivedDataEv+0x16c>)
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fa f8f1 	bl	80001e0 <strcmp>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	bf0c      	ite	eq
 8006004:	2301      	moveq	r3, #1
 8006006:	2300      	movne	r3, #0
 8006008:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				break;
 800600c:	e020      	b.n	8006050 <_ZN8UartComm19processReceivedDataEv+0xe8>
				ball_in_control_flag = (strcmp(token, "true") == 0);
 800600e:	f107 0320 	add.w	r3, r7, #32
 8006012:	4930      	ldr	r1, [pc, #192]	@ (80060d4 <_ZN8UartComm19processReceivedDataEv+0x16c>)
 8006014:	4618      	mov	r0, r3
 8006016:	f7fa f8e3 	bl	80001e0 <strcmp>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	bf0c      	ite	eq
 8006020:	2301      	moveq	r3, #1
 8006022:	2300      	movne	r3, #0
 8006024:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
				break;
 8006028:	e012      	b.n	8006050 <_ZN8UartComm19processReceivedDataEv+0xe8>
				values[field_index - 2] = atof(token);
 800602a:	f107 0320 	add.w	r3, r7, #32
 800602e:	4618      	mov	r0, r3
 8006030:	f005 fec1 	bl	800bdb6 <atof>
 8006034:	ec51 0b10 	vmov	r0, r1, d0
 8006038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800603a:	1e9c      	subs	r4, r3, #2
 800603c:	f7fa fdc4 	bl	8000bc8 <__aeabi_d2f>
 8006040:	4602      	mov	r2, r0
 8006042:	00a3      	lsls	r3, r4, #2
 8006044:	3340      	adds	r3, #64	@ 0x40
 8006046:	443b      	add	r3, r7
 8006048:	3b38      	subs	r3, #56	@ 0x38
 800604a:	601a      	str	r2, [r3, #0]
				break;
 800604c:	e000      	b.n	8006050 <_ZN8UartComm19processReceivedDataEv+0xe8>
				break;
 800604e:	bf00      	nop
			}

			token_index = 0;
 8006050:	2300      	movs	r3, #0
 8006052:	63fb      	str	r3, [r7, #60]	@ 0x3c
			field_index++;
 8006054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006056:	3301      	adds	r3, #1
 8006058:	63bb      	str	r3, [r7, #56]	@ 0x38
 800605a:	e00b      	b.n	8006074 <_ZN8UartComm19processReceivedDataEv+0x10c>
		} else {
			if (token_index < sizeof(token) - 1) {
 800605c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800605e:	2b0e      	cmp	r3, #14
 8006060:	d808      	bhi.n	8006074 <_ZN8UartComm19processReceivedDataEv+0x10c>
				token[token_index++] = c;
 8006062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006068:	3340      	adds	r3, #64	@ 0x40
 800606a:	443b      	add	r3, r7
 800606c:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8006070:	f803 2c20 	strb.w	r2, [r3, #-32]
	for (uint16_t i = 0; i <= strlen(rxLineBuffer); i++) {
 8006074:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006076:	3301      	adds	r3, #1
 8006078:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800607a:	8ebc      	ldrh	r4, [r7, #52]	@ 0x34
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	331c      	adds	r3, #28
 8006080:	4618      	mov	r0, r3
 8006082:	f7fa f90d 	bl	80002a0 <strlen>
 8006086:	4603      	mov	r3, r0
 8006088:	429c      	cmp	r4, r3
 800608a:	d991      	bls.n	8005fb0 <_ZN8UartComm19processReceivedDataEv+0x48>
			}
		}
	}

	// Store parsed results
	ball_is_detected = ball_detected_flag;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8006092:	701a      	strb	r2, [r3, #0]
	ball_in_control = ball_in_control_flag;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800609a:	705a      	strb	r2, [r3, #1]

	if (ball_is_detected) {
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d013      	beq.n	80060cc <_ZN8UartComm19processReceivedDataEv+0x164>
		ball_x = values[0];
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	605a      	str	r2, [r3, #4]
		ball_y = values[1];
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	609a      	str	r2, [r3, #8]
		ball_vx = values[2];
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	60da      	str	r2, [r3, #12]
		ball_vy = values[3];
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	611a      	str	r2, [r3, #16]
		ball_displacement = values[4];
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	615a      	str	r2, [r3, #20]
		ball_angle = values[5];
 80060c2:	69fa      	ldr	r2, [r7, #28]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	619a      	str	r2, [r3, #24]
 80060c8:	e000      	b.n	80060cc <_ZN8UartComm19processReceivedDataEv+0x164>
		return;
 80060ca:	bf00      	nop
	}
}
 80060cc:	3744      	adds	r7, #68	@ 0x44
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd90      	pop	{r4, r7, pc}
 80060d2:	bf00      	nop
 80060d4:	0800eaac 	.word	0x0800eaac

080060d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 80060d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006110 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80060dc:	480d      	ldr	r0, [pc, #52]	@ (8006114 <LoopFillZerobss+0x18>)
  ldr r1, =_edata
 80060de:	490e      	ldr	r1, [pc, #56]	@ (8006118 <LoopFillZerobss+0x1c>)
//  ldr r2, =_sidata
  movs r3, #0
 80060e0:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80060e2:	e002      	b.n	80060ea <LoopCopyDataInit>

080060e4 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80060e4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80060e6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80060e8:	3304      	adds	r3, #4

080060ea <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80060ea:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80060ec:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80060ee:	d3f9      	bcc.n	80060e4 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80060f0:	4a0a      	ldr	r2, [pc, #40]	@ (800611c <LoopFillZerobss+0x20>)
  ldr r4, =_ebss
 80060f2:	4c0b      	ldr	r4, [pc, #44]	@ (8006120 <LoopFillZerobss+0x24>)
  movs r3, #0
 80060f4:	2300      	movs	r3, #0
  b LoopFillZerobss
 80060f6:	e001      	b.n	80060fc <LoopFillZerobss>

080060f8 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80060f8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80060fa:	3204      	adds	r2, #4

080060fc <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80060fc:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80060fe:	d3fb      	bcc.n	80060f8 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006100:	f7fc ffae 	bl	8003060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006104:	f006 fef8 	bl	800cef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006108:	f7fb fbf6 	bl	80018f8 <main>
  bx  lr    
 800610c:	4770      	bx	lr
 800610e:	0000      	.short	0x0000
   ldr   sp, =_estack    		 /* set stack pointer */
 8006110:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006118:	200001d4 	.word	0x200001d4
  ldr r2, =_sbss
 800611c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8006120:	20001c78 	.word	0x20001c78

08006124 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006124:	e7fe      	b.n	8006124 <ADC_IRQHandler>
	...

08006128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800612c:	4b0e      	ldr	r3, [pc, #56]	@ (8006168 <HAL_Init+0x40>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a0d      	ldr	r2, [pc, #52]	@ (8006168 <HAL_Init+0x40>)
 8006132:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006136:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006138:	4b0b      	ldr	r3, [pc, #44]	@ (8006168 <HAL_Init+0x40>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a0a      	ldr	r2, [pc, #40]	@ (8006168 <HAL_Init+0x40>)
 800613e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006142:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006144:	4b08      	ldr	r3, [pc, #32]	@ (8006168 <HAL_Init+0x40>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a07      	ldr	r2, [pc, #28]	@ (8006168 <HAL_Init+0x40>)
 800614a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800614e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006150:	2003      	movs	r0, #3
 8006152:	f000 f94f 	bl	80063f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006156:	200f      	movs	r0, #15
 8006158:	f000 f808 	bl	800616c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800615c:	f7fc fc00 	bl	8002960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	40023c00 	.word	0x40023c00

0800616c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006174:	4b12      	ldr	r3, [pc, #72]	@ (80061c0 <HAL_InitTick+0x54>)
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	4b12      	ldr	r3, [pc, #72]	@ (80061c4 <HAL_InitTick+0x58>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	4619      	mov	r1, r3
 800617e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006182:	fbb3 f3f1 	udiv	r3, r3, r1
 8006186:	fbb2 f3f3 	udiv	r3, r2, r3
 800618a:	4618      	mov	r0, r3
 800618c:	f000 f967 	bl	800645e <HAL_SYSTICK_Config>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e00e      	b.n	80061b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b0f      	cmp	r3, #15
 800619e:	d80a      	bhi.n	80061b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80061a0:	2200      	movs	r2, #0
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	f04f 30ff 	mov.w	r0, #4294967295
 80061a8:	f000 f92f 	bl	800640a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80061ac:	4a06      	ldr	r2, [pc, #24]	@ (80061c8 <HAL_InitTick+0x5c>)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	e000      	b.n	80061b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3708      	adds	r7, #8
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	20000000 	.word	0x20000000
 80061c4:	20000008 	.word	0x20000008
 80061c8:	20000004 	.word	0x20000004

080061cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80061cc:	b480      	push	{r7}
 80061ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80061d0:	4b06      	ldr	r3, [pc, #24]	@ (80061ec <HAL_IncTick+0x20>)
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	461a      	mov	r2, r3
 80061d6:	4b06      	ldr	r3, [pc, #24]	@ (80061f0 <HAL_IncTick+0x24>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4413      	add	r3, r2
 80061dc:	4a04      	ldr	r2, [pc, #16]	@ (80061f0 <HAL_IncTick+0x24>)
 80061de:	6013      	str	r3, [r2, #0]
}
 80061e0:	bf00      	nop
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	20000008 	.word	0x20000008
 80061f0:	20001b24 	.word	0x20001b24

080061f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80061f4:	b480      	push	{r7}
 80061f6:	af00      	add	r7, sp, #0
  return uwTick;
 80061f8:	4b03      	ldr	r3, [pc, #12]	@ (8006208 <HAL_GetTick+0x14>)
 80061fa:	681b      	ldr	r3, [r3, #0]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	20001b24 	.word	0x20001b24

0800620c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006214:	f7ff ffee 	bl	80061f4 <HAL_GetTick>
 8006218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006224:	d005      	beq.n	8006232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006226:	4b0a      	ldr	r3, [pc, #40]	@ (8006250 <HAL_Delay+0x44>)
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	461a      	mov	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	4413      	add	r3, r2
 8006230:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006232:	bf00      	nop
 8006234:	f7ff ffde 	bl	80061f4 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	429a      	cmp	r2, r3
 8006242:	d8f7      	bhi.n	8006234 <HAL_Delay+0x28>
  {
  }
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20000008 	.word	0x20000008

08006254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f003 0307 	and.w	r3, r3, #7
 8006262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006264:	4b0c      	ldr	r3, [pc, #48]	@ (8006298 <__NVIC_SetPriorityGrouping+0x44>)
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006270:	4013      	ands	r3, r2
 8006272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800627c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006286:	4a04      	ldr	r2, [pc, #16]	@ (8006298 <__NVIC_SetPriorityGrouping+0x44>)
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	60d3      	str	r3, [r2, #12]
}
 800628c:	bf00      	nop
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	e000ed00 	.word	0xe000ed00

0800629c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800629c:	b480      	push	{r7}
 800629e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062a0:	4b04      	ldr	r3, [pc, #16]	@ (80062b4 <__NVIC_GetPriorityGrouping+0x18>)
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	0a1b      	lsrs	r3, r3, #8
 80062a6:	f003 0307 	and.w	r3, r3, #7
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr
 80062b4:	e000ed00 	.word	0xe000ed00

080062b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	4603      	mov	r3, r0
 80062c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	db0b      	blt.n	80062e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062ca:	79fb      	ldrb	r3, [r7, #7]
 80062cc:	f003 021f 	and.w	r2, r3, #31
 80062d0:	4907      	ldr	r1, [pc, #28]	@ (80062f0 <__NVIC_EnableIRQ+0x38>)
 80062d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062d6:	095b      	lsrs	r3, r3, #5
 80062d8:	2001      	movs	r0, #1
 80062da:	fa00 f202 	lsl.w	r2, r0, r2
 80062de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80062e2:	bf00      	nop
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	e000e100 	.word	0xe000e100

080062f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	4603      	mov	r3, r0
 80062fc:	6039      	str	r1, [r7, #0]
 80062fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006304:	2b00      	cmp	r3, #0
 8006306:	db0a      	blt.n	800631e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	b2da      	uxtb	r2, r3
 800630c:	490c      	ldr	r1, [pc, #48]	@ (8006340 <__NVIC_SetPriority+0x4c>)
 800630e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006312:	0112      	lsls	r2, r2, #4
 8006314:	b2d2      	uxtb	r2, r2
 8006316:	440b      	add	r3, r1
 8006318:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800631c:	e00a      	b.n	8006334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	b2da      	uxtb	r2, r3
 8006322:	4908      	ldr	r1, [pc, #32]	@ (8006344 <__NVIC_SetPriority+0x50>)
 8006324:	79fb      	ldrb	r3, [r7, #7]
 8006326:	f003 030f 	and.w	r3, r3, #15
 800632a:	3b04      	subs	r3, #4
 800632c:	0112      	lsls	r2, r2, #4
 800632e:	b2d2      	uxtb	r2, r2
 8006330:	440b      	add	r3, r1
 8006332:	761a      	strb	r2, [r3, #24]
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	e000e100 	.word	0xe000e100
 8006344:	e000ed00 	.word	0xe000ed00

08006348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006348:	b480      	push	{r7}
 800634a:	b089      	sub	sp, #36	@ 0x24
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f003 0307 	and.w	r3, r3, #7
 800635a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	f1c3 0307 	rsb	r3, r3, #7
 8006362:	2b04      	cmp	r3, #4
 8006364:	bf28      	it	cs
 8006366:	2304      	movcs	r3, #4
 8006368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	3304      	adds	r3, #4
 800636e:	2b06      	cmp	r3, #6
 8006370:	d902      	bls.n	8006378 <NVIC_EncodePriority+0x30>
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	3b03      	subs	r3, #3
 8006376:	e000      	b.n	800637a <NVIC_EncodePriority+0x32>
 8006378:	2300      	movs	r3, #0
 800637a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800637c:	f04f 32ff 	mov.w	r2, #4294967295
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	fa02 f303 	lsl.w	r3, r2, r3
 8006386:	43da      	mvns	r2, r3
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	401a      	ands	r2, r3
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006390:	f04f 31ff 	mov.w	r1, #4294967295
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	fa01 f303 	lsl.w	r3, r1, r3
 800639a:	43d9      	mvns	r1, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063a0:	4313      	orrs	r3, r2
         );
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3724      	adds	r7, #36	@ 0x24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
	...

080063b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063c0:	d301      	bcc.n	80063c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80063c2:	2301      	movs	r3, #1
 80063c4:	e00f      	b.n	80063e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063c6:	4a0a      	ldr	r2, [pc, #40]	@ (80063f0 <SysTick_Config+0x40>)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3b01      	subs	r3, #1
 80063cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80063ce:	210f      	movs	r1, #15
 80063d0:	f04f 30ff 	mov.w	r0, #4294967295
 80063d4:	f7ff ff8e 	bl	80062f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80063d8:	4b05      	ldr	r3, [pc, #20]	@ (80063f0 <SysTick_Config+0x40>)
 80063da:	2200      	movs	r2, #0
 80063dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80063de:	4b04      	ldr	r3, [pc, #16]	@ (80063f0 <SysTick_Config+0x40>)
 80063e0:	2207      	movs	r2, #7
 80063e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	e000e010 	.word	0xe000e010

080063f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7ff ff29 	bl	8006254 <__NVIC_SetPriorityGrouping>
}
 8006402:	bf00      	nop
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800640a:	b580      	push	{r7, lr}
 800640c:	b086      	sub	sp, #24
 800640e:	af00      	add	r7, sp, #0
 8006410:	4603      	mov	r3, r0
 8006412:	60b9      	str	r1, [r7, #8]
 8006414:	607a      	str	r2, [r7, #4]
 8006416:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006418:	2300      	movs	r3, #0
 800641a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800641c:	f7ff ff3e 	bl	800629c <__NVIC_GetPriorityGrouping>
 8006420:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	68b9      	ldr	r1, [r7, #8]
 8006426:	6978      	ldr	r0, [r7, #20]
 8006428:	f7ff ff8e 	bl	8006348 <NVIC_EncodePriority>
 800642c:	4602      	mov	r2, r0
 800642e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006432:	4611      	mov	r1, r2
 8006434:	4618      	mov	r0, r3
 8006436:	f7ff ff5d 	bl	80062f4 <__NVIC_SetPriority>
}
 800643a:	bf00      	nop
 800643c:	3718      	adds	r7, #24
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b082      	sub	sp, #8
 8006446:	af00      	add	r7, sp, #0
 8006448:	4603      	mov	r3, r0
 800644a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800644c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006450:	4618      	mov	r0, r3
 8006452:	f7ff ff31 	bl	80062b8 <__NVIC_EnableIRQ>
}
 8006456:	bf00      	nop
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b082      	sub	sp, #8
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7ff ffa2 	bl	80063b0 <SysTick_Config>
 800646c:	4603      	mov	r3, r0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3708      	adds	r7, #8
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b084      	sub	sp, #16
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006482:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006484:	f7ff feb6 	bl	80061f4 <HAL_GetTick>
 8006488:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b02      	cmp	r3, #2
 8006494:	d008      	beq.n	80064a8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2280      	movs	r2, #128	@ 0x80
 800649a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e052      	b.n	800654e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 0216 	bic.w	r2, r2, #22
 80064b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	695a      	ldr	r2, [r3, #20]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80064c6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d103      	bne.n	80064d8 <HAL_DMA_Abort+0x62>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d007      	beq.n	80064e8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0208 	bic.w	r2, r2, #8
 80064e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 0201 	bic.w	r2, r2, #1
 80064f6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064f8:	e013      	b.n	8006522 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80064fa:	f7ff fe7b 	bl	80061f4 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b05      	cmp	r3, #5
 8006506:	d90c      	bls.n	8006522 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2220      	movs	r2, #32
 800650c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2203      	movs	r2, #3
 8006512:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e015      	b.n	800654e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1e4      	bne.n	80064fa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006534:	223f      	movs	r2, #63	@ 0x3f
 8006536:	409a      	lsls	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006556:	b480      	push	{r7}
 8006558:	b083      	sub	sp, #12
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b02      	cmp	r3, #2
 8006568:	d004      	beq.n	8006574 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2280      	movs	r2, #128	@ 0x80
 800656e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e00c      	b.n	800658e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2205      	movs	r2, #5
 8006578:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 0201 	bic.w	r2, r2, #1
 800658a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
	...

0800659c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800659c:	b480      	push	{r7}
 800659e:	b089      	sub	sp, #36	@ 0x24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065b2:	2300      	movs	r3, #0
 80065b4:	61fb      	str	r3, [r7, #28]
 80065b6:	e159      	b.n	800686c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80065b8:	2201      	movs	r2, #1
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	fa02 f303 	lsl.w	r3, r2, r3
 80065c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	4013      	ands	r3, r2
 80065ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	f040 8148 	bne.w	8006866 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f003 0303 	and.w	r3, r3, #3
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d005      	beq.n	80065ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d130      	bne.n	8006650 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	2203      	movs	r2, #3
 80065fa:	fa02 f303 	lsl.w	r3, r2, r3
 80065fe:	43db      	mvns	r3, r3
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	4013      	ands	r3, r2
 8006604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	fa02 f303 	lsl.w	r3, r2, r3
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	4313      	orrs	r3, r2
 8006616:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006624:	2201      	movs	r2, #1
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	fa02 f303 	lsl.w	r3, r2, r3
 800662c:	43db      	mvns	r3, r3
 800662e:	69ba      	ldr	r2, [r7, #24]
 8006630:	4013      	ands	r3, r2
 8006632:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	091b      	lsrs	r3, r3, #4
 800663a:	f003 0201 	and.w	r2, r3, #1
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	fa02 f303 	lsl.w	r3, r2, r3
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	4313      	orrs	r3, r2
 8006648:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69ba      	ldr	r2, [r7, #24]
 800664e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f003 0303 	and.w	r3, r3, #3
 8006658:	2b03      	cmp	r3, #3
 800665a:	d017      	beq.n	800668c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	2203      	movs	r2, #3
 8006668:	fa02 f303 	lsl.w	r3, r2, r3
 800666c:	43db      	mvns	r3, r3
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	4013      	ands	r3, r2
 8006672:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	005b      	lsls	r3, r3, #1
 800667c:	fa02 f303 	lsl.w	r3, r2, r3
 8006680:	69ba      	ldr	r2, [r7, #24]
 8006682:	4313      	orrs	r3, r2
 8006684:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	f003 0303 	and.w	r3, r3, #3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d123      	bne.n	80066e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	08da      	lsrs	r2, r3, #3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	3208      	adds	r2, #8
 80066a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	220f      	movs	r2, #15
 80066b0:	fa02 f303 	lsl.w	r3, r2, r3
 80066b4:	43db      	mvns	r3, r3
 80066b6:	69ba      	ldr	r2, [r7, #24]
 80066b8:	4013      	ands	r3, r2
 80066ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	691a      	ldr	r2, [r3, #16]
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	f003 0307 	and.w	r3, r3, #7
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	fa02 f303 	lsl.w	r3, r2, r3
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	08da      	lsrs	r2, r3, #3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	3208      	adds	r2, #8
 80066da:	69b9      	ldr	r1, [r7, #24]
 80066dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	005b      	lsls	r3, r3, #1
 80066ea:	2203      	movs	r2, #3
 80066ec:	fa02 f303 	lsl.w	r3, r2, r3
 80066f0:	43db      	mvns	r3, r3
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	4013      	ands	r3, r2
 80066f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f003 0203 	and.w	r2, r3, #3
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	fa02 f303 	lsl.w	r3, r2, r3
 8006708:	69ba      	ldr	r2, [r7, #24]
 800670a:	4313      	orrs	r3, r2
 800670c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 80a2 	beq.w	8006866 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006722:	2300      	movs	r3, #0
 8006724:	60fb      	str	r3, [r7, #12]
 8006726:	4b57      	ldr	r3, [pc, #348]	@ (8006884 <HAL_GPIO_Init+0x2e8>)
 8006728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800672a:	4a56      	ldr	r2, [pc, #344]	@ (8006884 <HAL_GPIO_Init+0x2e8>)
 800672c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006730:	6453      	str	r3, [r2, #68]	@ 0x44
 8006732:	4b54      	ldr	r3, [pc, #336]	@ (8006884 <HAL_GPIO_Init+0x2e8>)
 8006734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006736:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800673e:	4a52      	ldr	r2, [pc, #328]	@ (8006888 <HAL_GPIO_Init+0x2ec>)
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	089b      	lsrs	r3, r3, #2
 8006744:	3302      	adds	r3, #2
 8006746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800674a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	f003 0303 	and.w	r3, r3, #3
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	220f      	movs	r2, #15
 8006756:	fa02 f303 	lsl.w	r3, r2, r3
 800675a:	43db      	mvns	r3, r3
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	4013      	ands	r3, r2
 8006760:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a49      	ldr	r2, [pc, #292]	@ (800688c <HAL_GPIO_Init+0x2f0>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d019      	beq.n	800679e <HAL_GPIO_Init+0x202>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a48      	ldr	r2, [pc, #288]	@ (8006890 <HAL_GPIO_Init+0x2f4>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d013      	beq.n	800679a <HAL_GPIO_Init+0x1fe>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a47      	ldr	r2, [pc, #284]	@ (8006894 <HAL_GPIO_Init+0x2f8>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00d      	beq.n	8006796 <HAL_GPIO_Init+0x1fa>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a46      	ldr	r2, [pc, #280]	@ (8006898 <HAL_GPIO_Init+0x2fc>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d007      	beq.n	8006792 <HAL_GPIO_Init+0x1f6>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a45      	ldr	r2, [pc, #276]	@ (800689c <HAL_GPIO_Init+0x300>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d101      	bne.n	800678e <HAL_GPIO_Init+0x1f2>
 800678a:	2304      	movs	r3, #4
 800678c:	e008      	b.n	80067a0 <HAL_GPIO_Init+0x204>
 800678e:	2307      	movs	r3, #7
 8006790:	e006      	b.n	80067a0 <HAL_GPIO_Init+0x204>
 8006792:	2303      	movs	r3, #3
 8006794:	e004      	b.n	80067a0 <HAL_GPIO_Init+0x204>
 8006796:	2302      	movs	r3, #2
 8006798:	e002      	b.n	80067a0 <HAL_GPIO_Init+0x204>
 800679a:	2301      	movs	r3, #1
 800679c:	e000      	b.n	80067a0 <HAL_GPIO_Init+0x204>
 800679e:	2300      	movs	r3, #0
 80067a0:	69fa      	ldr	r2, [r7, #28]
 80067a2:	f002 0203 	and.w	r2, r2, #3
 80067a6:	0092      	lsls	r2, r2, #2
 80067a8:	4093      	lsls	r3, r2
 80067aa:	69ba      	ldr	r2, [r7, #24]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80067b0:	4935      	ldr	r1, [pc, #212]	@ (8006888 <HAL_GPIO_Init+0x2ec>)
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	089b      	lsrs	r3, r3, #2
 80067b6:	3302      	adds	r3, #2
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80067be:	4b38      	ldr	r3, [pc, #224]	@ (80068a0 <HAL_GPIO_Init+0x304>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	43db      	mvns	r3, r3
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	4013      	ands	r3, r2
 80067cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	4313      	orrs	r3, r2
 80067e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80067e2:	4a2f      	ldr	r2, [pc, #188]	@ (80068a0 <HAL_GPIO_Init+0x304>)
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80067e8:	4b2d      	ldr	r3, [pc, #180]	@ (80068a0 <HAL_GPIO_Init+0x304>)
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	43db      	mvns	r3, r3
 80067f2:	69ba      	ldr	r2, [r7, #24]
 80067f4:	4013      	ands	r3, r2
 80067f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d003      	beq.n	800680c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006804:	69ba      	ldr	r2, [r7, #24]
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	4313      	orrs	r3, r2
 800680a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800680c:	4a24      	ldr	r2, [pc, #144]	@ (80068a0 <HAL_GPIO_Init+0x304>)
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006812:	4b23      	ldr	r3, [pc, #140]	@ (80068a0 <HAL_GPIO_Init+0x304>)
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	43db      	mvns	r3, r3
 800681c:	69ba      	ldr	r2, [r7, #24]
 800681e:	4013      	ands	r3, r2
 8006820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800682e:	69ba      	ldr	r2, [r7, #24]
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	4313      	orrs	r3, r2
 8006834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006836:	4a1a      	ldr	r2, [pc, #104]	@ (80068a0 <HAL_GPIO_Init+0x304>)
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800683c:	4b18      	ldr	r3, [pc, #96]	@ (80068a0 <HAL_GPIO_Init+0x304>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	43db      	mvns	r3, r3
 8006846:	69ba      	ldr	r2, [r7, #24]
 8006848:	4013      	ands	r3, r2
 800684a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d003      	beq.n	8006860 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	4313      	orrs	r3, r2
 800685e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006860:	4a0f      	ldr	r2, [pc, #60]	@ (80068a0 <HAL_GPIO_Init+0x304>)
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	3301      	adds	r3, #1
 800686a:	61fb      	str	r3, [r7, #28]
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	2b0f      	cmp	r3, #15
 8006870:	f67f aea2 	bls.w	80065b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006874:	bf00      	nop
 8006876:	bf00      	nop
 8006878:	3724      	adds	r7, #36	@ 0x24
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	40023800 	.word	0x40023800
 8006888:	40013800 	.word	0x40013800
 800688c:	40020000 	.word	0x40020000
 8006890:	40020400 	.word	0x40020400
 8006894:	40020800 	.word	0x40020800
 8006898:	40020c00 	.word	0x40020c00
 800689c:	40021000 	.word	0x40021000
 80068a0:	40013c00 	.word	0x40013c00

080068a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	460b      	mov	r3, r1
 80068ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	691a      	ldr	r2, [r3, #16]
 80068b4:	887b      	ldrh	r3, [r7, #2]
 80068b6:	4013      	ands	r3, r2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80068bc:	2301      	movs	r3, #1
 80068be:	73fb      	strb	r3, [r7, #15]
 80068c0:	e001      	b.n	80068c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80068c2:	2300      	movs	r3, #0
 80068c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	460b      	mov	r3, r1
 80068de:	807b      	strh	r3, [r7, #2]
 80068e0:	4613      	mov	r3, r2
 80068e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80068e4:	787b      	ldrb	r3, [r7, #1]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80068ea:	887a      	ldrh	r2, [r7, #2]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80068f0:	e003      	b.n	80068fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80068f2:	887b      	ldrh	r3, [r7, #2]
 80068f4:	041a      	lsls	r2, r3, #16
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	619a      	str	r2, [r3, #24]
}
 80068fa:	bf00      	nop
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
	...

08006908 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	4603      	mov	r3, r0
 8006910:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006912:	4b08      	ldr	r3, [pc, #32]	@ (8006934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006914:	695a      	ldr	r2, [r3, #20]
 8006916:	88fb      	ldrh	r3, [r7, #6]
 8006918:	4013      	ands	r3, r2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d006      	beq.n	800692c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800691e:	4a05      	ldr	r2, [pc, #20]	@ (8006934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006920:	88fb      	ldrh	r3, [r7, #6]
 8006922:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006924:	88fb      	ldrh	r3, [r7, #6]
 8006926:	4618      	mov	r0, r3
 8006928:	f7fa ffa0 	bl	800186c <HAL_GPIO_EXTI_Callback>
  }
}
 800692c:	bf00      	nop
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	40013c00 	.word	0x40013c00

08006938 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e12b      	b.n	8006ba2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d106      	bne.n	8006964 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7fc f826 	bl	80029b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2224      	movs	r2, #36	@ 0x24
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 0201 	bic.w	r2, r2, #1
 800697a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800698a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800699a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800699c:	f001 fc10 	bl	80081c0 <HAL_RCC_GetPCLK1Freq>
 80069a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	4a81      	ldr	r2, [pc, #516]	@ (8006bac <HAL_I2C_Init+0x274>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d807      	bhi.n	80069bc <HAL_I2C_Init+0x84>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4a80      	ldr	r2, [pc, #512]	@ (8006bb0 <HAL_I2C_Init+0x278>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	bf94      	ite	ls
 80069b4:	2301      	movls	r3, #1
 80069b6:	2300      	movhi	r3, #0
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	e006      	b.n	80069ca <HAL_I2C_Init+0x92>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4a7d      	ldr	r2, [pc, #500]	@ (8006bb4 <HAL_I2C_Init+0x27c>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	bf94      	ite	ls
 80069c4:	2301      	movls	r3, #1
 80069c6:	2300      	movhi	r3, #0
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e0e7      	b.n	8006ba2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	4a78      	ldr	r2, [pc, #480]	@ (8006bb8 <HAL_I2C_Init+0x280>)
 80069d6:	fba2 2303 	umull	r2, r3, r2, r3
 80069da:	0c9b      	lsrs	r3, r3, #18
 80069dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	4a6a      	ldr	r2, [pc, #424]	@ (8006bac <HAL_I2C_Init+0x274>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d802      	bhi.n	8006a0c <HAL_I2C_Init+0xd4>
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	e009      	b.n	8006a20 <HAL_I2C_Init+0xe8>
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006a12:	fb02 f303 	mul.w	r3, r2, r3
 8006a16:	4a69      	ldr	r2, [pc, #420]	@ (8006bbc <HAL_I2C_Init+0x284>)
 8006a18:	fba2 2303 	umull	r2, r3, r2, r3
 8006a1c:	099b      	lsrs	r3, r3, #6
 8006a1e:	3301      	adds	r3, #1
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	6812      	ldr	r2, [r2, #0]
 8006a24:	430b      	orrs	r3, r1
 8006a26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006a32:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	495c      	ldr	r1, [pc, #368]	@ (8006bac <HAL_I2C_Init+0x274>)
 8006a3c:	428b      	cmp	r3, r1
 8006a3e:	d819      	bhi.n	8006a74 <HAL_I2C_Init+0x13c>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	1e59      	subs	r1, r3, #1
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	005b      	lsls	r3, r3, #1
 8006a4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a4e:	1c59      	adds	r1, r3, #1
 8006a50:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006a54:	400b      	ands	r3, r1
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00a      	beq.n	8006a70 <HAL_I2C_Init+0x138>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	1e59      	subs	r1, r3, #1
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	005b      	lsls	r3, r3, #1
 8006a64:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a68:	3301      	adds	r3, #1
 8006a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a6e:	e051      	b.n	8006b14 <HAL_I2C_Init+0x1dc>
 8006a70:	2304      	movs	r3, #4
 8006a72:	e04f      	b.n	8006b14 <HAL_I2C_Init+0x1dc>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d111      	bne.n	8006aa0 <HAL_I2C_Init+0x168>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	1e58      	subs	r0, r3, #1
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6859      	ldr	r1, [r3, #4]
 8006a84:	460b      	mov	r3, r1
 8006a86:	005b      	lsls	r3, r3, #1
 8006a88:	440b      	add	r3, r1
 8006a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a8e:	3301      	adds	r3, #1
 8006a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	bf0c      	ite	eq
 8006a98:	2301      	moveq	r3, #1
 8006a9a:	2300      	movne	r3, #0
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	e012      	b.n	8006ac6 <HAL_I2C_Init+0x18e>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	1e58      	subs	r0, r3, #1
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6859      	ldr	r1, [r3, #4]
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	440b      	add	r3, r1
 8006aae:	0099      	lsls	r1, r3, #2
 8006ab0:	440b      	add	r3, r1
 8006ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	bf0c      	ite	eq
 8006ac0:	2301      	moveq	r3, #1
 8006ac2:	2300      	movne	r3, #0
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <HAL_I2C_Init+0x196>
 8006aca:	2301      	movs	r3, #1
 8006acc:	e022      	b.n	8006b14 <HAL_I2C_Init+0x1dc>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10e      	bne.n	8006af4 <HAL_I2C_Init+0x1bc>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	1e58      	subs	r0, r3, #1
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6859      	ldr	r1, [r3, #4]
 8006ade:	460b      	mov	r3, r1
 8006ae0:	005b      	lsls	r3, r3, #1
 8006ae2:	440b      	add	r3, r1
 8006ae4:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ae8:	3301      	adds	r3, #1
 8006aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006af2:	e00f      	b.n	8006b14 <HAL_I2C_Init+0x1dc>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	1e58      	subs	r0, r3, #1
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6859      	ldr	r1, [r3, #4]
 8006afc:	460b      	mov	r3, r1
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	440b      	add	r3, r1
 8006b02:	0099      	lsls	r1, r3, #2
 8006b04:	440b      	add	r3, r1
 8006b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b14:	6879      	ldr	r1, [r7, #4]
 8006b16:	6809      	ldr	r1, [r1, #0]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	69da      	ldr	r2, [r3, #28]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	430a      	orrs	r2, r1
 8006b36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006b42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	6911      	ldr	r1, [r2, #16]
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	68d2      	ldr	r2, [r2, #12]
 8006b4e:	4311      	orrs	r1, r2
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	6812      	ldr	r2, [r2, #0]
 8006b54:	430b      	orrs	r3, r1
 8006b56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	695a      	ldr	r2, [r3, #20]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	431a      	orrs	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	430a      	orrs	r2, r1
 8006b72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 0201 	orr.w	r2, r2, #1
 8006b82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	000186a0 	.word	0x000186a0
 8006bb0:	001e847f 	.word	0x001e847f
 8006bb4:	003d08ff 	.word	0x003d08ff
 8006bb8:	431bde83 	.word	0x431bde83
 8006bbc:	10624dd3 	.word	0x10624dd3

08006bc0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b088      	sub	sp, #32
 8006bc4:	af02      	add	r7, sp, #8
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	607a      	str	r2, [r7, #4]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	460b      	mov	r3, r1
 8006bce:	817b      	strh	r3, [r7, #10]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006bd4:	f7ff fb0e 	bl	80061f4 <HAL_GetTick>
 8006bd8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b20      	cmp	r3, #32
 8006be4:	f040 80e0 	bne.w	8006da8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	2319      	movs	r3, #25
 8006bee:	2201      	movs	r2, #1
 8006bf0:	4970      	ldr	r1, [pc, #448]	@ (8006db4 <HAL_I2C_Master_Transmit+0x1f4>)
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 fc7e 	bl	80074f4 <I2C_WaitOnFlagUntilTimeout>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d001      	beq.n	8006c02 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006bfe:	2302      	movs	r3, #2
 8006c00:	e0d3      	b.n	8006daa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d101      	bne.n	8006c10 <HAL_I2C_Master_Transmit+0x50>
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	e0cc      	b.n	8006daa <HAL_I2C_Master_Transmit+0x1ea>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d007      	beq.n	8006c36 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f042 0201 	orr.w	r2, r2, #1
 8006c34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2221      	movs	r2, #33	@ 0x21
 8006c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2210      	movs	r2, #16
 8006c52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	893a      	ldrh	r2, [r7, #8]
 8006c66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	4a50      	ldr	r2, [pc, #320]	@ (8006db8 <HAL_I2C_Master_Transmit+0x1f8>)
 8006c76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006c78:	8979      	ldrh	r1, [r7, #10]
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	6a3a      	ldr	r2, [r7, #32]
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f000 face 	bl	8007220 <I2C_MasterRequestWrite>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e08d      	b.n	8006daa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c8e:	2300      	movs	r3, #0
 8006c90:	613b      	str	r3, [r7, #16]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	613b      	str	r3, [r7, #16]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	613b      	str	r3, [r7, #16]
 8006ca2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006ca4:	e066      	b.n	8006d74 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	6a39      	ldr	r1, [r7, #32]
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f000 fd3c 	bl	8007728 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00d      	beq.n	8006cd2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cba:	2b04      	cmp	r3, #4
 8006cbc:	d107      	bne.n	8006cce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ccc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e06b      	b.n	8006daa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd6:	781a      	ldrb	r2, [r3, #0]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce2:	1c5a      	adds	r2, r3, #1
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	695b      	ldr	r3, [r3, #20]
 8006d08:	f003 0304 	and.w	r3, r3, #4
 8006d0c:	2b04      	cmp	r3, #4
 8006d0e:	d11b      	bne.n	8006d48 <HAL_I2C_Master_Transmit+0x188>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d017      	beq.n	8006d48 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1c:	781a      	ldrb	r2, [r3, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	3b01      	subs	r3, #1
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d40:	3b01      	subs	r3, #1
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	6a39      	ldr	r1, [r7, #32]
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f000 fd33 	bl	80077b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00d      	beq.n	8006d74 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5c:	2b04      	cmp	r3, #4
 8006d5e:	d107      	bne.n	8006d70 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d6e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e01a      	b.n	8006daa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d194      	bne.n	8006ca6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006da4:	2300      	movs	r3, #0
 8006da6:	e000      	b.n	8006daa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006da8:	2302      	movs	r3, #2
  }
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3718      	adds	r7, #24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	00100002 	.word	0x00100002
 8006db8:	ffff0000 	.word	0xffff0000

08006dbc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b08c      	sub	sp, #48	@ 0x30
 8006dc0:	af02      	add	r7, sp, #8
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	4608      	mov	r0, r1
 8006dc6:	4611      	mov	r1, r2
 8006dc8:	461a      	mov	r2, r3
 8006dca:	4603      	mov	r3, r0
 8006dcc:	817b      	strh	r3, [r7, #10]
 8006dce:	460b      	mov	r3, r1
 8006dd0:	813b      	strh	r3, [r7, #8]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006dd6:	f7ff fa0d 	bl	80061f4 <HAL_GetTick>
 8006dda:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	2b20      	cmp	r3, #32
 8006de6:	f040 8214 	bne.w	8007212 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	2319      	movs	r3, #25
 8006df0:	2201      	movs	r2, #1
 8006df2:	497b      	ldr	r1, [pc, #492]	@ (8006fe0 <HAL_I2C_Mem_Read+0x224>)
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f000 fb7d 	bl	80074f4 <I2C_WaitOnFlagUntilTimeout>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d001      	beq.n	8006e04 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006e00:	2302      	movs	r3, #2
 8006e02:	e207      	b.n	8007214 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d101      	bne.n	8006e12 <HAL_I2C_Mem_Read+0x56>
 8006e0e:	2302      	movs	r3, #2
 8006e10:	e200      	b.n	8007214 <HAL_I2C_Mem_Read+0x458>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0301 	and.w	r3, r3, #1
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d007      	beq.n	8006e38 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f042 0201 	orr.w	r2, r2, #1
 8006e36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2222      	movs	r2, #34	@ 0x22
 8006e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2240      	movs	r2, #64	@ 0x40
 8006e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006e68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	4a5b      	ldr	r2, [pc, #364]	@ (8006fe4 <HAL_I2C_Mem_Read+0x228>)
 8006e78:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e7a:	88f8      	ldrh	r0, [r7, #6]
 8006e7c:	893a      	ldrh	r2, [r7, #8]
 8006e7e:	8979      	ldrh	r1, [r7, #10]
 8006e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e82:	9301      	str	r3, [sp, #4]
 8006e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e86:	9300      	str	r3, [sp, #0]
 8006e88:	4603      	mov	r3, r0
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 fa4a 	bl	8007324 <I2C_RequestMemoryRead>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e1bc      	b.n	8007214 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d113      	bne.n	8006eca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	623b      	str	r3, [r7, #32]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	623b      	str	r3, [r7, #32]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	623b      	str	r3, [r7, #32]
 8006eb6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ec6:	601a      	str	r2, [r3, #0]
 8006ec8:	e190      	b.n	80071ec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d11b      	bne.n	8006f0a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ee0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	61fb      	str	r3, [r7, #28]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	61fb      	str	r3, [r7, #28]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	61fb      	str	r3, [r7, #28]
 8006ef6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f06:	601a      	str	r2, [r3, #0]
 8006f08:	e170      	b.n	80071ec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d11b      	bne.n	8006f4a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f20:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f32:	2300      	movs	r3, #0
 8006f34:	61bb      	str	r3, [r7, #24]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	695b      	ldr	r3, [r3, #20]
 8006f3c:	61bb      	str	r3, [r7, #24]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	61bb      	str	r3, [r7, #24]
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	e150      	b.n	80071ec <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	617b      	str	r3, [r7, #20]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	695b      	ldr	r3, [r3, #20]
 8006f54:	617b      	str	r3, [r7, #20]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	617b      	str	r3, [r7, #20]
 8006f5e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006f60:	e144      	b.n	80071ec <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	f200 80f1 	bhi.w	800714e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d123      	bne.n	8006fbc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f76:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f000 fc65 	bl	8007848 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d001      	beq.n	8006f88 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e145      	b.n	8007214 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	691a      	ldr	r2, [r3, #16]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f92:	b2d2      	uxtb	r2, r2
 8006f94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f9a:	1c5a      	adds	r2, r3, #1
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006fba:	e117      	b.n	80071ec <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d14e      	bne.n	8007062 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fca:	2200      	movs	r2, #0
 8006fcc:	4906      	ldr	r1, [pc, #24]	@ (8006fe8 <HAL_I2C_Mem_Read+0x22c>)
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 fa90 	bl	80074f4 <I2C_WaitOnFlagUntilTimeout>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d008      	beq.n	8006fec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e11a      	b.n	8007214 <HAL_I2C_Mem_Read+0x458>
 8006fde:	bf00      	nop
 8006fe0:	00100002 	.word	0x00100002
 8006fe4:	ffff0000 	.word	0xffff0000
 8006fe8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ffa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	691a      	ldr	r2, [r3, #16]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007006:	b2d2      	uxtb	r2, r2
 8007008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700e:	1c5a      	adds	r2, r3, #1
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007018:	3b01      	subs	r3, #1
 800701a:	b29a      	uxth	r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007024:	b29b      	uxth	r3, r3
 8007026:	3b01      	subs	r3, #1
 8007028:	b29a      	uxth	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	691a      	ldr	r2, [r3, #16]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007038:	b2d2      	uxtb	r2, r2
 800703a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007040:	1c5a      	adds	r2, r3, #1
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800704a:	3b01      	subs	r3, #1
 800704c:	b29a      	uxth	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007056:	b29b      	uxth	r3, r3
 8007058:	3b01      	subs	r3, #1
 800705a:	b29a      	uxth	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007060:	e0c4      	b.n	80071ec <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007068:	2200      	movs	r2, #0
 800706a:	496c      	ldr	r1, [pc, #432]	@ (800721c <HAL_I2C_Mem_Read+0x460>)
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f000 fa41 	bl	80074f4 <I2C_WaitOnFlagUntilTimeout>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d001      	beq.n	800707c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e0cb      	b.n	8007214 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800708a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	691a      	ldr	r2, [r3, #16]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007096:	b2d2      	uxtb	r2, r2
 8007098:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709e:	1c5a      	adds	r2, r3, #1
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070a8:	3b01      	subs	r3, #1
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	3b01      	subs	r3, #1
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80070be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c4:	2200      	movs	r2, #0
 80070c6:	4955      	ldr	r1, [pc, #340]	@ (800721c <HAL_I2C_Mem_Read+0x460>)
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 fa13 	bl	80074f4 <I2C_WaitOnFlagUntilTimeout>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e09d      	b.n	8007214 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	691a      	ldr	r2, [r3, #16]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f2:	b2d2      	uxtb	r2, r2
 80070f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070fa:	1c5a      	adds	r2, r3, #1
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007104:	3b01      	subs	r3, #1
 8007106:	b29a      	uxth	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007110:	b29b      	uxth	r3, r3
 8007112:	3b01      	subs	r3, #1
 8007114:	b29a      	uxth	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	691a      	ldr	r2, [r3, #16]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007124:	b2d2      	uxtb	r2, r2
 8007126:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800712c:	1c5a      	adds	r2, r3, #1
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007136:	3b01      	subs	r3, #1
 8007138:	b29a      	uxth	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007142:	b29b      	uxth	r3, r3
 8007144:	3b01      	subs	r3, #1
 8007146:	b29a      	uxth	r2, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800714c:	e04e      	b.n	80071ec <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800714e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007150:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f000 fb78 	bl	8007848 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e058      	b.n	8007214 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	691a      	ldr	r2, [r3, #16]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716c:	b2d2      	uxtb	r2, r2
 800716e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007174:	1c5a      	adds	r2, r3, #1
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800717e:	3b01      	subs	r3, #1
 8007180:	b29a      	uxth	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800718a:	b29b      	uxth	r3, r3
 800718c:	3b01      	subs	r3, #1
 800718e:	b29a      	uxth	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	f003 0304 	and.w	r3, r3, #4
 800719e:	2b04      	cmp	r3, #4
 80071a0:	d124      	bne.n	80071ec <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d107      	bne.n	80071ba <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071b8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	691a      	ldr	r2, [r3, #16]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071c4:	b2d2      	uxtb	r2, r2
 80071c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071cc:	1c5a      	adds	r2, r3, #1
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071d6:	3b01      	subs	r3, #1
 80071d8:	b29a      	uxth	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	3b01      	subs	r3, #1
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f47f aeb6 	bne.w	8006f62 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2220      	movs	r2, #32
 80071fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	e000      	b.n	8007214 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007212:	2302      	movs	r3, #2
  }
}
 8007214:	4618      	mov	r0, r3
 8007216:	3728      	adds	r7, #40	@ 0x28
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	00010004 	.word	0x00010004

08007220 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b088      	sub	sp, #32
 8007224:	af02      	add	r7, sp, #8
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	607a      	str	r2, [r7, #4]
 800722a:	603b      	str	r3, [r7, #0]
 800722c:	460b      	mov	r3, r1
 800722e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007234:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	2b08      	cmp	r3, #8
 800723a:	d006      	beq.n	800724a <I2C_MasterRequestWrite+0x2a>
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d003      	beq.n	800724a <I2C_MasterRequestWrite+0x2a>
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007248:	d108      	bne.n	800725c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007258:	601a      	str	r2, [r3, #0]
 800725a:	e00b      	b.n	8007274 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007260:	2b12      	cmp	r3, #18
 8007262:	d107      	bne.n	8007274 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007272:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f000 f937 	bl	80074f4 <I2C_WaitOnFlagUntilTimeout>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00d      	beq.n	80072a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007296:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800729a:	d103      	bne.n	80072a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e035      	b.n	8007314 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072b0:	d108      	bne.n	80072c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80072b2:	897b      	ldrh	r3, [r7, #10]
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	461a      	mov	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80072c0:	611a      	str	r2, [r3, #16]
 80072c2:	e01b      	b.n	80072fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80072c4:	897b      	ldrh	r3, [r7, #10]
 80072c6:	11db      	asrs	r3, r3, #7
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	f003 0306 	and.w	r3, r3, #6
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	f063 030f 	orn	r3, r3, #15
 80072d4:	b2da      	uxtb	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	490e      	ldr	r1, [pc, #56]	@ (800731c <I2C_MasterRequestWrite+0xfc>)
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 f980 	bl	80075e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e010      	b.n	8007314 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80072f2:	897b      	ldrh	r3, [r7, #10]
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	4907      	ldr	r1, [pc, #28]	@ (8007320 <I2C_MasterRequestWrite+0x100>)
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f000 f970 	bl	80075e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e000      	b.n	8007314 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3718      	adds	r7, #24
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	00010008 	.word	0x00010008
 8007320:	00010002 	.word	0x00010002

08007324 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b088      	sub	sp, #32
 8007328:	af02      	add	r7, sp, #8
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	4608      	mov	r0, r1
 800732e:	4611      	mov	r1, r2
 8007330:	461a      	mov	r2, r3
 8007332:	4603      	mov	r3, r0
 8007334:	817b      	strh	r3, [r7, #10]
 8007336:	460b      	mov	r3, r1
 8007338:	813b      	strh	r3, [r7, #8]
 800733a:	4613      	mov	r3, r2
 800733c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800734c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800735c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800735e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	2200      	movs	r2, #0
 8007366:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f000 f8c2 	bl	80074f4 <I2C_WaitOnFlagUntilTimeout>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00d      	beq.n	8007392 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007380:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007384:	d103      	bne.n	800738e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800738c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e0aa      	b.n	80074e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007392:	897b      	ldrh	r3, [r7, #10]
 8007394:	b2db      	uxtb	r3, r3
 8007396:	461a      	mov	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80073a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a4:	6a3a      	ldr	r2, [r7, #32]
 80073a6:	4952      	ldr	r1, [pc, #328]	@ (80074f0 <I2C_RequestMemoryRead+0x1cc>)
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 f91d 	bl	80075e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d001      	beq.n	80073b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e097      	b.n	80074e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073b8:	2300      	movs	r3, #0
 80073ba:	617b      	str	r3, [r7, #20]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	617b      	str	r3, [r7, #20]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	617b      	str	r3, [r7, #20]
 80073cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073d0:	6a39      	ldr	r1, [r7, #32]
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f000 f9a8 	bl	8007728 <I2C_WaitOnTXEFlagUntilTimeout>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00d      	beq.n	80073fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e2:	2b04      	cmp	r3, #4
 80073e4:	d107      	bne.n	80073f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e076      	b.n	80074e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80073fa:	88fb      	ldrh	r3, [r7, #6]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d105      	bne.n	800740c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007400:	893b      	ldrh	r3, [r7, #8]
 8007402:	b2da      	uxtb	r2, r3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	611a      	str	r2, [r3, #16]
 800740a:	e021      	b.n	8007450 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800740c:	893b      	ldrh	r3, [r7, #8]
 800740e:	0a1b      	lsrs	r3, r3, #8
 8007410:	b29b      	uxth	r3, r3
 8007412:	b2da      	uxtb	r2, r3
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800741a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800741c:	6a39      	ldr	r1, [r7, #32]
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f000 f982 	bl	8007728 <I2C_WaitOnTXEFlagUntilTimeout>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00d      	beq.n	8007446 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800742e:	2b04      	cmp	r3, #4
 8007430:	d107      	bne.n	8007442 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007440:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e050      	b.n	80074e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007446:	893b      	ldrh	r3, [r7, #8]
 8007448:	b2da      	uxtb	r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007450:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007452:	6a39      	ldr	r1, [r7, #32]
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 f967 	bl	8007728 <I2C_WaitOnTXEFlagUntilTimeout>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00d      	beq.n	800747c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007464:	2b04      	cmp	r3, #4
 8007466:	d107      	bne.n	8007478 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007476:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e035      	b.n	80074e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800748a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800748c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748e:	9300      	str	r3, [sp, #0]
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	2200      	movs	r2, #0
 8007494:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 f82b 	bl	80074f4 <I2C_WaitOnFlagUntilTimeout>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00d      	beq.n	80074c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074b2:	d103      	bne.n	80074bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	e013      	b.n	80074e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80074c0:	897b      	ldrh	r3, [r7, #10]
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	f043 0301 	orr.w	r3, r3, #1
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d2:	6a3a      	ldr	r2, [r7, #32]
 80074d4:	4906      	ldr	r1, [pc, #24]	@ (80074f0 <I2C_RequestMemoryRead+0x1cc>)
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f000 f886 	bl	80075e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e000      	b.n	80074e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	00010002 	.word	0x00010002

080074f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	603b      	str	r3, [r7, #0]
 8007500:	4613      	mov	r3, r2
 8007502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007504:	e048      	b.n	8007598 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800750c:	d044      	beq.n	8007598 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800750e:	f7fe fe71 	bl	80061f4 <HAL_GetTick>
 8007512:	4602      	mov	r2, r0
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	683a      	ldr	r2, [r7, #0]
 800751a:	429a      	cmp	r2, r3
 800751c:	d302      	bcc.n	8007524 <I2C_WaitOnFlagUntilTimeout+0x30>
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d139      	bne.n	8007598 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	0c1b      	lsrs	r3, r3, #16
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b01      	cmp	r3, #1
 800752c:	d10d      	bne.n	800754a <I2C_WaitOnFlagUntilTimeout+0x56>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	695b      	ldr	r3, [r3, #20]
 8007534:	43da      	mvns	r2, r3
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	4013      	ands	r3, r2
 800753a:	b29b      	uxth	r3, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	bf0c      	ite	eq
 8007540:	2301      	moveq	r3, #1
 8007542:	2300      	movne	r3, #0
 8007544:	b2db      	uxtb	r3, r3
 8007546:	461a      	mov	r2, r3
 8007548:	e00c      	b.n	8007564 <I2C_WaitOnFlagUntilTimeout+0x70>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	43da      	mvns	r2, r3
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	4013      	ands	r3, r2
 8007556:	b29b      	uxth	r3, r3
 8007558:	2b00      	cmp	r3, #0
 800755a:	bf0c      	ite	eq
 800755c:	2301      	moveq	r3, #1
 800755e:	2300      	movne	r3, #0
 8007560:	b2db      	uxtb	r3, r3
 8007562:	461a      	mov	r2, r3
 8007564:	79fb      	ldrb	r3, [r7, #7]
 8007566:	429a      	cmp	r2, r3
 8007568:	d116      	bne.n	8007598 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2220      	movs	r2, #32
 8007574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007584:	f043 0220 	orr.w	r2, r3, #32
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	e023      	b.n	80075e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	0c1b      	lsrs	r3, r3, #16
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d10d      	bne.n	80075be <I2C_WaitOnFlagUntilTimeout+0xca>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	43da      	mvns	r2, r3
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	4013      	ands	r3, r2
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	bf0c      	ite	eq
 80075b4:	2301      	moveq	r3, #1
 80075b6:	2300      	movne	r3, #0
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	461a      	mov	r2, r3
 80075bc:	e00c      	b.n	80075d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	43da      	mvns	r2, r3
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	4013      	ands	r3, r2
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	bf0c      	ite	eq
 80075d0:	2301      	moveq	r3, #1
 80075d2:	2300      	movne	r3, #0
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	461a      	mov	r2, r3
 80075d8:	79fb      	ldrb	r3, [r7, #7]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d093      	beq.n	8007506 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
 80075f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80075f6:	e071      	b.n	80076dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007606:	d123      	bne.n	8007650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007616:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007620:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2220      	movs	r2, #32
 800762c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800763c:	f043 0204 	orr.w	r2, r3, #4
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e067      	b.n	8007720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007656:	d041      	beq.n	80076dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007658:	f7fe fdcc 	bl	80061f4 <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	429a      	cmp	r2, r3
 8007666:	d302      	bcc.n	800766e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d136      	bne.n	80076dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	0c1b      	lsrs	r3, r3, #16
 8007672:	b2db      	uxtb	r3, r3
 8007674:	2b01      	cmp	r3, #1
 8007676:	d10c      	bne.n	8007692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	43da      	mvns	r2, r3
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	4013      	ands	r3, r2
 8007684:	b29b      	uxth	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	bf14      	ite	ne
 800768a:	2301      	movne	r3, #1
 800768c:	2300      	moveq	r3, #0
 800768e:	b2db      	uxtb	r3, r3
 8007690:	e00b      	b.n	80076aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	43da      	mvns	r2, r3
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	4013      	ands	r3, r2
 800769e:	b29b      	uxth	r3, r3
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	bf14      	ite	ne
 80076a4:	2301      	movne	r3, #1
 80076a6:	2300      	moveq	r3, #0
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d016      	beq.n	80076dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2220      	movs	r2, #32
 80076b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c8:	f043 0220 	orr.w	r2, r3, #32
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e021      	b.n	8007720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	0c1b      	lsrs	r3, r3, #16
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d10c      	bne.n	8007700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	695b      	ldr	r3, [r3, #20]
 80076ec:	43da      	mvns	r2, r3
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	4013      	ands	r3, r2
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	bf14      	ite	ne
 80076f8:	2301      	movne	r3, #1
 80076fa:	2300      	moveq	r3, #0
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	e00b      	b.n	8007718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	43da      	mvns	r2, r3
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	4013      	ands	r3, r2
 800770c:	b29b      	uxth	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	bf14      	ite	ne
 8007712:	2301      	movne	r3, #1
 8007714:	2300      	moveq	r3, #0
 8007716:	b2db      	uxtb	r3, r3
 8007718:	2b00      	cmp	r3, #0
 800771a:	f47f af6d 	bne.w	80075f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007734:	e034      	b.n	80077a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f000 f8e3 	bl	8007902 <I2C_IsAcknowledgeFailed>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e034      	b.n	80077b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774c:	d028      	beq.n	80077a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800774e:	f7fe fd51 	bl	80061f4 <HAL_GetTick>
 8007752:	4602      	mov	r2, r0
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	429a      	cmp	r2, r3
 800775c:	d302      	bcc.n	8007764 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d11d      	bne.n	80077a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800776e:	2b80      	cmp	r3, #128	@ 0x80
 8007770:	d016      	beq.n	80077a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2220      	movs	r2, #32
 800777c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800778c:	f043 0220 	orr.w	r2, r3, #32
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e007      	b.n	80077b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077aa:	2b80      	cmp	r3, #128	@ 0x80
 80077ac:	d1c3      	bne.n	8007736 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80077c4:	e034      	b.n	8007830 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f000 f89b 	bl	8007902 <I2C_IsAcknowledgeFailed>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e034      	b.n	8007840 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077dc:	d028      	beq.n	8007830 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077de:	f7fe fd09 	bl	80061f4 <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d302      	bcc.n	80077f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d11d      	bne.n	8007830 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	f003 0304 	and.w	r3, r3, #4
 80077fe:	2b04      	cmp	r3, #4
 8007800:	d016      	beq.n	8007830 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2220      	movs	r2, #32
 800780c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800781c:	f043 0220 	orr.w	r2, r3, #32
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e007      	b.n	8007840 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	f003 0304 	and.w	r3, r3, #4
 800783a:	2b04      	cmp	r3, #4
 800783c:	d1c3      	bne.n	80077c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007854:	e049      	b.n	80078ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	f003 0310 	and.w	r3, r3, #16
 8007860:	2b10      	cmp	r3, #16
 8007862:	d119      	bne.n	8007898 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f06f 0210 	mvn.w	r2, #16
 800786c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2220      	movs	r2, #32
 8007878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e030      	b.n	80078fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007898:	f7fe fcac 	bl	80061f4 <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d302      	bcc.n	80078ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d11d      	bne.n	80078ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	695b      	ldr	r3, [r3, #20]
 80078b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078b8:	2b40      	cmp	r3, #64	@ 0x40
 80078ba:	d016      	beq.n	80078ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2220      	movs	r2, #32
 80078c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d6:	f043 0220 	orr.w	r2, r3, #32
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e007      	b.n	80078fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078f4:	2b40      	cmp	r3, #64	@ 0x40
 80078f6:	d1ae      	bne.n	8007856 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007902:	b480      	push	{r7}
 8007904:	b083      	sub	sp, #12
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	695b      	ldr	r3, [r3, #20]
 8007910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007918:	d11b      	bne.n	8007952 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007922:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2220      	movs	r2, #32
 800792e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800793e:	f043 0204 	orr.w	r2, r3, #4
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e000      	b.n	8007954 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d101      	bne.n	8007972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e267      	b.n	8007e42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 0301 	and.w	r3, r3, #1
 800797a:	2b00      	cmp	r3, #0
 800797c:	d075      	beq.n	8007a6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800797e:	4b88      	ldr	r3, [pc, #544]	@ (8007ba0 <HAL_RCC_OscConfig+0x240>)
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f003 030c 	and.w	r3, r3, #12
 8007986:	2b04      	cmp	r3, #4
 8007988:	d00c      	beq.n	80079a4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800798a:	4b85      	ldr	r3, [pc, #532]	@ (8007ba0 <HAL_RCC_OscConfig+0x240>)
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007992:	2b08      	cmp	r3, #8
 8007994:	d112      	bne.n	80079bc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007996:	4b82      	ldr	r3, [pc, #520]	@ (8007ba0 <HAL_RCC_OscConfig+0x240>)
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800799e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079a2:	d10b      	bne.n	80079bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079a4:	4b7e      	ldr	r3, [pc, #504]	@ (8007ba0 <HAL_RCC_OscConfig+0x240>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d05b      	beq.n	8007a68 <HAL_RCC_OscConfig+0x108>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d157      	bne.n	8007a68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e242      	b.n	8007e42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079c4:	d106      	bne.n	80079d4 <HAL_RCC_OscConfig+0x74>
 80079c6:	4b76      	ldr	r3, [pc, #472]	@ (8007ba0 <HAL_RCC_OscConfig+0x240>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a75      	ldr	r2, [pc, #468]	@ (8007ba0 <HAL_RCC_OscConfig+0x240>)
 80079cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079d0:	6013      	str	r3, [r2, #0]
 80079d2:	e01d      	b.n	8007a10 <HAL_RCC_OscConfig+0xb0>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80079dc:	d10c      	bne.n	80079f8 <HAL_RCC_OscConfig+0x98>
 80079de:	4b70      	ldr	r3, [pc, #448]	@ (8007ba0 <HAL_RCC_OscConfig+0x240>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a6f      	ldr	r2, [pc, #444]	@ (8007ba0 <HAL_RCC_OscConfig+0x240>)
 80079e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80079e8:	6013      	str	r3, [r2, #0]
 80079ea:	4b6d      	ldr	r3, [pc, #436]	@ (8007ba0 <HAL_RCC_OscConfig+0x240>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a6c      	ldr	r2, [pc, #432]	@ (8007ba0 <HAL_RCC_OscConfig+0x240>)
 80079f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079f4:	6013      	str	r3, [r2, #0]
 80079f6:	e00b      	b.n	8007a10 <HAL_RCC_OscConfig+0xb0>
 80079f8:	4b69      	ldr	r3, [pc, #420]	@ (8007ba0 <HAL_RCC_OscConfig+0x240>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a68      	ldr	r2, [pc, #416]	@ (8007ba0 <HAL_RCC_OscConfig+0x240>)
 80079fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a02:	6013      	str	r3, [r2, #0]
 8007a04:	4b66      	ldr	r3, [pc, #408]	@ (8007ba0 <HAL_RCC_OscConfig+0x240>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a65      	ldr	r2, [pc, #404]	@ (8007ba0 <HAL_RCC_OscConfig+0x240>)
 8007a0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d013      	beq.n	8007a40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a18:	f7fe fbec 	bl	80061f4 <HAL_GetTick>
 8007a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a1e:	e008      	b.n	8007a32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a20:	f7fe fbe8 	bl	80061f4 <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	2b64      	cmp	r3, #100	@ 0x64
 8007a2c:	d901      	bls.n	8007a32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e207      	b.n	8007e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a32:	4b5b      	ldr	r3, [pc, #364]	@ (8007ba0 <HAL_RCC_OscConfig+0x240>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d0f0      	beq.n	8007a20 <HAL_RCC_OscConfig+0xc0>
 8007a3e:	e014      	b.n	8007a6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a40:	f7fe fbd8 	bl	80061f4 <HAL_GetTick>
 8007a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a46:	e008      	b.n	8007a5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a48:	f7fe fbd4 	bl	80061f4 <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	2b64      	cmp	r3, #100	@ 0x64
 8007a54:	d901      	bls.n	8007a5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e1f3      	b.n	8007e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a5a:	4b51      	ldr	r3, [pc, #324]	@ (8007ba0 <HAL_RCC_OscConfig+0x240>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1f0      	bne.n	8007a48 <HAL_RCC_OscConfig+0xe8>
 8007a66:	e000      	b.n	8007a6a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0302 	and.w	r3, r3, #2
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d063      	beq.n	8007b3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007a76:	4b4a      	ldr	r3, [pc, #296]	@ (8007ba0 <HAL_RCC_OscConfig+0x240>)
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f003 030c 	and.w	r3, r3, #12
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00b      	beq.n	8007a9a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a82:	4b47      	ldr	r3, [pc, #284]	@ (8007ba0 <HAL_RCC_OscConfig+0x240>)
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007a8a:	2b08      	cmp	r3, #8
 8007a8c:	d11c      	bne.n	8007ac8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a8e:	4b44      	ldr	r3, [pc, #272]	@ (8007ba0 <HAL_RCC_OscConfig+0x240>)
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d116      	bne.n	8007ac8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a9a:	4b41      	ldr	r3, [pc, #260]	@ (8007ba0 <HAL_RCC_OscConfig+0x240>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0302 	and.w	r3, r3, #2
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d005      	beq.n	8007ab2 <HAL_RCC_OscConfig+0x152>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d001      	beq.n	8007ab2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e1c7      	b.n	8007e42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ab2:	4b3b      	ldr	r3, [pc, #236]	@ (8007ba0 <HAL_RCC_OscConfig+0x240>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	00db      	lsls	r3, r3, #3
 8007ac0:	4937      	ldr	r1, [pc, #220]	@ (8007ba0 <HAL_RCC_OscConfig+0x240>)
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ac6:	e03a      	b.n	8007b3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d020      	beq.n	8007b12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ad0:	4b34      	ldr	r3, [pc, #208]	@ (8007ba4 <HAL_RCC_OscConfig+0x244>)
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ad6:	f7fe fb8d 	bl	80061f4 <HAL_GetTick>
 8007ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007adc:	e008      	b.n	8007af0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ade:	f7fe fb89 	bl	80061f4 <HAL_GetTick>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d901      	bls.n	8007af0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007aec:	2303      	movs	r3, #3
 8007aee:	e1a8      	b.n	8007e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007af0:	4b2b      	ldr	r3, [pc, #172]	@ (8007ba0 <HAL_RCC_OscConfig+0x240>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 0302 	and.w	r3, r3, #2
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d0f0      	beq.n	8007ade <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007afc:	4b28      	ldr	r3, [pc, #160]	@ (8007ba0 <HAL_RCC_OscConfig+0x240>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	00db      	lsls	r3, r3, #3
 8007b0a:	4925      	ldr	r1, [pc, #148]	@ (8007ba0 <HAL_RCC_OscConfig+0x240>)
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	600b      	str	r3, [r1, #0]
 8007b10:	e015      	b.n	8007b3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b12:	4b24      	ldr	r3, [pc, #144]	@ (8007ba4 <HAL_RCC_OscConfig+0x244>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b18:	f7fe fb6c 	bl	80061f4 <HAL_GetTick>
 8007b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b1e:	e008      	b.n	8007b32 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b20:	f7fe fb68 	bl	80061f4 <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d901      	bls.n	8007b32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e187      	b.n	8007e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b32:	4b1b      	ldr	r3, [pc, #108]	@ (8007ba0 <HAL_RCC_OscConfig+0x240>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0302 	and.w	r3, r3, #2
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1f0      	bne.n	8007b20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 0308 	and.w	r3, r3, #8
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d036      	beq.n	8007bb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	695b      	ldr	r3, [r3, #20]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d016      	beq.n	8007b80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b52:	4b15      	ldr	r3, [pc, #84]	@ (8007ba8 <HAL_RCC_OscConfig+0x248>)
 8007b54:	2201      	movs	r2, #1
 8007b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b58:	f7fe fb4c 	bl	80061f4 <HAL_GetTick>
 8007b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b5e:	e008      	b.n	8007b72 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b60:	f7fe fb48 	bl	80061f4 <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d901      	bls.n	8007b72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e167      	b.n	8007e42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b72:	4b0b      	ldr	r3, [pc, #44]	@ (8007ba0 <HAL_RCC_OscConfig+0x240>)
 8007b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b76:	f003 0302 	and.w	r3, r3, #2
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d0f0      	beq.n	8007b60 <HAL_RCC_OscConfig+0x200>
 8007b7e:	e01b      	b.n	8007bb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b80:	4b09      	ldr	r3, [pc, #36]	@ (8007ba8 <HAL_RCC_OscConfig+0x248>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b86:	f7fe fb35 	bl	80061f4 <HAL_GetTick>
 8007b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b8c:	e00e      	b.n	8007bac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b8e:	f7fe fb31 	bl	80061f4 <HAL_GetTick>
 8007b92:	4602      	mov	r2, r0
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d907      	bls.n	8007bac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e150      	b.n	8007e42 <HAL_RCC_OscConfig+0x4e2>
 8007ba0:	40023800 	.word	0x40023800
 8007ba4:	42470000 	.word	0x42470000
 8007ba8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bac:	4b88      	ldr	r3, [pc, #544]	@ (8007dd0 <HAL_RCC_OscConfig+0x470>)
 8007bae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bb0:	f003 0302 	and.w	r3, r3, #2
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1ea      	bne.n	8007b8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0304 	and.w	r3, r3, #4
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f000 8097 	beq.w	8007cf4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bca:	4b81      	ldr	r3, [pc, #516]	@ (8007dd0 <HAL_RCC_OscConfig+0x470>)
 8007bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10f      	bne.n	8007bf6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	60bb      	str	r3, [r7, #8]
 8007bda:	4b7d      	ldr	r3, [pc, #500]	@ (8007dd0 <HAL_RCC_OscConfig+0x470>)
 8007bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bde:	4a7c      	ldr	r2, [pc, #496]	@ (8007dd0 <HAL_RCC_OscConfig+0x470>)
 8007be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8007be6:	4b7a      	ldr	r3, [pc, #488]	@ (8007dd0 <HAL_RCC_OscConfig+0x470>)
 8007be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bee:	60bb      	str	r3, [r7, #8]
 8007bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bf6:	4b77      	ldr	r3, [pc, #476]	@ (8007dd4 <HAL_RCC_OscConfig+0x474>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d118      	bne.n	8007c34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c02:	4b74      	ldr	r3, [pc, #464]	@ (8007dd4 <HAL_RCC_OscConfig+0x474>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a73      	ldr	r2, [pc, #460]	@ (8007dd4 <HAL_RCC_OscConfig+0x474>)
 8007c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c0e:	f7fe faf1 	bl	80061f4 <HAL_GetTick>
 8007c12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c14:	e008      	b.n	8007c28 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c16:	f7fe faed 	bl	80061f4 <HAL_GetTick>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d901      	bls.n	8007c28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e10c      	b.n	8007e42 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c28:	4b6a      	ldr	r3, [pc, #424]	@ (8007dd4 <HAL_RCC_OscConfig+0x474>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d0f0      	beq.n	8007c16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d106      	bne.n	8007c4a <HAL_RCC_OscConfig+0x2ea>
 8007c3c:	4b64      	ldr	r3, [pc, #400]	@ (8007dd0 <HAL_RCC_OscConfig+0x470>)
 8007c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c40:	4a63      	ldr	r2, [pc, #396]	@ (8007dd0 <HAL_RCC_OscConfig+0x470>)
 8007c42:	f043 0301 	orr.w	r3, r3, #1
 8007c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c48:	e01c      	b.n	8007c84 <HAL_RCC_OscConfig+0x324>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	2b05      	cmp	r3, #5
 8007c50:	d10c      	bne.n	8007c6c <HAL_RCC_OscConfig+0x30c>
 8007c52:	4b5f      	ldr	r3, [pc, #380]	@ (8007dd0 <HAL_RCC_OscConfig+0x470>)
 8007c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c56:	4a5e      	ldr	r2, [pc, #376]	@ (8007dd0 <HAL_RCC_OscConfig+0x470>)
 8007c58:	f043 0304 	orr.w	r3, r3, #4
 8007c5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c5e:	4b5c      	ldr	r3, [pc, #368]	@ (8007dd0 <HAL_RCC_OscConfig+0x470>)
 8007c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c62:	4a5b      	ldr	r2, [pc, #364]	@ (8007dd0 <HAL_RCC_OscConfig+0x470>)
 8007c64:	f043 0301 	orr.w	r3, r3, #1
 8007c68:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c6a:	e00b      	b.n	8007c84 <HAL_RCC_OscConfig+0x324>
 8007c6c:	4b58      	ldr	r3, [pc, #352]	@ (8007dd0 <HAL_RCC_OscConfig+0x470>)
 8007c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c70:	4a57      	ldr	r2, [pc, #348]	@ (8007dd0 <HAL_RCC_OscConfig+0x470>)
 8007c72:	f023 0301 	bic.w	r3, r3, #1
 8007c76:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c78:	4b55      	ldr	r3, [pc, #340]	@ (8007dd0 <HAL_RCC_OscConfig+0x470>)
 8007c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c7c:	4a54      	ldr	r2, [pc, #336]	@ (8007dd0 <HAL_RCC_OscConfig+0x470>)
 8007c7e:	f023 0304 	bic.w	r3, r3, #4
 8007c82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d015      	beq.n	8007cb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c8c:	f7fe fab2 	bl	80061f4 <HAL_GetTick>
 8007c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c92:	e00a      	b.n	8007caa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c94:	f7fe faae 	bl	80061f4 <HAL_GetTick>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	1ad3      	subs	r3, r2, r3
 8007c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d901      	bls.n	8007caa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e0cb      	b.n	8007e42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007caa:	4b49      	ldr	r3, [pc, #292]	@ (8007dd0 <HAL_RCC_OscConfig+0x470>)
 8007cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cae:	f003 0302 	and.w	r3, r3, #2
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d0ee      	beq.n	8007c94 <HAL_RCC_OscConfig+0x334>
 8007cb6:	e014      	b.n	8007ce2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cb8:	f7fe fa9c 	bl	80061f4 <HAL_GetTick>
 8007cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cbe:	e00a      	b.n	8007cd6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cc0:	f7fe fa98 	bl	80061f4 <HAL_GetTick>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d901      	bls.n	8007cd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e0b5      	b.n	8007e42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cd6:	4b3e      	ldr	r3, [pc, #248]	@ (8007dd0 <HAL_RCC_OscConfig+0x470>)
 8007cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cda:	f003 0302 	and.w	r3, r3, #2
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1ee      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007ce2:	7dfb      	ldrb	r3, [r7, #23]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d105      	bne.n	8007cf4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ce8:	4b39      	ldr	r3, [pc, #228]	@ (8007dd0 <HAL_RCC_OscConfig+0x470>)
 8007cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cec:	4a38      	ldr	r2, [pc, #224]	@ (8007dd0 <HAL_RCC_OscConfig+0x470>)
 8007cee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007cf2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	699b      	ldr	r3, [r3, #24]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f000 80a1 	beq.w	8007e40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007cfe:	4b34      	ldr	r3, [pc, #208]	@ (8007dd0 <HAL_RCC_OscConfig+0x470>)
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f003 030c 	and.w	r3, r3, #12
 8007d06:	2b08      	cmp	r3, #8
 8007d08:	d05c      	beq.n	8007dc4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d141      	bne.n	8007d96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d12:	4b31      	ldr	r3, [pc, #196]	@ (8007dd8 <HAL_RCC_OscConfig+0x478>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d18:	f7fe fa6c 	bl	80061f4 <HAL_GetTick>
 8007d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d1e:	e008      	b.n	8007d32 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d20:	f7fe fa68 	bl	80061f4 <HAL_GetTick>
 8007d24:	4602      	mov	r2, r0
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d901      	bls.n	8007d32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e087      	b.n	8007e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d32:	4b27      	ldr	r3, [pc, #156]	@ (8007dd0 <HAL_RCC_OscConfig+0x470>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1f0      	bne.n	8007d20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	69da      	ldr	r2, [r3, #28]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	431a      	orrs	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d4c:	019b      	lsls	r3, r3, #6
 8007d4e:	431a      	orrs	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d54:	085b      	lsrs	r3, r3, #1
 8007d56:	3b01      	subs	r3, #1
 8007d58:	041b      	lsls	r3, r3, #16
 8007d5a:	431a      	orrs	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d60:	061b      	lsls	r3, r3, #24
 8007d62:	491b      	ldr	r1, [pc, #108]	@ (8007dd0 <HAL_RCC_OscConfig+0x470>)
 8007d64:	4313      	orrs	r3, r2
 8007d66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d68:	4b1b      	ldr	r3, [pc, #108]	@ (8007dd8 <HAL_RCC_OscConfig+0x478>)
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d6e:	f7fe fa41 	bl	80061f4 <HAL_GetTick>
 8007d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d74:	e008      	b.n	8007d88 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d76:	f7fe fa3d 	bl	80061f4 <HAL_GetTick>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	1ad3      	subs	r3, r2, r3
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	d901      	bls.n	8007d88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e05c      	b.n	8007e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d88:	4b11      	ldr	r3, [pc, #68]	@ (8007dd0 <HAL_RCC_OscConfig+0x470>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d0f0      	beq.n	8007d76 <HAL_RCC_OscConfig+0x416>
 8007d94:	e054      	b.n	8007e40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d96:	4b10      	ldr	r3, [pc, #64]	@ (8007dd8 <HAL_RCC_OscConfig+0x478>)
 8007d98:	2200      	movs	r2, #0
 8007d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d9c:	f7fe fa2a 	bl	80061f4 <HAL_GetTick>
 8007da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007da2:	e008      	b.n	8007db6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007da4:	f7fe fa26 	bl	80061f4 <HAL_GetTick>
 8007da8:	4602      	mov	r2, r0
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d901      	bls.n	8007db6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e045      	b.n	8007e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007db6:	4b06      	ldr	r3, [pc, #24]	@ (8007dd0 <HAL_RCC_OscConfig+0x470>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1f0      	bne.n	8007da4 <HAL_RCC_OscConfig+0x444>
 8007dc2:	e03d      	b.n	8007e40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	699b      	ldr	r3, [r3, #24]
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d107      	bne.n	8007ddc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e038      	b.n	8007e42 <HAL_RCC_OscConfig+0x4e2>
 8007dd0:	40023800 	.word	0x40023800
 8007dd4:	40007000 	.word	0x40007000
 8007dd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8007e4c <HAL_RCC_OscConfig+0x4ec>)
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d028      	beq.n	8007e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d121      	bne.n	8007e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d11a      	bne.n	8007e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007e12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d111      	bne.n	8007e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e22:	085b      	lsrs	r3, r3, #1
 8007e24:	3b01      	subs	r3, #1
 8007e26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d107      	bne.n	8007e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d001      	beq.n	8007e40 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e000      	b.n	8007e42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3718      	adds	r7, #24
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	40023800 	.word	0x40023800

08007e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d101      	bne.n	8007e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e0cc      	b.n	8007ffe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e64:	4b68      	ldr	r3, [pc, #416]	@ (8008008 <HAL_RCC_ClockConfig+0x1b8>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 0307 	and.w	r3, r3, #7
 8007e6c:	683a      	ldr	r2, [r7, #0]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d90c      	bls.n	8007e8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e72:	4b65      	ldr	r3, [pc, #404]	@ (8008008 <HAL_RCC_ClockConfig+0x1b8>)
 8007e74:	683a      	ldr	r2, [r7, #0]
 8007e76:	b2d2      	uxtb	r2, r2
 8007e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e7a:	4b63      	ldr	r3, [pc, #396]	@ (8008008 <HAL_RCC_ClockConfig+0x1b8>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0307 	and.w	r3, r3, #7
 8007e82:	683a      	ldr	r2, [r7, #0]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d001      	beq.n	8007e8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e0b8      	b.n	8007ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 0302 	and.w	r3, r3, #2
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d020      	beq.n	8007eda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 0304 	and.w	r3, r3, #4
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d005      	beq.n	8007eb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ea4:	4b59      	ldr	r3, [pc, #356]	@ (800800c <HAL_RCC_ClockConfig+0x1bc>)
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	4a58      	ldr	r2, [pc, #352]	@ (800800c <HAL_RCC_ClockConfig+0x1bc>)
 8007eaa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007eae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 0308 	and.w	r3, r3, #8
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d005      	beq.n	8007ec8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ebc:	4b53      	ldr	r3, [pc, #332]	@ (800800c <HAL_RCC_ClockConfig+0x1bc>)
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	4a52      	ldr	r2, [pc, #328]	@ (800800c <HAL_RCC_ClockConfig+0x1bc>)
 8007ec2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007ec6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ec8:	4b50      	ldr	r3, [pc, #320]	@ (800800c <HAL_RCC_ClockConfig+0x1bc>)
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	494d      	ldr	r1, [pc, #308]	@ (800800c <HAL_RCC_ClockConfig+0x1bc>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d044      	beq.n	8007f70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d107      	bne.n	8007efe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007eee:	4b47      	ldr	r3, [pc, #284]	@ (800800c <HAL_RCC_ClockConfig+0x1bc>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d119      	bne.n	8007f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e07f      	b.n	8007ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d003      	beq.n	8007f0e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f0a:	2b03      	cmp	r3, #3
 8007f0c:	d107      	bne.n	8007f1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f0e:	4b3f      	ldr	r3, [pc, #252]	@ (800800c <HAL_RCC_ClockConfig+0x1bc>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d109      	bne.n	8007f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e06f      	b.n	8007ffe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800800c <HAL_RCC_ClockConfig+0x1bc>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 0302 	and.w	r3, r3, #2
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e067      	b.n	8007ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f2e:	4b37      	ldr	r3, [pc, #220]	@ (800800c <HAL_RCC_ClockConfig+0x1bc>)
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f023 0203 	bic.w	r2, r3, #3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	4934      	ldr	r1, [pc, #208]	@ (800800c <HAL_RCC_ClockConfig+0x1bc>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f40:	f7fe f958 	bl	80061f4 <HAL_GetTick>
 8007f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f46:	e00a      	b.n	8007f5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f48:	f7fe f954 	bl	80061f4 <HAL_GetTick>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d901      	bls.n	8007f5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	e04f      	b.n	8007ffe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f5e:	4b2b      	ldr	r3, [pc, #172]	@ (800800c <HAL_RCC_ClockConfig+0x1bc>)
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	f003 020c 	and.w	r2, r3, #12
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d1eb      	bne.n	8007f48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f70:	4b25      	ldr	r3, [pc, #148]	@ (8008008 <HAL_RCC_ClockConfig+0x1b8>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 0307 	and.w	r3, r3, #7
 8007f78:	683a      	ldr	r2, [r7, #0]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d20c      	bcs.n	8007f98 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f7e:	4b22      	ldr	r3, [pc, #136]	@ (8008008 <HAL_RCC_ClockConfig+0x1b8>)
 8007f80:	683a      	ldr	r2, [r7, #0]
 8007f82:	b2d2      	uxtb	r2, r2
 8007f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f86:	4b20      	ldr	r3, [pc, #128]	@ (8008008 <HAL_RCC_ClockConfig+0x1b8>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0307 	and.w	r3, r3, #7
 8007f8e:	683a      	ldr	r2, [r7, #0]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d001      	beq.n	8007f98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	e032      	b.n	8007ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 0304 	and.w	r3, r3, #4
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d008      	beq.n	8007fb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007fa4:	4b19      	ldr	r3, [pc, #100]	@ (800800c <HAL_RCC_ClockConfig+0x1bc>)
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	4916      	ldr	r1, [pc, #88]	@ (800800c <HAL_RCC_ClockConfig+0x1bc>)
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0308 	and.w	r3, r3, #8
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d009      	beq.n	8007fd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007fc2:	4b12      	ldr	r3, [pc, #72]	@ (800800c <HAL_RCC_ClockConfig+0x1bc>)
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	00db      	lsls	r3, r3, #3
 8007fd0:	490e      	ldr	r1, [pc, #56]	@ (800800c <HAL_RCC_ClockConfig+0x1bc>)
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007fd6:	f000 f821 	bl	800801c <HAL_RCC_GetSysClockFreq>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800800c <HAL_RCC_ClockConfig+0x1bc>)
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	091b      	lsrs	r3, r3, #4
 8007fe2:	f003 030f 	and.w	r3, r3, #15
 8007fe6:	490a      	ldr	r1, [pc, #40]	@ (8008010 <HAL_RCC_ClockConfig+0x1c0>)
 8007fe8:	5ccb      	ldrb	r3, [r1, r3]
 8007fea:	fa22 f303 	lsr.w	r3, r2, r3
 8007fee:	4a09      	ldr	r2, [pc, #36]	@ (8008014 <HAL_RCC_ClockConfig+0x1c4>)
 8007ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007ff2:	4b09      	ldr	r3, [pc, #36]	@ (8008018 <HAL_RCC_ClockConfig+0x1c8>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7fe f8b8 	bl	800616c <HAL_InitTick>

  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	40023c00 	.word	0x40023c00
 800800c:	40023800 	.word	0x40023800
 8008010:	0800eab4 	.word	0x0800eab4
 8008014:	20000000 	.word	0x20000000
 8008018:	20000004 	.word	0x20000004

0800801c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800801c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008020:	b090      	sub	sp, #64	@ 0x40
 8008022:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008024:	2300      	movs	r3, #0
 8008026:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8008028:	2300      	movs	r3, #0
 800802a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800802c:	2300      	movs	r3, #0
 800802e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008030:	2300      	movs	r3, #0
 8008032:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008034:	4b59      	ldr	r3, [pc, #356]	@ (800819c <HAL_RCC_GetSysClockFreq+0x180>)
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	f003 030c 	and.w	r3, r3, #12
 800803c:	2b08      	cmp	r3, #8
 800803e:	d00d      	beq.n	800805c <HAL_RCC_GetSysClockFreq+0x40>
 8008040:	2b08      	cmp	r3, #8
 8008042:	f200 80a1 	bhi.w	8008188 <HAL_RCC_GetSysClockFreq+0x16c>
 8008046:	2b00      	cmp	r3, #0
 8008048:	d002      	beq.n	8008050 <HAL_RCC_GetSysClockFreq+0x34>
 800804a:	2b04      	cmp	r3, #4
 800804c:	d003      	beq.n	8008056 <HAL_RCC_GetSysClockFreq+0x3a>
 800804e:	e09b      	b.n	8008188 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008050:	4b53      	ldr	r3, [pc, #332]	@ (80081a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8008052:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008054:	e09b      	b.n	800818e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008056:	4b53      	ldr	r3, [pc, #332]	@ (80081a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8008058:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800805a:	e098      	b.n	800818e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800805c:	4b4f      	ldr	r3, [pc, #316]	@ (800819c <HAL_RCC_GetSysClockFreq+0x180>)
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008064:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008066:	4b4d      	ldr	r3, [pc, #308]	@ (800819c <HAL_RCC_GetSysClockFreq+0x180>)
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d028      	beq.n	80080c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008072:	4b4a      	ldr	r3, [pc, #296]	@ (800819c <HAL_RCC_GetSysClockFreq+0x180>)
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	099b      	lsrs	r3, r3, #6
 8008078:	2200      	movs	r2, #0
 800807a:	623b      	str	r3, [r7, #32]
 800807c:	627a      	str	r2, [r7, #36]	@ 0x24
 800807e:	6a3b      	ldr	r3, [r7, #32]
 8008080:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008084:	2100      	movs	r1, #0
 8008086:	4b47      	ldr	r3, [pc, #284]	@ (80081a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8008088:	fb03 f201 	mul.w	r2, r3, r1
 800808c:	2300      	movs	r3, #0
 800808e:	fb00 f303 	mul.w	r3, r0, r3
 8008092:	4413      	add	r3, r2
 8008094:	4a43      	ldr	r2, [pc, #268]	@ (80081a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8008096:	fba0 1202 	umull	r1, r2, r0, r2
 800809a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800809c:	460a      	mov	r2, r1
 800809e:	62ba      	str	r2, [r7, #40]	@ 0x28
 80080a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080a2:	4413      	add	r3, r2
 80080a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080a8:	2200      	movs	r2, #0
 80080aa:	61bb      	str	r3, [r7, #24]
 80080ac:	61fa      	str	r2, [r7, #28]
 80080ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80080b6:	f7f8 fdd7 	bl	8000c68 <__aeabi_uldivmod>
 80080ba:	4602      	mov	r2, r0
 80080bc:	460b      	mov	r3, r1
 80080be:	4613      	mov	r3, r2
 80080c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080c2:	e053      	b.n	800816c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080c4:	4b35      	ldr	r3, [pc, #212]	@ (800819c <HAL_RCC_GetSysClockFreq+0x180>)
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	099b      	lsrs	r3, r3, #6
 80080ca:	2200      	movs	r2, #0
 80080cc:	613b      	str	r3, [r7, #16]
 80080ce:	617a      	str	r2, [r7, #20]
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80080d6:	f04f 0b00 	mov.w	fp, #0
 80080da:	4652      	mov	r2, sl
 80080dc:	465b      	mov	r3, fp
 80080de:	f04f 0000 	mov.w	r0, #0
 80080e2:	f04f 0100 	mov.w	r1, #0
 80080e6:	0159      	lsls	r1, r3, #5
 80080e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80080ec:	0150      	lsls	r0, r2, #5
 80080ee:	4602      	mov	r2, r0
 80080f0:	460b      	mov	r3, r1
 80080f2:	ebb2 080a 	subs.w	r8, r2, sl
 80080f6:	eb63 090b 	sbc.w	r9, r3, fp
 80080fa:	f04f 0200 	mov.w	r2, #0
 80080fe:	f04f 0300 	mov.w	r3, #0
 8008102:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008106:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800810a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800810e:	ebb2 0408 	subs.w	r4, r2, r8
 8008112:	eb63 0509 	sbc.w	r5, r3, r9
 8008116:	f04f 0200 	mov.w	r2, #0
 800811a:	f04f 0300 	mov.w	r3, #0
 800811e:	00eb      	lsls	r3, r5, #3
 8008120:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008124:	00e2      	lsls	r2, r4, #3
 8008126:	4614      	mov	r4, r2
 8008128:	461d      	mov	r5, r3
 800812a:	eb14 030a 	adds.w	r3, r4, sl
 800812e:	603b      	str	r3, [r7, #0]
 8008130:	eb45 030b 	adc.w	r3, r5, fp
 8008134:	607b      	str	r3, [r7, #4]
 8008136:	f04f 0200 	mov.w	r2, #0
 800813a:	f04f 0300 	mov.w	r3, #0
 800813e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008142:	4629      	mov	r1, r5
 8008144:	028b      	lsls	r3, r1, #10
 8008146:	4621      	mov	r1, r4
 8008148:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800814c:	4621      	mov	r1, r4
 800814e:	028a      	lsls	r2, r1, #10
 8008150:	4610      	mov	r0, r2
 8008152:	4619      	mov	r1, r3
 8008154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008156:	2200      	movs	r2, #0
 8008158:	60bb      	str	r3, [r7, #8]
 800815a:	60fa      	str	r2, [r7, #12]
 800815c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008160:	f7f8 fd82 	bl	8000c68 <__aeabi_uldivmod>
 8008164:	4602      	mov	r2, r0
 8008166:	460b      	mov	r3, r1
 8008168:	4613      	mov	r3, r2
 800816a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800816c:	4b0b      	ldr	r3, [pc, #44]	@ (800819c <HAL_RCC_GetSysClockFreq+0x180>)
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	0c1b      	lsrs	r3, r3, #16
 8008172:	f003 0303 	and.w	r3, r3, #3
 8008176:	3301      	adds	r3, #1
 8008178:	005b      	lsls	r3, r3, #1
 800817a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800817c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800817e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008180:	fbb2 f3f3 	udiv	r3, r2, r3
 8008184:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008186:	e002      	b.n	800818e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008188:	4b05      	ldr	r3, [pc, #20]	@ (80081a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800818a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800818c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800818e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008190:	4618      	mov	r0, r3
 8008192:	3740      	adds	r7, #64	@ 0x40
 8008194:	46bd      	mov	sp, r7
 8008196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800819a:	bf00      	nop
 800819c:	40023800 	.word	0x40023800
 80081a0:	00f42400 	.word	0x00f42400
 80081a4:	017d7840 	.word	0x017d7840

080081a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081a8:	b480      	push	{r7}
 80081aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081ac:	4b03      	ldr	r3, [pc, #12]	@ (80081bc <HAL_RCC_GetHCLKFreq+0x14>)
 80081ae:	681b      	ldr	r3, [r3, #0]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	20000000 	.word	0x20000000

080081c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80081c4:	f7ff fff0 	bl	80081a8 <HAL_RCC_GetHCLKFreq>
 80081c8:	4602      	mov	r2, r0
 80081ca:	4b05      	ldr	r3, [pc, #20]	@ (80081e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	0a9b      	lsrs	r3, r3, #10
 80081d0:	f003 0307 	and.w	r3, r3, #7
 80081d4:	4903      	ldr	r1, [pc, #12]	@ (80081e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80081d6:	5ccb      	ldrb	r3, [r1, r3]
 80081d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081dc:	4618      	mov	r0, r3
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	40023800 	.word	0x40023800
 80081e4:	0800eac4 	.word	0x0800eac4

080081e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80081ec:	f7ff ffdc 	bl	80081a8 <HAL_RCC_GetHCLKFreq>
 80081f0:	4602      	mov	r2, r0
 80081f2:	4b05      	ldr	r3, [pc, #20]	@ (8008208 <HAL_RCC_GetPCLK2Freq+0x20>)
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	0b5b      	lsrs	r3, r3, #13
 80081f8:	f003 0307 	and.w	r3, r3, #7
 80081fc:	4903      	ldr	r1, [pc, #12]	@ (800820c <HAL_RCC_GetPCLK2Freq+0x24>)
 80081fe:	5ccb      	ldrb	r3, [r1, r3]
 8008200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008204:	4618      	mov	r0, r3
 8008206:	bd80      	pop	{r7, pc}
 8008208:	40023800 	.word	0x40023800
 800820c:	0800eac4 	.word	0x0800eac4

08008210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e041      	b.n	80082a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d106      	bne.n	800823c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7fa fc58 	bl	8002aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2202      	movs	r2, #2
 8008240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	3304      	adds	r3, #4
 800824c:	4619      	mov	r1, r3
 800824e:	4610      	mov	r0, r2
 8008250:	f000 fb24 	bl	800889c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
	...

080082b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b085      	sub	sp, #20
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d001      	beq.n	80082c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	e044      	b.n	8008352 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2202      	movs	r2, #2
 80082cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	68da      	ldr	r2, [r3, #12]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f042 0201 	orr.w	r2, r2, #1
 80082de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a1e      	ldr	r2, [pc, #120]	@ (8008360 <HAL_TIM_Base_Start_IT+0xb0>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d018      	beq.n	800831c <HAL_TIM_Base_Start_IT+0x6c>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082f2:	d013      	beq.n	800831c <HAL_TIM_Base_Start_IT+0x6c>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a1a      	ldr	r2, [pc, #104]	@ (8008364 <HAL_TIM_Base_Start_IT+0xb4>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d00e      	beq.n	800831c <HAL_TIM_Base_Start_IT+0x6c>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a19      	ldr	r2, [pc, #100]	@ (8008368 <HAL_TIM_Base_Start_IT+0xb8>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d009      	beq.n	800831c <HAL_TIM_Base_Start_IT+0x6c>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a17      	ldr	r2, [pc, #92]	@ (800836c <HAL_TIM_Base_Start_IT+0xbc>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d004      	beq.n	800831c <HAL_TIM_Base_Start_IT+0x6c>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a16      	ldr	r2, [pc, #88]	@ (8008370 <HAL_TIM_Base_Start_IT+0xc0>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d111      	bne.n	8008340 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	f003 0307 	and.w	r3, r3, #7
 8008326:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2b06      	cmp	r3, #6
 800832c:	d010      	beq.n	8008350 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f042 0201 	orr.w	r2, r2, #1
 800833c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800833e:	e007      	b.n	8008350 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f042 0201 	orr.w	r2, r2, #1
 800834e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3714      	adds	r7, #20
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	40010000 	.word	0x40010000
 8008364:	40000400 	.word	0x40000400
 8008368:	40000800 	.word	0x40000800
 800836c:	40000c00 	.word	0x40000c00
 8008370:	40014000 	.word	0x40014000

08008374 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e041      	b.n	800840a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b00      	cmp	r3, #0
 8008390:	d106      	bne.n	80083a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f839 	bl	8008412 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2202      	movs	r2, #2
 80083a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	3304      	adds	r3, #4
 80083b0:	4619      	mov	r1, r3
 80083b2:	4610      	mov	r0, r2
 80083b4:	f000 fa72 	bl	800889c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008412:	b480      	push	{r7}
 8008414:	b083      	sub	sp, #12
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800841a:	bf00      	nop
 800841c:	370c      	adds	r7, #12
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
	...

08008428 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d109      	bne.n	800844c <HAL_TIM_PWM_Start+0x24>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800843e:	b2db      	uxtb	r3, r3
 8008440:	2b01      	cmp	r3, #1
 8008442:	bf14      	ite	ne
 8008444:	2301      	movne	r3, #1
 8008446:	2300      	moveq	r3, #0
 8008448:	b2db      	uxtb	r3, r3
 800844a:	e022      	b.n	8008492 <HAL_TIM_PWM_Start+0x6a>
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	2b04      	cmp	r3, #4
 8008450:	d109      	bne.n	8008466 <HAL_TIM_PWM_Start+0x3e>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b01      	cmp	r3, #1
 800845c:	bf14      	ite	ne
 800845e:	2301      	movne	r3, #1
 8008460:	2300      	moveq	r3, #0
 8008462:	b2db      	uxtb	r3, r3
 8008464:	e015      	b.n	8008492 <HAL_TIM_PWM_Start+0x6a>
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	2b08      	cmp	r3, #8
 800846a:	d109      	bne.n	8008480 <HAL_TIM_PWM_Start+0x58>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008472:	b2db      	uxtb	r3, r3
 8008474:	2b01      	cmp	r3, #1
 8008476:	bf14      	ite	ne
 8008478:	2301      	movne	r3, #1
 800847a:	2300      	moveq	r3, #0
 800847c:	b2db      	uxtb	r3, r3
 800847e:	e008      	b.n	8008492 <HAL_TIM_PWM_Start+0x6a>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008486:	b2db      	uxtb	r3, r3
 8008488:	2b01      	cmp	r3, #1
 800848a:	bf14      	ite	ne
 800848c:	2301      	movne	r3, #1
 800848e:	2300      	moveq	r3, #0
 8008490:	b2db      	uxtb	r3, r3
 8008492:	2b00      	cmp	r3, #0
 8008494:	d001      	beq.n	800849a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e068      	b.n	800856c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d104      	bne.n	80084aa <HAL_TIM_PWM_Start+0x82>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2202      	movs	r2, #2
 80084a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80084a8:	e013      	b.n	80084d2 <HAL_TIM_PWM_Start+0xaa>
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	2b04      	cmp	r3, #4
 80084ae:	d104      	bne.n	80084ba <HAL_TIM_PWM_Start+0x92>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2202      	movs	r2, #2
 80084b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80084b8:	e00b      	b.n	80084d2 <HAL_TIM_PWM_Start+0xaa>
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	2b08      	cmp	r3, #8
 80084be:	d104      	bne.n	80084ca <HAL_TIM_PWM_Start+0xa2>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2202      	movs	r2, #2
 80084c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084c8:	e003      	b.n	80084d2 <HAL_TIM_PWM_Start+0xaa>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2202      	movs	r2, #2
 80084ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2201      	movs	r2, #1
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	4618      	mov	r0, r3
 80084dc:	f000 fc8a 	bl	8008df4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a23      	ldr	r2, [pc, #140]	@ (8008574 <HAL_TIM_PWM_Start+0x14c>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d107      	bne.n	80084fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80084f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a1d      	ldr	r2, [pc, #116]	@ (8008574 <HAL_TIM_PWM_Start+0x14c>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d018      	beq.n	8008536 <HAL_TIM_PWM_Start+0x10e>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800850c:	d013      	beq.n	8008536 <HAL_TIM_PWM_Start+0x10e>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a19      	ldr	r2, [pc, #100]	@ (8008578 <HAL_TIM_PWM_Start+0x150>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d00e      	beq.n	8008536 <HAL_TIM_PWM_Start+0x10e>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a17      	ldr	r2, [pc, #92]	@ (800857c <HAL_TIM_PWM_Start+0x154>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d009      	beq.n	8008536 <HAL_TIM_PWM_Start+0x10e>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a16      	ldr	r2, [pc, #88]	@ (8008580 <HAL_TIM_PWM_Start+0x158>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d004      	beq.n	8008536 <HAL_TIM_PWM_Start+0x10e>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a14      	ldr	r2, [pc, #80]	@ (8008584 <HAL_TIM_PWM_Start+0x15c>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d111      	bne.n	800855a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	f003 0307 	and.w	r3, r3, #7
 8008540:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2b06      	cmp	r3, #6
 8008546:	d010      	beq.n	800856a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f042 0201 	orr.w	r2, r2, #1
 8008556:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008558:	e007      	b.n	800856a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f042 0201 	orr.w	r2, r2, #1
 8008568:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	40010000 	.word	0x40010000
 8008578:	40000400 	.word	0x40000400
 800857c:	40000800 	.word	0x40000800
 8008580:	40000c00 	.word	0x40000c00
 8008584:	40014000 	.word	0x40014000

08008588 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008594:	2300      	movs	r3, #0
 8008596:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d101      	bne.n	80085a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80085a2:	2302      	movs	r3, #2
 80085a4:	e0ae      	b.n	8008704 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2b0c      	cmp	r3, #12
 80085b2:	f200 809f 	bhi.w	80086f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80085b6:	a201      	add	r2, pc, #4	@ (adr r2, 80085bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80085b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085bc:	080085f1 	.word	0x080085f1
 80085c0:	080086f5 	.word	0x080086f5
 80085c4:	080086f5 	.word	0x080086f5
 80085c8:	080086f5 	.word	0x080086f5
 80085cc:	08008631 	.word	0x08008631
 80085d0:	080086f5 	.word	0x080086f5
 80085d4:	080086f5 	.word	0x080086f5
 80085d8:	080086f5 	.word	0x080086f5
 80085dc:	08008673 	.word	0x08008673
 80085e0:	080086f5 	.word	0x080086f5
 80085e4:	080086f5 	.word	0x080086f5
 80085e8:	080086f5 	.word	0x080086f5
 80085ec:	080086b3 	.word	0x080086b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	68b9      	ldr	r1, [r7, #8]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 f9d6 	bl	80089a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	699a      	ldr	r2, [r3, #24]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f042 0208 	orr.w	r2, r2, #8
 800860a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	699a      	ldr	r2, [r3, #24]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f022 0204 	bic.w	r2, r2, #4
 800861a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	6999      	ldr	r1, [r3, #24]
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	691a      	ldr	r2, [r3, #16]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	430a      	orrs	r2, r1
 800862c:	619a      	str	r2, [r3, #24]
      break;
 800862e:	e064      	b.n	80086fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68b9      	ldr	r1, [r7, #8]
 8008636:	4618      	mov	r0, r3
 8008638:	f000 fa1c 	bl	8008a74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	699a      	ldr	r2, [r3, #24]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800864a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	699a      	ldr	r2, [r3, #24]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800865a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	6999      	ldr	r1, [r3, #24]
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	021a      	lsls	r2, r3, #8
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	430a      	orrs	r2, r1
 800866e:	619a      	str	r2, [r3, #24]
      break;
 8008670:	e043      	b.n	80086fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68b9      	ldr	r1, [r7, #8]
 8008678:	4618      	mov	r0, r3
 800867a:	f000 fa67 	bl	8008b4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	69da      	ldr	r2, [r3, #28]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f042 0208 	orr.w	r2, r2, #8
 800868c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	69da      	ldr	r2, [r3, #28]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f022 0204 	bic.w	r2, r2, #4
 800869c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	69d9      	ldr	r1, [r3, #28]
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	691a      	ldr	r2, [r3, #16]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	430a      	orrs	r2, r1
 80086ae:	61da      	str	r2, [r3, #28]
      break;
 80086b0:	e023      	b.n	80086fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68b9      	ldr	r1, [r7, #8]
 80086b8:	4618      	mov	r0, r3
 80086ba:	f000 fab1 	bl	8008c20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	69da      	ldr	r2, [r3, #28]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	69da      	ldr	r2, [r3, #28]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	69d9      	ldr	r1, [r3, #28]
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	021a      	lsls	r2, r3, #8
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	430a      	orrs	r2, r1
 80086f0:	61da      	str	r2, [r3, #28]
      break;
 80086f2:	e002      	b.n	80086fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	75fb      	strb	r3, [r7, #23]
      break;
 80086f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008702:	7dfb      	ldrb	r3, [r7, #23]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3718      	adds	r7, #24
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008716:	2300      	movs	r3, #0
 8008718:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008720:	2b01      	cmp	r3, #1
 8008722:	d101      	bne.n	8008728 <HAL_TIM_ConfigClockSource+0x1c>
 8008724:	2302      	movs	r3, #2
 8008726:	e0b4      	b.n	8008892 <HAL_TIM_ConfigClockSource+0x186>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2202      	movs	r2, #2
 8008734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008746:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800874e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008760:	d03e      	beq.n	80087e0 <HAL_TIM_ConfigClockSource+0xd4>
 8008762:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008766:	f200 8087 	bhi.w	8008878 <HAL_TIM_ConfigClockSource+0x16c>
 800876a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800876e:	f000 8086 	beq.w	800887e <HAL_TIM_ConfigClockSource+0x172>
 8008772:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008776:	d87f      	bhi.n	8008878 <HAL_TIM_ConfigClockSource+0x16c>
 8008778:	2b70      	cmp	r3, #112	@ 0x70
 800877a:	d01a      	beq.n	80087b2 <HAL_TIM_ConfigClockSource+0xa6>
 800877c:	2b70      	cmp	r3, #112	@ 0x70
 800877e:	d87b      	bhi.n	8008878 <HAL_TIM_ConfigClockSource+0x16c>
 8008780:	2b60      	cmp	r3, #96	@ 0x60
 8008782:	d050      	beq.n	8008826 <HAL_TIM_ConfigClockSource+0x11a>
 8008784:	2b60      	cmp	r3, #96	@ 0x60
 8008786:	d877      	bhi.n	8008878 <HAL_TIM_ConfigClockSource+0x16c>
 8008788:	2b50      	cmp	r3, #80	@ 0x50
 800878a:	d03c      	beq.n	8008806 <HAL_TIM_ConfigClockSource+0xfa>
 800878c:	2b50      	cmp	r3, #80	@ 0x50
 800878e:	d873      	bhi.n	8008878 <HAL_TIM_ConfigClockSource+0x16c>
 8008790:	2b40      	cmp	r3, #64	@ 0x40
 8008792:	d058      	beq.n	8008846 <HAL_TIM_ConfigClockSource+0x13a>
 8008794:	2b40      	cmp	r3, #64	@ 0x40
 8008796:	d86f      	bhi.n	8008878 <HAL_TIM_ConfigClockSource+0x16c>
 8008798:	2b30      	cmp	r3, #48	@ 0x30
 800879a:	d064      	beq.n	8008866 <HAL_TIM_ConfigClockSource+0x15a>
 800879c:	2b30      	cmp	r3, #48	@ 0x30
 800879e:	d86b      	bhi.n	8008878 <HAL_TIM_ConfigClockSource+0x16c>
 80087a0:	2b20      	cmp	r3, #32
 80087a2:	d060      	beq.n	8008866 <HAL_TIM_ConfigClockSource+0x15a>
 80087a4:	2b20      	cmp	r3, #32
 80087a6:	d867      	bhi.n	8008878 <HAL_TIM_ConfigClockSource+0x16c>
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d05c      	beq.n	8008866 <HAL_TIM_ConfigClockSource+0x15a>
 80087ac:	2b10      	cmp	r3, #16
 80087ae:	d05a      	beq.n	8008866 <HAL_TIM_ConfigClockSource+0x15a>
 80087b0:	e062      	b.n	8008878 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087c2:	f000 faf7 	bl	8008db4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80087d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	68ba      	ldr	r2, [r7, #8]
 80087dc:	609a      	str	r2, [r3, #8]
      break;
 80087de:	e04f      	b.n	8008880 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087f0:	f000 fae0 	bl	8008db4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	689a      	ldr	r2, [r3, #8]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008802:	609a      	str	r2, [r3, #8]
      break;
 8008804:	e03c      	b.n	8008880 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008812:	461a      	mov	r2, r3
 8008814:	f000 fa54 	bl	8008cc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2150      	movs	r1, #80	@ 0x50
 800881e:	4618      	mov	r0, r3
 8008820:	f000 faad 	bl	8008d7e <TIM_ITRx_SetConfig>
      break;
 8008824:	e02c      	b.n	8008880 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008832:	461a      	mov	r2, r3
 8008834:	f000 fa73 	bl	8008d1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2160      	movs	r1, #96	@ 0x60
 800883e:	4618      	mov	r0, r3
 8008840:	f000 fa9d 	bl	8008d7e <TIM_ITRx_SetConfig>
      break;
 8008844:	e01c      	b.n	8008880 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008852:	461a      	mov	r2, r3
 8008854:	f000 fa34 	bl	8008cc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2140      	movs	r1, #64	@ 0x40
 800885e:	4618      	mov	r0, r3
 8008860:	f000 fa8d 	bl	8008d7e <TIM_ITRx_SetConfig>
      break;
 8008864:	e00c      	b.n	8008880 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4619      	mov	r1, r3
 8008870:	4610      	mov	r0, r2
 8008872:	f000 fa84 	bl	8008d7e <TIM_ITRx_SetConfig>
      break;
 8008876:	e003      	b.n	8008880 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	73fb      	strb	r3, [r7, #15]
      break;
 800887c:	e000      	b.n	8008880 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800887e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008890:	7bfb      	ldrb	r3, [r7, #15]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
	...

0800889c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a37      	ldr	r2, [pc, #220]	@ (800898c <TIM_Base_SetConfig+0xf0>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d00f      	beq.n	80088d4 <TIM_Base_SetConfig+0x38>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088ba:	d00b      	beq.n	80088d4 <TIM_Base_SetConfig+0x38>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a34      	ldr	r2, [pc, #208]	@ (8008990 <TIM_Base_SetConfig+0xf4>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d007      	beq.n	80088d4 <TIM_Base_SetConfig+0x38>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a33      	ldr	r2, [pc, #204]	@ (8008994 <TIM_Base_SetConfig+0xf8>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d003      	beq.n	80088d4 <TIM_Base_SetConfig+0x38>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a32      	ldr	r2, [pc, #200]	@ (8008998 <TIM_Base_SetConfig+0xfc>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d108      	bne.n	80088e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4a28      	ldr	r2, [pc, #160]	@ (800898c <TIM_Base_SetConfig+0xf0>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d01b      	beq.n	8008926 <TIM_Base_SetConfig+0x8a>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088f4:	d017      	beq.n	8008926 <TIM_Base_SetConfig+0x8a>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4a25      	ldr	r2, [pc, #148]	@ (8008990 <TIM_Base_SetConfig+0xf4>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d013      	beq.n	8008926 <TIM_Base_SetConfig+0x8a>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4a24      	ldr	r2, [pc, #144]	@ (8008994 <TIM_Base_SetConfig+0xf8>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d00f      	beq.n	8008926 <TIM_Base_SetConfig+0x8a>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4a23      	ldr	r2, [pc, #140]	@ (8008998 <TIM_Base_SetConfig+0xfc>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d00b      	beq.n	8008926 <TIM_Base_SetConfig+0x8a>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a22      	ldr	r2, [pc, #136]	@ (800899c <TIM_Base_SetConfig+0x100>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d007      	beq.n	8008926 <TIM_Base_SetConfig+0x8a>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a21      	ldr	r2, [pc, #132]	@ (80089a0 <TIM_Base_SetConfig+0x104>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d003      	beq.n	8008926 <TIM_Base_SetConfig+0x8a>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a20      	ldr	r2, [pc, #128]	@ (80089a4 <TIM_Base_SetConfig+0x108>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d108      	bne.n	8008938 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800892c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	4313      	orrs	r3, r2
 8008936:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	695b      	ldr	r3, [r3, #20]
 8008942:	4313      	orrs	r3, r2
 8008944:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	689a      	ldr	r2, [r3, #8]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a0c      	ldr	r2, [pc, #48]	@ (800898c <TIM_Base_SetConfig+0xf0>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d103      	bne.n	8008966 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	691a      	ldr	r2, [r3, #16]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f043 0204 	orr.w	r2, r3, #4
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	601a      	str	r2, [r3, #0]
}
 800897e:	bf00      	nop
 8008980:	3714      	adds	r7, #20
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	40010000 	.word	0x40010000
 8008990:	40000400 	.word	0x40000400
 8008994:	40000800 	.word	0x40000800
 8008998:	40000c00 	.word	0x40000c00
 800899c:	40014000 	.word	0x40014000
 80089a0:	40014400 	.word	0x40014400
 80089a4:	40014800 	.word	0x40014800

080089a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b087      	sub	sp, #28
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6a1b      	ldr	r3, [r3, #32]
 80089bc:	f023 0201 	bic.w	r2, r3, #1
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f023 0303 	bic.w	r3, r3, #3
 80089de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	f023 0302 	bic.w	r3, r3, #2
 80089f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a1c      	ldr	r2, [pc, #112]	@ (8008a70 <TIM_OC1_SetConfig+0xc8>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d10c      	bne.n	8008a1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	f023 0308 	bic.w	r3, r3, #8
 8008a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	697a      	ldr	r2, [r7, #20]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	f023 0304 	bic.w	r3, r3, #4
 8008a1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4a13      	ldr	r2, [pc, #76]	@ (8008a70 <TIM_OC1_SetConfig+0xc8>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d111      	bne.n	8008a4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	693a      	ldr	r2, [r7, #16]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	693a      	ldr	r2, [r7, #16]
 8008a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	685a      	ldr	r2, [r3, #4]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	697a      	ldr	r2, [r7, #20]
 8008a62:	621a      	str	r2, [r3, #32]
}
 8008a64:	bf00      	nop
 8008a66:	371c      	adds	r7, #28
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr
 8008a70:	40010000 	.word	0x40010000

08008a74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b087      	sub	sp, #28
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6a1b      	ldr	r3, [r3, #32]
 8008a82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a1b      	ldr	r3, [r3, #32]
 8008a88:	f023 0210 	bic.w	r2, r3, #16
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	021b      	lsls	r3, r3, #8
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	f023 0320 	bic.w	r3, r3, #32
 8008abe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	011b      	lsls	r3, r3, #4
 8008ac6:	697a      	ldr	r2, [r7, #20]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a1e      	ldr	r2, [pc, #120]	@ (8008b48 <TIM_OC2_SetConfig+0xd4>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d10d      	bne.n	8008af0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	011b      	lsls	r3, r3, #4
 8008ae2:	697a      	ldr	r2, [r7, #20]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008aee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a15      	ldr	r2, [pc, #84]	@ (8008b48 <TIM_OC2_SetConfig+0xd4>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d113      	bne.n	8008b20 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008afe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	695b      	ldr	r3, [r3, #20]
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	693a      	ldr	r2, [r7, #16]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	699b      	ldr	r3, [r3, #24]
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	693a      	ldr	r2, [r7, #16]
 8008b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	685a      	ldr	r2, [r3, #4]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	621a      	str	r2, [r3, #32]
}
 8008b3a:	bf00      	nop
 8008b3c:	371c      	adds	r7, #28
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	40010000 	.word	0x40010000

08008b4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b087      	sub	sp, #28
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a1b      	ldr	r3, [r3, #32]
 8008b5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a1b      	ldr	r3, [r3, #32]
 8008b60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	69db      	ldr	r3, [r3, #28]
 8008b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f023 0303 	bic.w	r3, r3, #3
 8008b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	021b      	lsls	r3, r3, #8
 8008b9c:	697a      	ldr	r2, [r7, #20]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8008c1c <TIM_OC3_SetConfig+0xd0>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d10d      	bne.n	8008bc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008bb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	021b      	lsls	r3, r3, #8
 8008bb8:	697a      	ldr	r2, [r7, #20]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008bc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4a14      	ldr	r2, [pc, #80]	@ (8008c1c <TIM_OC3_SetConfig+0xd0>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d113      	bne.n	8008bf6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	695b      	ldr	r3, [r3, #20]
 8008be2:	011b      	lsls	r3, r3, #4
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	011b      	lsls	r3, r3, #4
 8008bf0:	693a      	ldr	r2, [r7, #16]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	693a      	ldr	r2, [r7, #16]
 8008bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	685a      	ldr	r2, [r3, #4]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	697a      	ldr	r2, [r7, #20]
 8008c0e:	621a      	str	r2, [r3, #32]
}
 8008c10:	bf00      	nop
 8008c12:	371c      	adds	r7, #28
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr
 8008c1c:	40010000 	.word	0x40010000

08008c20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b087      	sub	sp, #28
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a1b      	ldr	r3, [r3, #32]
 8008c2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a1b      	ldr	r3, [r3, #32]
 8008c34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	69db      	ldr	r3, [r3, #28]
 8008c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	021b      	lsls	r3, r3, #8
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	031b      	lsls	r3, r3, #12
 8008c72:	693a      	ldr	r2, [r7, #16]
 8008c74:	4313      	orrs	r3, r2
 8008c76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a10      	ldr	r2, [pc, #64]	@ (8008cbc <TIM_OC4_SetConfig+0x9c>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d109      	bne.n	8008c94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	695b      	ldr	r3, [r3, #20]
 8008c8c:	019b      	lsls	r3, r3, #6
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	685a      	ldr	r2, [r3, #4]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	693a      	ldr	r2, [r7, #16]
 8008cac:	621a      	str	r2, [r3, #32]
}
 8008cae:	bf00      	nop
 8008cb0:	371c      	adds	r7, #28
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	40010000 	.word	0x40010000

08008cc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b087      	sub	sp, #28
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6a1b      	ldr	r3, [r3, #32]
 8008cd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	f023 0201 	bic.w	r2, r3, #1
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	011b      	lsls	r3, r3, #4
 8008cf0:	693a      	ldr	r2, [r7, #16]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	f023 030a 	bic.w	r3, r3, #10
 8008cfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008cfe:	697a      	ldr	r2, [r7, #20]
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	621a      	str	r2, [r3, #32]
}
 8008d12:	bf00      	nop
 8008d14:	371c      	adds	r7, #28
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr

08008d1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d1e:	b480      	push	{r7}
 8008d20:	b087      	sub	sp, #28
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	60f8      	str	r0, [r7, #12]
 8008d26:	60b9      	str	r1, [r7, #8]
 8008d28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6a1b      	ldr	r3, [r3, #32]
 8008d2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6a1b      	ldr	r3, [r3, #32]
 8008d34:	f023 0210 	bic.w	r2, r3, #16
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	699b      	ldr	r3, [r3, #24]
 8008d40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008d48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	031b      	lsls	r3, r3, #12
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008d5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	011b      	lsls	r3, r3, #4
 8008d60:	697a      	ldr	r2, [r7, #20]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	693a      	ldr	r2, [r7, #16]
 8008d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	697a      	ldr	r2, [r7, #20]
 8008d70:	621a      	str	r2, [r3, #32]
}
 8008d72:	bf00      	nop
 8008d74:	371c      	adds	r7, #28
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr

08008d7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d7e:	b480      	push	{r7}
 8008d80:	b085      	sub	sp, #20
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
 8008d86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	f043 0307 	orr.w	r3, r3, #7
 8008da0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	609a      	str	r2, [r3, #8]
}
 8008da8:	bf00      	nop
 8008daa:	3714      	adds	r7, #20
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b087      	sub	sp, #28
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
 8008dc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008dce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	021a      	lsls	r2, r3, #8
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	431a      	orrs	r2, r3
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	697a      	ldr	r2, [r7, #20]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	697a      	ldr	r2, [r7, #20]
 8008de6:	609a      	str	r2, [r3, #8]
}
 8008de8:	bf00      	nop
 8008dea:	371c      	adds	r7, #28
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b087      	sub	sp, #28
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	f003 031f 	and.w	r3, r3, #31
 8008e06:	2201      	movs	r2, #1
 8008e08:	fa02 f303 	lsl.w	r3, r2, r3
 8008e0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6a1a      	ldr	r2, [r3, #32]
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	43db      	mvns	r3, r3
 8008e16:	401a      	ands	r2, r3
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6a1a      	ldr	r2, [r3, #32]
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	f003 031f 	and.w	r3, r3, #31
 8008e26:	6879      	ldr	r1, [r7, #4]
 8008e28:	fa01 f303 	lsl.w	r3, r1, r3
 8008e2c:	431a      	orrs	r2, r3
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	621a      	str	r2, [r3, #32]
}
 8008e32:	bf00      	nop
 8008e34:	371c      	adds	r7, #28
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr
	...

08008e40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b085      	sub	sp, #20
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d101      	bne.n	8008e58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e54:	2302      	movs	r3, #2
 8008e56:	e050      	b.n	8008efa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2202      	movs	r2, #2
 8008e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a1c      	ldr	r2, [pc, #112]	@ (8008f08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d018      	beq.n	8008ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ea4:	d013      	beq.n	8008ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a18      	ldr	r2, [pc, #96]	@ (8008f0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d00e      	beq.n	8008ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a16      	ldr	r2, [pc, #88]	@ (8008f10 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d009      	beq.n	8008ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a15      	ldr	r2, [pc, #84]	@ (8008f14 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d004      	beq.n	8008ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a13      	ldr	r2, [pc, #76]	@ (8008f18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d10c      	bne.n	8008ee8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ed4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	40010000 	.word	0x40010000
 8008f0c:	40000400 	.word	0x40000400
 8008f10:	40000800 	.word	0x40000800
 8008f14:	40000c00 	.word	0x40000c00
 8008f18:	40014000 	.word	0x40014000

08008f1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d101      	bne.n	8008f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e042      	b.n	8008fb4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d106      	bne.n	8008f48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f7f9 fe9c 	bl	8002c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2224      	movs	r2, #36	@ 0x24
 8008f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68da      	ldr	r2, [r3, #12]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 fdc9 	bl	8009af8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	691a      	ldr	r2, [r3, #16]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008f74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	695a      	ldr	r2, [r3, #20]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008f84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68da      	ldr	r2, [r3, #12]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2220      	movs	r2, #32
 8008fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2220      	movs	r2, #32
 8008fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008fb2:	2300      	movs	r3, #0
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b08a      	sub	sp, #40	@ 0x28
 8008fc0:	af02      	add	r7, sp, #8
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	603b      	str	r3, [r7, #0]
 8008fc8:	4613      	mov	r3, r2
 8008fca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	2b20      	cmp	r3, #32
 8008fda:	d175      	bne.n	80090c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d002      	beq.n	8008fe8 <HAL_UART_Transmit+0x2c>
 8008fe2:	88fb      	ldrh	r3, [r7, #6]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d101      	bne.n	8008fec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e06e      	b.n	80090ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2221      	movs	r2, #33	@ 0x21
 8008ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ffa:	f7fd f8fb 	bl	80061f4 <HAL_GetTick>
 8008ffe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	88fa      	ldrh	r2, [r7, #6]
 8009004:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	88fa      	ldrh	r2, [r7, #6]
 800900a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009014:	d108      	bne.n	8009028 <HAL_UART_Transmit+0x6c>
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	691b      	ldr	r3, [r3, #16]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d104      	bne.n	8009028 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800901e:	2300      	movs	r3, #0
 8009020:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	61bb      	str	r3, [r7, #24]
 8009026:	e003      	b.n	8009030 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800902c:	2300      	movs	r3, #0
 800902e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009030:	e02e      	b.n	8009090 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	9300      	str	r3, [sp, #0]
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	2200      	movs	r2, #0
 800903a:	2180      	movs	r1, #128	@ 0x80
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f000 fb2d 	bl	800969c <UART_WaitOnFlagUntilTimeout>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d005      	beq.n	8009054 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2220      	movs	r2, #32
 800904c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009050:	2303      	movs	r3, #3
 8009052:	e03a      	b.n	80090ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d10b      	bne.n	8009072 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	881b      	ldrh	r3, [r3, #0]
 800905e:	461a      	mov	r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009068:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	3302      	adds	r3, #2
 800906e:	61bb      	str	r3, [r7, #24]
 8009070:	e007      	b.n	8009082 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	781a      	ldrb	r2, [r3, #0]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	3301      	adds	r3, #1
 8009080:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009086:	b29b      	uxth	r3, r3
 8009088:	3b01      	subs	r3, #1
 800908a:	b29a      	uxth	r2, r3
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009094:	b29b      	uxth	r3, r3
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1cb      	bne.n	8009032 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	9300      	str	r3, [sp, #0]
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	2200      	movs	r2, #0
 80090a2:	2140      	movs	r1, #64	@ 0x40
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f000 faf9 	bl	800969c <UART_WaitOnFlagUntilTimeout>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d005      	beq.n	80090bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2220      	movs	r2, #32
 80090b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80090b8:	2303      	movs	r3, #3
 80090ba:	e006      	b.n	80090ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2220      	movs	r2, #32
 80090c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	e000      	b.n	80090ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80090c8:	2302      	movs	r3, #2
  }
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3720      	adds	r7, #32
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b084      	sub	sp, #16
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	60f8      	str	r0, [r7, #12]
 80090da:	60b9      	str	r1, [r7, #8]
 80090dc:	4613      	mov	r3, r2
 80090de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	2b20      	cmp	r3, #32
 80090ea:	d112      	bne.n	8009112 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d002      	beq.n	80090f8 <HAL_UART_Receive_IT+0x26>
 80090f2:	88fb      	ldrh	r3, [r7, #6]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d101      	bne.n	80090fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	e00b      	b.n	8009114 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2200      	movs	r2, #0
 8009100:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009102:	88fb      	ldrh	r3, [r7, #6]
 8009104:	461a      	mov	r2, r3
 8009106:	68b9      	ldr	r1, [r7, #8]
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f000 fb20 	bl	800974e <UART_Start_Receive_IT>
 800910e:	4603      	mov	r3, r0
 8009110:	e000      	b.n	8009114 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009112:	2302      	movs	r3, #2
  }
}
 8009114:	4618      	mov	r0, r3
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b0ba      	sub	sp, #232	@ 0xe8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	695b      	ldr	r3, [r3, #20]
 800913e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009142:	2300      	movs	r3, #0
 8009144:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009148:	2300      	movs	r3, #0
 800914a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800914e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009152:	f003 030f 	and.w	r3, r3, #15
 8009156:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800915a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10f      	bne.n	8009182 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009166:	f003 0320 	and.w	r3, r3, #32
 800916a:	2b00      	cmp	r3, #0
 800916c:	d009      	beq.n	8009182 <HAL_UART_IRQHandler+0x66>
 800916e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009172:	f003 0320 	and.w	r3, r3, #32
 8009176:	2b00      	cmp	r3, #0
 8009178:	d003      	beq.n	8009182 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fbfd 	bl	800997a <UART_Receive_IT>
      return;
 8009180:	e273      	b.n	800966a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009182:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009186:	2b00      	cmp	r3, #0
 8009188:	f000 80de 	beq.w	8009348 <HAL_UART_IRQHandler+0x22c>
 800918c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009190:	f003 0301 	and.w	r3, r3, #1
 8009194:	2b00      	cmp	r3, #0
 8009196:	d106      	bne.n	80091a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800919c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f000 80d1 	beq.w	8009348 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80091a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091aa:	f003 0301 	and.w	r3, r3, #1
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00b      	beq.n	80091ca <HAL_UART_IRQHandler+0xae>
 80091b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d005      	beq.n	80091ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091c2:	f043 0201 	orr.w	r2, r3, #1
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80091ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091ce:	f003 0304 	and.w	r3, r3, #4
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00b      	beq.n	80091ee <HAL_UART_IRQHandler+0xd2>
 80091d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091da:	f003 0301 	and.w	r3, r3, #1
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d005      	beq.n	80091ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091e6:	f043 0202 	orr.w	r2, r3, #2
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80091ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091f2:	f003 0302 	and.w	r3, r3, #2
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00b      	beq.n	8009212 <HAL_UART_IRQHandler+0xf6>
 80091fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091fe:	f003 0301 	and.w	r3, r3, #1
 8009202:	2b00      	cmp	r3, #0
 8009204:	d005      	beq.n	8009212 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800920a:	f043 0204 	orr.w	r2, r3, #4
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009216:	f003 0308 	and.w	r3, r3, #8
 800921a:	2b00      	cmp	r3, #0
 800921c:	d011      	beq.n	8009242 <HAL_UART_IRQHandler+0x126>
 800921e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009222:	f003 0320 	and.w	r3, r3, #32
 8009226:	2b00      	cmp	r3, #0
 8009228:	d105      	bne.n	8009236 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800922a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800922e:	f003 0301 	and.w	r3, r3, #1
 8009232:	2b00      	cmp	r3, #0
 8009234:	d005      	beq.n	8009242 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800923a:	f043 0208 	orr.w	r2, r3, #8
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009246:	2b00      	cmp	r3, #0
 8009248:	f000 820a 	beq.w	8009660 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800924c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009250:	f003 0320 	and.w	r3, r3, #32
 8009254:	2b00      	cmp	r3, #0
 8009256:	d008      	beq.n	800926a <HAL_UART_IRQHandler+0x14e>
 8009258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800925c:	f003 0320 	and.w	r3, r3, #32
 8009260:	2b00      	cmp	r3, #0
 8009262:	d002      	beq.n	800926a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 fb88 	bl	800997a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	695b      	ldr	r3, [r3, #20]
 8009270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009274:	2b40      	cmp	r3, #64	@ 0x40
 8009276:	bf0c      	ite	eq
 8009278:	2301      	moveq	r3, #1
 800927a:	2300      	movne	r3, #0
 800927c:	b2db      	uxtb	r3, r3
 800927e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009286:	f003 0308 	and.w	r3, r3, #8
 800928a:	2b00      	cmp	r3, #0
 800928c:	d103      	bne.n	8009296 <HAL_UART_IRQHandler+0x17a>
 800928e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009292:	2b00      	cmp	r3, #0
 8009294:	d04f      	beq.n	8009336 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fa93 	bl	80097c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	695b      	ldr	r3, [r3, #20]
 80092a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092a6:	2b40      	cmp	r3, #64	@ 0x40
 80092a8:	d141      	bne.n	800932e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	3314      	adds	r3, #20
 80092b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80092b8:	e853 3f00 	ldrex	r3, [r3]
 80092bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80092c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80092c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	3314      	adds	r3, #20
 80092d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80092d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80092da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80092e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80092e6:	e841 2300 	strex	r3, r2, [r1]
 80092ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80092ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1d9      	bne.n	80092aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d013      	beq.n	8009326 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009302:	4a8a      	ldr	r2, [pc, #552]	@ (800952c <HAL_UART_IRQHandler+0x410>)
 8009304:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800930a:	4618      	mov	r0, r3
 800930c:	f7fd f923 	bl	8006556 <HAL_DMA_Abort_IT>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d016      	beq.n	8009344 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800931a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009320:	4610      	mov	r0, r2
 8009322:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009324:	e00e      	b.n	8009344 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f9a2 	bl	8009670 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800932c:	e00a      	b.n	8009344 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 f99e 	bl	8009670 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009334:	e006      	b.n	8009344 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f99a 	bl	8009670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009342:	e18d      	b.n	8009660 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009344:	bf00      	nop
    return;
 8009346:	e18b      	b.n	8009660 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800934c:	2b01      	cmp	r3, #1
 800934e:	f040 8167 	bne.w	8009620 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009356:	f003 0310 	and.w	r3, r3, #16
 800935a:	2b00      	cmp	r3, #0
 800935c:	f000 8160 	beq.w	8009620 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8009360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009364:	f003 0310 	and.w	r3, r3, #16
 8009368:	2b00      	cmp	r3, #0
 800936a:	f000 8159 	beq.w	8009620 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800936e:	2300      	movs	r3, #0
 8009370:	60bb      	str	r3, [r7, #8]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	60bb      	str	r3, [r7, #8]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	60bb      	str	r3, [r7, #8]
 8009382:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	695b      	ldr	r3, [r3, #20]
 800938a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800938e:	2b40      	cmp	r3, #64	@ 0x40
 8009390:	f040 80ce 	bne.w	8009530 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80093a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f000 80a9 	beq.w	80094fc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80093ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093b2:	429a      	cmp	r2, r3
 80093b4:	f080 80a2 	bcs.w	80094fc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093be:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093c4:	69db      	ldr	r3, [r3, #28]
 80093c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093ca:	f000 8088 	beq.w	80094de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	330c      	adds	r3, #12
 80093d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80093dc:	e853 3f00 	ldrex	r3, [r3]
 80093e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80093e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80093e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	330c      	adds	r3, #12
 80093f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80093fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80093fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009402:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009406:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800940a:	e841 2300 	strex	r3, r2, [r1]
 800940e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009412:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1d9      	bne.n	80093ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	3314      	adds	r3, #20
 8009420:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009422:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009424:	e853 3f00 	ldrex	r3, [r3]
 8009428:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800942a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800942c:	f023 0301 	bic.w	r3, r3, #1
 8009430:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	3314      	adds	r3, #20
 800943a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800943e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009442:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009444:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009446:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800944a:	e841 2300 	strex	r3, r2, [r1]
 800944e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009450:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1e1      	bne.n	800941a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	3314      	adds	r3, #20
 800945c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009460:	e853 3f00 	ldrex	r3, [r3]
 8009464:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009466:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009468:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800946c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	3314      	adds	r3, #20
 8009476:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800947a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800947c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009480:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009482:	e841 2300 	strex	r3, r2, [r1]
 8009486:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009488:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800948a:	2b00      	cmp	r3, #0
 800948c:	d1e3      	bne.n	8009456 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2220      	movs	r2, #32
 8009492:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	330c      	adds	r3, #12
 80094a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094a6:	e853 3f00 	ldrex	r3, [r3]
 80094aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80094ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094ae:	f023 0310 	bic.w	r3, r3, #16
 80094b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	330c      	adds	r3, #12
 80094bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80094c0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80094c2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80094c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80094c8:	e841 2300 	strex	r3, r2, [r1]
 80094cc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80094ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1e3      	bne.n	800949c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fc ffcc 	bl	8006476 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2202      	movs	r2, #2
 80094e2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	1ad3      	subs	r3, r2, r3
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	4619      	mov	r1, r3
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 f8c5 	bl	8009684 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80094fa:	e0b3      	b.n	8009664 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009500:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009504:	429a      	cmp	r2, r3
 8009506:	f040 80ad 	bne.w	8009664 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800950e:	69db      	ldr	r3, [r3, #28]
 8009510:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009514:	f040 80a6 	bne.w	8009664 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2202      	movs	r2, #2
 800951c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009522:	4619      	mov	r1, r3
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 f8ad 	bl	8009684 <HAL_UARTEx_RxEventCallback>
      return;
 800952a:	e09b      	b.n	8009664 <HAL_UART_IRQHandler+0x548>
 800952c:	08009889 	.word	0x08009889
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009538:	b29b      	uxth	r3, r3
 800953a:	1ad3      	subs	r3, r2, r3
 800953c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009544:	b29b      	uxth	r3, r3
 8009546:	2b00      	cmp	r3, #0
 8009548:	f000 808e 	beq.w	8009668 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800954c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 8089 	beq.w	8009668 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	330c      	adds	r3, #12
 800955c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009560:	e853 3f00 	ldrex	r3, [r3]
 8009564:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009568:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800956c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	330c      	adds	r3, #12
 8009576:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800957a:	647a      	str	r2, [r7, #68]	@ 0x44
 800957c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009580:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009582:	e841 2300 	strex	r3, r2, [r1]
 8009586:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1e3      	bne.n	8009556 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	3314      	adds	r3, #20
 8009594:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009598:	e853 3f00 	ldrex	r3, [r3]
 800959c:	623b      	str	r3, [r7, #32]
   return(result);
 800959e:	6a3b      	ldr	r3, [r7, #32]
 80095a0:	f023 0301 	bic.w	r3, r3, #1
 80095a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	3314      	adds	r3, #20
 80095ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80095b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80095b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095ba:	e841 2300 	strex	r3, r2, [r1]
 80095be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d1e3      	bne.n	800958e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2220      	movs	r2, #32
 80095ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	330c      	adds	r3, #12
 80095da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	e853 3f00 	ldrex	r3, [r3]
 80095e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f023 0310 	bic.w	r3, r3, #16
 80095ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	330c      	adds	r3, #12
 80095f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80095f8:	61fa      	str	r2, [r7, #28]
 80095fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fc:	69b9      	ldr	r1, [r7, #24]
 80095fe:	69fa      	ldr	r2, [r7, #28]
 8009600:	e841 2300 	strex	r3, r2, [r1]
 8009604:	617b      	str	r3, [r7, #20]
   return(result);
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1e3      	bne.n	80095d4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2202      	movs	r2, #2
 8009610:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009612:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009616:	4619      	mov	r1, r3
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 f833 	bl	8009684 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800961e:	e023      	b.n	8009668 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009628:	2b00      	cmp	r3, #0
 800962a:	d009      	beq.n	8009640 <HAL_UART_IRQHandler+0x524>
 800962c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009630:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009634:	2b00      	cmp	r3, #0
 8009636:	d003      	beq.n	8009640 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 f936 	bl	80098aa <UART_Transmit_IT>
    return;
 800963e:	e014      	b.n	800966a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00e      	beq.n	800966a <HAL_UART_IRQHandler+0x54e>
 800964c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009654:	2b00      	cmp	r3, #0
 8009656:	d008      	beq.n	800966a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 f976 	bl	800994a <UART_EndTransmit_IT>
    return;
 800965e:	e004      	b.n	800966a <HAL_UART_IRQHandler+0x54e>
    return;
 8009660:	bf00      	nop
 8009662:	e002      	b.n	800966a <HAL_UART_IRQHandler+0x54e>
      return;
 8009664:	bf00      	nop
 8009666:	e000      	b.n	800966a <HAL_UART_IRQHandler+0x54e>
      return;
 8009668:	bf00      	nop
  }
}
 800966a:	37e8      	adds	r7, #232	@ 0xe8
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009678:	bf00      	nop
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	460b      	mov	r3, r1
 800968e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009690:	bf00      	nop
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b086      	sub	sp, #24
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	603b      	str	r3, [r7, #0]
 80096a8:	4613      	mov	r3, r2
 80096aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096ac:	e03b      	b.n	8009726 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096ae:	6a3b      	ldr	r3, [r7, #32]
 80096b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b4:	d037      	beq.n	8009726 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096b6:	f7fc fd9d 	bl	80061f4 <HAL_GetTick>
 80096ba:	4602      	mov	r2, r0
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	6a3a      	ldr	r2, [r7, #32]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d302      	bcc.n	80096cc <UART_WaitOnFlagUntilTimeout+0x30>
 80096c6:	6a3b      	ldr	r3, [r7, #32]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d101      	bne.n	80096d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80096cc:	2303      	movs	r3, #3
 80096ce:	e03a      	b.n	8009746 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	f003 0304 	and.w	r3, r3, #4
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d023      	beq.n	8009726 <UART_WaitOnFlagUntilTimeout+0x8a>
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	2b80      	cmp	r3, #128	@ 0x80
 80096e2:	d020      	beq.n	8009726 <UART_WaitOnFlagUntilTimeout+0x8a>
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	2b40      	cmp	r3, #64	@ 0x40
 80096e8:	d01d      	beq.n	8009726 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 0308 	and.w	r3, r3, #8
 80096f4:	2b08      	cmp	r3, #8
 80096f6:	d116      	bne.n	8009726 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80096f8:	2300      	movs	r3, #0
 80096fa:	617b      	str	r3, [r7, #20]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	617b      	str	r3, [r7, #20]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	617b      	str	r3, [r7, #20]
 800970c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f000 f857 	bl	80097c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2208      	movs	r2, #8
 8009718:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	e00f      	b.n	8009746 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	4013      	ands	r3, r2
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	429a      	cmp	r2, r3
 8009734:	bf0c      	ite	eq
 8009736:	2301      	moveq	r3, #1
 8009738:	2300      	movne	r3, #0
 800973a:	b2db      	uxtb	r3, r3
 800973c:	461a      	mov	r2, r3
 800973e:	79fb      	ldrb	r3, [r7, #7]
 8009740:	429a      	cmp	r2, r3
 8009742:	d0b4      	beq.n	80096ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3718      	adds	r7, #24
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800974e:	b480      	push	{r7}
 8009750:	b085      	sub	sp, #20
 8009752:	af00      	add	r7, sp, #0
 8009754:	60f8      	str	r0, [r7, #12]
 8009756:	60b9      	str	r1, [r7, #8]
 8009758:	4613      	mov	r3, r2
 800975a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	68ba      	ldr	r2, [r7, #8]
 8009760:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	88fa      	ldrh	r2, [r7, #6]
 8009766:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	88fa      	ldrh	r2, [r7, #6]
 800976c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2222      	movs	r2, #34	@ 0x22
 8009778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d007      	beq.n	8009794 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68da      	ldr	r2, [r3, #12]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009792:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	695a      	ldr	r2, [r3, #20]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f042 0201 	orr.w	r2, r2, #1
 80097a2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68da      	ldr	r2, [r3, #12]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f042 0220 	orr.w	r2, r2, #32
 80097b2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3714      	adds	r7, #20
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr

080097c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097c2:	b480      	push	{r7}
 80097c4:	b095      	sub	sp, #84	@ 0x54
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	330c      	adds	r3, #12
 80097d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097d4:	e853 3f00 	ldrex	r3, [r3]
 80097d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	330c      	adds	r3, #12
 80097e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80097ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80097ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097f2:	e841 2300 	strex	r3, r2, [r1]
 80097f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1e5      	bne.n	80097ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3314      	adds	r3, #20
 8009804:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009806:	6a3b      	ldr	r3, [r7, #32]
 8009808:	e853 3f00 	ldrex	r3, [r3]
 800980c:	61fb      	str	r3, [r7, #28]
   return(result);
 800980e:	69fb      	ldr	r3, [r7, #28]
 8009810:	f023 0301 	bic.w	r3, r3, #1
 8009814:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3314      	adds	r3, #20
 800981c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800981e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009820:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009822:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009824:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009826:	e841 2300 	strex	r3, r2, [r1]
 800982a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800982c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1e5      	bne.n	80097fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009836:	2b01      	cmp	r3, #1
 8009838:	d119      	bne.n	800986e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	330c      	adds	r3, #12
 8009840:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	e853 3f00 	ldrex	r3, [r3]
 8009848:	60bb      	str	r3, [r7, #8]
   return(result);
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	f023 0310 	bic.w	r3, r3, #16
 8009850:	647b      	str	r3, [r7, #68]	@ 0x44
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	330c      	adds	r3, #12
 8009858:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800985a:	61ba      	str	r2, [r7, #24]
 800985c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985e:	6979      	ldr	r1, [r7, #20]
 8009860:	69ba      	ldr	r2, [r7, #24]
 8009862:	e841 2300 	strex	r3, r2, [r1]
 8009866:	613b      	str	r3, [r7, #16]
   return(result);
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1e5      	bne.n	800983a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2220      	movs	r2, #32
 8009872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800987c:	bf00      	nop
 800987e:	3754      	adds	r7, #84	@ 0x54
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009894:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2200      	movs	r2, #0
 800989a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f7ff fee7 	bl	8009670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098a2:	bf00      	nop
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80098aa:	b480      	push	{r7}
 80098ac:	b085      	sub	sp, #20
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	2b21      	cmp	r3, #33	@ 0x21
 80098bc:	d13e      	bne.n	800993c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098c6:	d114      	bne.n	80098f2 <UART_Transmit_IT+0x48>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d110      	bne.n	80098f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6a1b      	ldr	r3, [r3, #32]
 80098d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	881b      	ldrh	r3, [r3, #0]
 80098da:	461a      	mov	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a1b      	ldr	r3, [r3, #32]
 80098ea:	1c9a      	adds	r2, r3, #2
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	621a      	str	r2, [r3, #32]
 80098f0:	e008      	b.n	8009904 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6a1b      	ldr	r3, [r3, #32]
 80098f6:	1c59      	adds	r1, r3, #1
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	6211      	str	r1, [r2, #32]
 80098fc:	781a      	ldrb	r2, [r3, #0]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009908:	b29b      	uxth	r3, r3
 800990a:	3b01      	subs	r3, #1
 800990c:	b29b      	uxth	r3, r3
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	4619      	mov	r1, r3
 8009912:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009914:	2b00      	cmp	r3, #0
 8009916:	d10f      	bne.n	8009938 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68da      	ldr	r2, [r3, #12]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009926:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	68da      	ldr	r2, [r3, #12]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009936:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009938:	2300      	movs	r3, #0
 800993a:	e000      	b.n	800993e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800993c:	2302      	movs	r3, #2
  }
}
 800993e:	4618      	mov	r0, r3
 8009940:	3714      	adds	r7, #20
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr

0800994a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b082      	sub	sp, #8
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	68da      	ldr	r2, [r3, #12]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009960:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2220      	movs	r2, #32
 8009966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f7f7 ff72 	bl	8001854 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b08c      	sub	sp, #48	@ 0x30
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8009982:	2300      	movs	r3, #0
 8009984:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8009986:	2300      	movs	r3, #0
 8009988:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009990:	b2db      	uxtb	r3, r3
 8009992:	2b22      	cmp	r3, #34	@ 0x22
 8009994:	f040 80aa 	bne.w	8009aec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099a0:	d115      	bne.n	80099ce <UART_Receive_IT+0x54>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d111      	bne.n	80099ce <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099bc:	b29a      	uxth	r2, r3
 80099be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099c6:	1c9a      	adds	r2, r3, #2
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80099cc:	e024      	b.n	8009a18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099dc:	d007      	beq.n	80099ee <UART_Receive_IT+0x74>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d10a      	bne.n	80099fc <UART_Receive_IT+0x82>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	691b      	ldr	r3, [r3, #16]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d106      	bne.n	80099fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	b2da      	uxtb	r2, r3
 80099f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099f8:	701a      	strb	r2, [r3, #0]
 80099fa:	e008      	b.n	8009a0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a08:	b2da      	uxtb	r2, r3
 8009a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a12:	1c5a      	adds	r2, r3, #1
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	4619      	mov	r1, r3
 8009a26:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d15d      	bne.n	8009ae8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	68da      	ldr	r2, [r3, #12]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f022 0220 	bic.w	r2, r2, #32
 8009a3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	68da      	ldr	r2, [r3, #12]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009a4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	695a      	ldr	r2, [r3, #20]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f022 0201 	bic.w	r2, r2, #1
 8009a5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2220      	movs	r2, #32
 8009a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d135      	bne.n	8009ade <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	330c      	adds	r3, #12
 8009a7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	e853 3f00 	ldrex	r3, [r3]
 8009a86:	613b      	str	r3, [r7, #16]
   return(result);
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	f023 0310 	bic.w	r3, r3, #16
 8009a8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	330c      	adds	r3, #12
 8009a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a98:	623a      	str	r2, [r7, #32]
 8009a9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9c:	69f9      	ldr	r1, [r7, #28]
 8009a9e:	6a3a      	ldr	r2, [r7, #32]
 8009aa0:	e841 2300 	strex	r3, r2, [r1]
 8009aa4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1e5      	bne.n	8009a78 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f003 0310 	and.w	r3, r3, #16
 8009ab6:	2b10      	cmp	r3, #16
 8009ab8:	d10a      	bne.n	8009ad0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009aba:	2300      	movs	r3, #0
 8009abc:	60fb      	str	r3, [r7, #12]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	60fb      	str	r3, [r7, #12]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	60fb      	str	r3, [r7, #12]
 8009ace:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f7ff fdd4 	bl	8009684 <HAL_UARTEx_RxEventCallback>
 8009adc:	e002      	b.n	8009ae4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f7f7 fead 	bl	800183e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	e002      	b.n	8009aee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	e000      	b.n	8009aee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009aec:	2302      	movs	r3, #2
  }
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3730      	adds	r7, #48	@ 0x30
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
	...

08009af8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009afc:	b0c0      	sub	sp, #256	@ 0x100
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b14:	68d9      	ldr	r1, [r3, #12]
 8009b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	ea40 0301 	orr.w	r3, r0, r1
 8009b20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b26:	689a      	ldr	r2, [r3, #8]
 8009b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b2c:	691b      	ldr	r3, [r3, #16]
 8009b2e:	431a      	orrs	r2, r3
 8009b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b34:	695b      	ldr	r3, [r3, #20]
 8009b36:	431a      	orrs	r2, r3
 8009b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b3c:	69db      	ldr	r3, [r3, #28]
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009b50:	f021 010c 	bic.w	r1, r1, #12
 8009b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009b5e:	430b      	orrs	r3, r1
 8009b60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	695b      	ldr	r3, [r3, #20]
 8009b6a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b72:	6999      	ldr	r1, [r3, #24]
 8009b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	ea40 0301 	orr.w	r3, r0, r1
 8009b7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	4b8f      	ldr	r3, [pc, #572]	@ (8009dc4 <UART_SetConfig+0x2cc>)
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d005      	beq.n	8009b98 <UART_SetConfig+0xa0>
 8009b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	4b8d      	ldr	r3, [pc, #564]	@ (8009dc8 <UART_SetConfig+0x2d0>)
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d104      	bne.n	8009ba2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009b98:	f7fe fb26 	bl	80081e8 <HAL_RCC_GetPCLK2Freq>
 8009b9c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009ba0:	e003      	b.n	8009baa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009ba2:	f7fe fb0d 	bl	80081c0 <HAL_RCC_GetPCLK1Freq>
 8009ba6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bae:	69db      	ldr	r3, [r3, #28]
 8009bb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bb4:	f040 810c 	bne.w	8009dd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009bc2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009bc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009bca:	4622      	mov	r2, r4
 8009bcc:	462b      	mov	r3, r5
 8009bce:	1891      	adds	r1, r2, r2
 8009bd0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009bd2:	415b      	adcs	r3, r3
 8009bd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009bd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009bda:	4621      	mov	r1, r4
 8009bdc:	eb12 0801 	adds.w	r8, r2, r1
 8009be0:	4629      	mov	r1, r5
 8009be2:	eb43 0901 	adc.w	r9, r3, r1
 8009be6:	f04f 0200 	mov.w	r2, #0
 8009bea:	f04f 0300 	mov.w	r3, #0
 8009bee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009bf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009bf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009bfa:	4690      	mov	r8, r2
 8009bfc:	4699      	mov	r9, r3
 8009bfe:	4623      	mov	r3, r4
 8009c00:	eb18 0303 	adds.w	r3, r8, r3
 8009c04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009c08:	462b      	mov	r3, r5
 8009c0a:	eb49 0303 	adc.w	r3, r9, r3
 8009c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009c1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009c22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009c26:	460b      	mov	r3, r1
 8009c28:	18db      	adds	r3, r3, r3
 8009c2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	eb42 0303 	adc.w	r3, r2, r3
 8009c32:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009c38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009c3c:	f7f7 f814 	bl	8000c68 <__aeabi_uldivmod>
 8009c40:	4602      	mov	r2, r0
 8009c42:	460b      	mov	r3, r1
 8009c44:	4b61      	ldr	r3, [pc, #388]	@ (8009dcc <UART_SetConfig+0x2d4>)
 8009c46:	fba3 2302 	umull	r2, r3, r3, r2
 8009c4a:	095b      	lsrs	r3, r3, #5
 8009c4c:	011c      	lsls	r4, r3, #4
 8009c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c52:	2200      	movs	r2, #0
 8009c54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c58:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009c5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009c60:	4642      	mov	r2, r8
 8009c62:	464b      	mov	r3, r9
 8009c64:	1891      	adds	r1, r2, r2
 8009c66:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009c68:	415b      	adcs	r3, r3
 8009c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009c70:	4641      	mov	r1, r8
 8009c72:	eb12 0a01 	adds.w	sl, r2, r1
 8009c76:	4649      	mov	r1, r9
 8009c78:	eb43 0b01 	adc.w	fp, r3, r1
 8009c7c:	f04f 0200 	mov.w	r2, #0
 8009c80:	f04f 0300 	mov.w	r3, #0
 8009c84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009c88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009c8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c90:	4692      	mov	sl, r2
 8009c92:	469b      	mov	fp, r3
 8009c94:	4643      	mov	r3, r8
 8009c96:	eb1a 0303 	adds.w	r3, sl, r3
 8009c9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009c9e:	464b      	mov	r3, r9
 8009ca0:	eb4b 0303 	adc.w	r3, fp, r3
 8009ca4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009cb4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009cb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	18db      	adds	r3, r3, r3
 8009cc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	eb42 0303 	adc.w	r3, r2, r3
 8009cc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009cce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009cd2:	f7f6 ffc9 	bl	8000c68 <__aeabi_uldivmod>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	460b      	mov	r3, r1
 8009cda:	4611      	mov	r1, r2
 8009cdc:	4b3b      	ldr	r3, [pc, #236]	@ (8009dcc <UART_SetConfig+0x2d4>)
 8009cde:	fba3 2301 	umull	r2, r3, r3, r1
 8009ce2:	095b      	lsrs	r3, r3, #5
 8009ce4:	2264      	movs	r2, #100	@ 0x64
 8009ce6:	fb02 f303 	mul.w	r3, r2, r3
 8009cea:	1acb      	subs	r3, r1, r3
 8009cec:	00db      	lsls	r3, r3, #3
 8009cee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009cf2:	4b36      	ldr	r3, [pc, #216]	@ (8009dcc <UART_SetConfig+0x2d4>)
 8009cf4:	fba3 2302 	umull	r2, r3, r3, r2
 8009cf8:	095b      	lsrs	r3, r3, #5
 8009cfa:	005b      	lsls	r3, r3, #1
 8009cfc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009d00:	441c      	add	r4, r3
 8009d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d06:	2200      	movs	r2, #0
 8009d08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d0c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009d10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009d14:	4642      	mov	r2, r8
 8009d16:	464b      	mov	r3, r9
 8009d18:	1891      	adds	r1, r2, r2
 8009d1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009d1c:	415b      	adcs	r3, r3
 8009d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009d24:	4641      	mov	r1, r8
 8009d26:	1851      	adds	r1, r2, r1
 8009d28:	6339      	str	r1, [r7, #48]	@ 0x30
 8009d2a:	4649      	mov	r1, r9
 8009d2c:	414b      	adcs	r3, r1
 8009d2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d30:	f04f 0200 	mov.w	r2, #0
 8009d34:	f04f 0300 	mov.w	r3, #0
 8009d38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009d3c:	4659      	mov	r1, fp
 8009d3e:	00cb      	lsls	r3, r1, #3
 8009d40:	4651      	mov	r1, sl
 8009d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d46:	4651      	mov	r1, sl
 8009d48:	00ca      	lsls	r2, r1, #3
 8009d4a:	4610      	mov	r0, r2
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	4603      	mov	r3, r0
 8009d50:	4642      	mov	r2, r8
 8009d52:	189b      	adds	r3, r3, r2
 8009d54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009d58:	464b      	mov	r3, r9
 8009d5a:	460a      	mov	r2, r1
 8009d5c:	eb42 0303 	adc.w	r3, r2, r3
 8009d60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009d70:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009d74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009d78:	460b      	mov	r3, r1
 8009d7a:	18db      	adds	r3, r3, r3
 8009d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d7e:	4613      	mov	r3, r2
 8009d80:	eb42 0303 	adc.w	r3, r2, r3
 8009d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009d8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009d8e:	f7f6 ff6b 	bl	8000c68 <__aeabi_uldivmod>
 8009d92:	4602      	mov	r2, r0
 8009d94:	460b      	mov	r3, r1
 8009d96:	4b0d      	ldr	r3, [pc, #52]	@ (8009dcc <UART_SetConfig+0x2d4>)
 8009d98:	fba3 1302 	umull	r1, r3, r3, r2
 8009d9c:	095b      	lsrs	r3, r3, #5
 8009d9e:	2164      	movs	r1, #100	@ 0x64
 8009da0:	fb01 f303 	mul.w	r3, r1, r3
 8009da4:	1ad3      	subs	r3, r2, r3
 8009da6:	00db      	lsls	r3, r3, #3
 8009da8:	3332      	adds	r3, #50	@ 0x32
 8009daa:	4a08      	ldr	r2, [pc, #32]	@ (8009dcc <UART_SetConfig+0x2d4>)
 8009dac:	fba2 2303 	umull	r2, r3, r2, r3
 8009db0:	095b      	lsrs	r3, r3, #5
 8009db2:	f003 0207 	and.w	r2, r3, #7
 8009db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4422      	add	r2, r4
 8009dbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009dc0:	e106      	b.n	8009fd0 <UART_SetConfig+0x4d8>
 8009dc2:	bf00      	nop
 8009dc4:	40011000 	.word	0x40011000
 8009dc8:	40011400 	.word	0x40011400
 8009dcc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009dd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009dda:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009dde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009de2:	4642      	mov	r2, r8
 8009de4:	464b      	mov	r3, r9
 8009de6:	1891      	adds	r1, r2, r2
 8009de8:	6239      	str	r1, [r7, #32]
 8009dea:	415b      	adcs	r3, r3
 8009dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009df2:	4641      	mov	r1, r8
 8009df4:	1854      	adds	r4, r2, r1
 8009df6:	4649      	mov	r1, r9
 8009df8:	eb43 0501 	adc.w	r5, r3, r1
 8009dfc:	f04f 0200 	mov.w	r2, #0
 8009e00:	f04f 0300 	mov.w	r3, #0
 8009e04:	00eb      	lsls	r3, r5, #3
 8009e06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009e0a:	00e2      	lsls	r2, r4, #3
 8009e0c:	4614      	mov	r4, r2
 8009e0e:	461d      	mov	r5, r3
 8009e10:	4643      	mov	r3, r8
 8009e12:	18e3      	adds	r3, r4, r3
 8009e14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009e18:	464b      	mov	r3, r9
 8009e1a:	eb45 0303 	adc.w	r3, r5, r3
 8009e1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009e2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009e32:	f04f 0200 	mov.w	r2, #0
 8009e36:	f04f 0300 	mov.w	r3, #0
 8009e3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009e3e:	4629      	mov	r1, r5
 8009e40:	008b      	lsls	r3, r1, #2
 8009e42:	4621      	mov	r1, r4
 8009e44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e48:	4621      	mov	r1, r4
 8009e4a:	008a      	lsls	r2, r1, #2
 8009e4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009e50:	f7f6 ff0a 	bl	8000c68 <__aeabi_uldivmod>
 8009e54:	4602      	mov	r2, r0
 8009e56:	460b      	mov	r3, r1
 8009e58:	4b60      	ldr	r3, [pc, #384]	@ (8009fdc <UART_SetConfig+0x4e4>)
 8009e5a:	fba3 2302 	umull	r2, r3, r3, r2
 8009e5e:	095b      	lsrs	r3, r3, #5
 8009e60:	011c      	lsls	r4, r3, #4
 8009e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e66:	2200      	movs	r2, #0
 8009e68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e6c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009e70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009e74:	4642      	mov	r2, r8
 8009e76:	464b      	mov	r3, r9
 8009e78:	1891      	adds	r1, r2, r2
 8009e7a:	61b9      	str	r1, [r7, #24]
 8009e7c:	415b      	adcs	r3, r3
 8009e7e:	61fb      	str	r3, [r7, #28]
 8009e80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e84:	4641      	mov	r1, r8
 8009e86:	1851      	adds	r1, r2, r1
 8009e88:	6139      	str	r1, [r7, #16]
 8009e8a:	4649      	mov	r1, r9
 8009e8c:	414b      	adcs	r3, r1
 8009e8e:	617b      	str	r3, [r7, #20]
 8009e90:	f04f 0200 	mov.w	r2, #0
 8009e94:	f04f 0300 	mov.w	r3, #0
 8009e98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009e9c:	4659      	mov	r1, fp
 8009e9e:	00cb      	lsls	r3, r1, #3
 8009ea0:	4651      	mov	r1, sl
 8009ea2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ea6:	4651      	mov	r1, sl
 8009ea8:	00ca      	lsls	r2, r1, #3
 8009eaa:	4610      	mov	r0, r2
 8009eac:	4619      	mov	r1, r3
 8009eae:	4603      	mov	r3, r0
 8009eb0:	4642      	mov	r2, r8
 8009eb2:	189b      	adds	r3, r3, r2
 8009eb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009eb8:	464b      	mov	r3, r9
 8009eba:	460a      	mov	r2, r1
 8009ebc:	eb42 0303 	adc.w	r3, r2, r3
 8009ec0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009ece:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009ed0:	f04f 0200 	mov.w	r2, #0
 8009ed4:	f04f 0300 	mov.w	r3, #0
 8009ed8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009edc:	4649      	mov	r1, r9
 8009ede:	008b      	lsls	r3, r1, #2
 8009ee0:	4641      	mov	r1, r8
 8009ee2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ee6:	4641      	mov	r1, r8
 8009ee8:	008a      	lsls	r2, r1, #2
 8009eea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009eee:	f7f6 febb 	bl	8000c68 <__aeabi_uldivmod>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	4611      	mov	r1, r2
 8009ef8:	4b38      	ldr	r3, [pc, #224]	@ (8009fdc <UART_SetConfig+0x4e4>)
 8009efa:	fba3 2301 	umull	r2, r3, r3, r1
 8009efe:	095b      	lsrs	r3, r3, #5
 8009f00:	2264      	movs	r2, #100	@ 0x64
 8009f02:	fb02 f303 	mul.w	r3, r2, r3
 8009f06:	1acb      	subs	r3, r1, r3
 8009f08:	011b      	lsls	r3, r3, #4
 8009f0a:	3332      	adds	r3, #50	@ 0x32
 8009f0c:	4a33      	ldr	r2, [pc, #204]	@ (8009fdc <UART_SetConfig+0x4e4>)
 8009f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f12:	095b      	lsrs	r3, r3, #5
 8009f14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009f18:	441c      	add	r4, r3
 8009f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f1e:	2200      	movs	r2, #0
 8009f20:	673b      	str	r3, [r7, #112]	@ 0x70
 8009f22:	677a      	str	r2, [r7, #116]	@ 0x74
 8009f24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009f28:	4642      	mov	r2, r8
 8009f2a:	464b      	mov	r3, r9
 8009f2c:	1891      	adds	r1, r2, r2
 8009f2e:	60b9      	str	r1, [r7, #8]
 8009f30:	415b      	adcs	r3, r3
 8009f32:	60fb      	str	r3, [r7, #12]
 8009f34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f38:	4641      	mov	r1, r8
 8009f3a:	1851      	adds	r1, r2, r1
 8009f3c:	6039      	str	r1, [r7, #0]
 8009f3e:	4649      	mov	r1, r9
 8009f40:	414b      	adcs	r3, r1
 8009f42:	607b      	str	r3, [r7, #4]
 8009f44:	f04f 0200 	mov.w	r2, #0
 8009f48:	f04f 0300 	mov.w	r3, #0
 8009f4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009f50:	4659      	mov	r1, fp
 8009f52:	00cb      	lsls	r3, r1, #3
 8009f54:	4651      	mov	r1, sl
 8009f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f5a:	4651      	mov	r1, sl
 8009f5c:	00ca      	lsls	r2, r1, #3
 8009f5e:	4610      	mov	r0, r2
 8009f60:	4619      	mov	r1, r3
 8009f62:	4603      	mov	r3, r0
 8009f64:	4642      	mov	r2, r8
 8009f66:	189b      	adds	r3, r3, r2
 8009f68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f6a:	464b      	mov	r3, r9
 8009f6c:	460a      	mov	r2, r1
 8009f6e:	eb42 0303 	adc.w	r3, r2, r3
 8009f72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f7e:	667a      	str	r2, [r7, #100]	@ 0x64
 8009f80:	f04f 0200 	mov.w	r2, #0
 8009f84:	f04f 0300 	mov.w	r3, #0
 8009f88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009f8c:	4649      	mov	r1, r9
 8009f8e:	008b      	lsls	r3, r1, #2
 8009f90:	4641      	mov	r1, r8
 8009f92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f96:	4641      	mov	r1, r8
 8009f98:	008a      	lsls	r2, r1, #2
 8009f9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009f9e:	f7f6 fe63 	bl	8000c68 <__aeabi_uldivmod>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8009fdc <UART_SetConfig+0x4e4>)
 8009fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8009fac:	095b      	lsrs	r3, r3, #5
 8009fae:	2164      	movs	r1, #100	@ 0x64
 8009fb0:	fb01 f303 	mul.w	r3, r1, r3
 8009fb4:	1ad3      	subs	r3, r2, r3
 8009fb6:	011b      	lsls	r3, r3, #4
 8009fb8:	3332      	adds	r3, #50	@ 0x32
 8009fba:	4a08      	ldr	r2, [pc, #32]	@ (8009fdc <UART_SetConfig+0x4e4>)
 8009fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8009fc0:	095b      	lsrs	r3, r3, #5
 8009fc2:	f003 020f 	and.w	r2, r3, #15
 8009fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4422      	add	r2, r4
 8009fce:	609a      	str	r2, [r3, #8]
}
 8009fd0:	bf00      	nop
 8009fd2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fdc:	51eb851f 	.word	0x51eb851f

08009fe0 <asin>:
 8009fe0:	b538      	push	{r3, r4, r5, lr}
 8009fe2:	ed2d 8b02 	vpush	{d8}
 8009fe6:	ec55 4b10 	vmov	r4, r5, d0
 8009fea:	f000 fa8d 	bl	800a508 <__ieee754_asin>
 8009fee:	4622      	mov	r2, r4
 8009ff0:	462b      	mov	r3, r5
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	4629      	mov	r1, r5
 8009ff6:	eeb0 8a40 	vmov.f32	s16, s0
 8009ffa:	eef0 8a60 	vmov.f32	s17, s1
 8009ffe:	f7f6 fdad 	bl	8000b5c <__aeabi_dcmpun>
 800a002:	b9a8      	cbnz	r0, 800a030 <asin+0x50>
 800a004:	ec45 4b10 	vmov	d0, r4, r5
 800a008:	f000 f84c 	bl	800a0a4 <fabs>
 800a00c:	4b0c      	ldr	r3, [pc, #48]	@ (800a040 <asin+0x60>)
 800a00e:	ec51 0b10 	vmov	r0, r1, d0
 800a012:	2200      	movs	r2, #0
 800a014:	f7f6 fd98 	bl	8000b48 <__aeabi_dcmpgt>
 800a018:	b150      	cbz	r0, 800a030 <asin+0x50>
 800a01a:	f002 ff67 	bl	800ceec <__errno>
 800a01e:	ecbd 8b02 	vpop	{d8}
 800a022:	2321      	movs	r3, #33	@ 0x21
 800a024:	6003      	str	r3, [r0, #0]
 800a026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a02a:	4806      	ldr	r0, [pc, #24]	@ (800a044 <asin+0x64>)
 800a02c:	f000 ba20 	b.w	800a470 <nan>
 800a030:	eeb0 0a48 	vmov.f32	s0, s16
 800a034:	eef0 0a68 	vmov.f32	s1, s17
 800a038:	ecbd 8b02 	vpop	{d8}
 800a03c:	bd38      	pop	{r3, r4, r5, pc}
 800a03e:	bf00      	nop
 800a040:	3ff00000 	.word	0x3ff00000
 800a044:	0800ec6a 	.word	0x0800ec6a

0800a048 <fmod>:
 800a048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a04a:	ed2d 8b02 	vpush	{d8}
 800a04e:	ec57 6b10 	vmov	r6, r7, d0
 800a052:	ec55 4b11 	vmov	r4, r5, d1
 800a056:	f000 fc5b 	bl	800a910 <__ieee754_fmod>
 800a05a:	4622      	mov	r2, r4
 800a05c:	462b      	mov	r3, r5
 800a05e:	4630      	mov	r0, r6
 800a060:	4639      	mov	r1, r7
 800a062:	eeb0 8a40 	vmov.f32	s16, s0
 800a066:	eef0 8a60 	vmov.f32	s17, s1
 800a06a:	f7f6 fd77 	bl	8000b5c <__aeabi_dcmpun>
 800a06e:	b990      	cbnz	r0, 800a096 <fmod+0x4e>
 800a070:	2200      	movs	r2, #0
 800a072:	2300      	movs	r3, #0
 800a074:	4620      	mov	r0, r4
 800a076:	4629      	mov	r1, r5
 800a078:	f7f6 fd3e 	bl	8000af8 <__aeabi_dcmpeq>
 800a07c:	b158      	cbz	r0, 800a096 <fmod+0x4e>
 800a07e:	f002 ff35 	bl	800ceec <__errno>
 800a082:	2321      	movs	r3, #33	@ 0x21
 800a084:	6003      	str	r3, [r0, #0]
 800a086:	2200      	movs	r2, #0
 800a088:	2300      	movs	r3, #0
 800a08a:	4610      	mov	r0, r2
 800a08c:	4619      	mov	r1, r3
 800a08e:	f7f6 fbf5 	bl	800087c <__aeabi_ddiv>
 800a092:	ec41 0b18 	vmov	d8, r0, r1
 800a096:	eeb0 0a48 	vmov.f32	s0, s16
 800a09a:	eef0 0a68 	vmov.f32	s1, s17
 800a09e:	ecbd 8b02 	vpop	{d8}
 800a0a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a0a4 <fabs>:
 800a0a4:	ec51 0b10 	vmov	r0, r1, d0
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a0ae:	ec43 2b10 	vmov	d0, r2, r3
 800a0b2:	4770      	bx	lr

0800a0b4 <asinf>:
 800a0b4:	b508      	push	{r3, lr}
 800a0b6:	ed2d 8b02 	vpush	{d8}
 800a0ba:	eeb0 8a40 	vmov.f32	s16, s0
 800a0be:	f000 feaf 	bl	800ae20 <__ieee754_asinf>
 800a0c2:	eeb4 8a48 	vcmp.f32	s16, s16
 800a0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ca:	eef0 8a40 	vmov.f32	s17, s0
 800a0ce:	d615      	bvs.n	800a0fc <asinf+0x48>
 800a0d0:	eeb0 0a48 	vmov.f32	s0, s16
 800a0d4:	f000 f952 	bl	800a37c <fabsf>
 800a0d8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a0dc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a0e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0e4:	dd0a      	ble.n	800a0fc <asinf+0x48>
 800a0e6:	f002 ff01 	bl	800ceec <__errno>
 800a0ea:	ecbd 8b02 	vpop	{d8}
 800a0ee:	2321      	movs	r3, #33	@ 0x21
 800a0f0:	6003      	str	r3, [r0, #0]
 800a0f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a0f6:	4804      	ldr	r0, [pc, #16]	@ (800a108 <asinf+0x54>)
 800a0f8:	f000 b9c2 	b.w	800a480 <nanf>
 800a0fc:	eeb0 0a68 	vmov.f32	s0, s17
 800a100:	ecbd 8b02 	vpop	{d8}
 800a104:	bd08      	pop	{r3, pc}
 800a106:	bf00      	nop
 800a108:	0800ec6a 	.word	0x0800ec6a

0800a10c <atan2f>:
 800a10c:	f000 bf6c 	b.w	800afe8 <__ieee754_atan2f>

0800a110 <sqrtf>:
 800a110:	b508      	push	{r3, lr}
 800a112:	ed2d 8b02 	vpush	{d8}
 800a116:	eeb0 8a40 	vmov.f32	s16, s0
 800a11a:	f000 f9f1 	bl	800a500 <__ieee754_sqrtf>
 800a11e:	eeb4 8a48 	vcmp.f32	s16, s16
 800a122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a126:	d60c      	bvs.n	800a142 <sqrtf+0x32>
 800a128:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800a148 <sqrtf+0x38>
 800a12c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a134:	d505      	bpl.n	800a142 <sqrtf+0x32>
 800a136:	f002 fed9 	bl	800ceec <__errno>
 800a13a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a13e:	2321      	movs	r3, #33	@ 0x21
 800a140:	6003      	str	r3, [r0, #0]
 800a142:	ecbd 8b02 	vpop	{d8}
 800a146:	bd08      	pop	{r3, pc}
 800a148:	00000000 	.word	0x00000000

0800a14c <atanf>:
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	ee10 5a10 	vmov	r5, s0
 800a152:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800a156:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800a15a:	eef0 7a40 	vmov.f32	s15, s0
 800a15e:	d310      	bcc.n	800a182 <atanf+0x36>
 800a160:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800a164:	d904      	bls.n	800a170 <atanf+0x24>
 800a166:	ee70 7a00 	vadd.f32	s15, s0, s0
 800a16a:	eeb0 0a67 	vmov.f32	s0, s15
 800a16e:	bd38      	pop	{r3, r4, r5, pc}
 800a170:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800a2a8 <atanf+0x15c>
 800a174:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800a2ac <atanf+0x160>
 800a178:	2d00      	cmp	r5, #0
 800a17a:	bfc8      	it	gt
 800a17c:	eef0 7a47 	vmovgt.f32	s15, s14
 800a180:	e7f3      	b.n	800a16a <atanf+0x1e>
 800a182:	4b4b      	ldr	r3, [pc, #300]	@ (800a2b0 <atanf+0x164>)
 800a184:	429c      	cmp	r4, r3
 800a186:	d810      	bhi.n	800a1aa <atanf+0x5e>
 800a188:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800a18c:	d20a      	bcs.n	800a1a4 <atanf+0x58>
 800a18e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800a2b4 <atanf+0x168>
 800a192:	ee30 7a07 	vadd.f32	s14, s0, s14
 800a196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a19a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800a19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1a2:	dce2      	bgt.n	800a16a <atanf+0x1e>
 800a1a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1a8:	e013      	b.n	800a1d2 <atanf+0x86>
 800a1aa:	f000 f8e7 	bl	800a37c <fabsf>
 800a1ae:	4b42      	ldr	r3, [pc, #264]	@ (800a2b8 <atanf+0x16c>)
 800a1b0:	429c      	cmp	r4, r3
 800a1b2:	d84f      	bhi.n	800a254 <atanf+0x108>
 800a1b4:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800a1b8:	429c      	cmp	r4, r3
 800a1ba:	d841      	bhi.n	800a240 <atanf+0xf4>
 800a1bc:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800a1c0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800a1c4:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a1ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a1d2:	1c5a      	adds	r2, r3, #1
 800a1d4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800a1d8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800a2bc <atanf+0x170>
 800a1dc:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800a2c0 <atanf+0x174>
 800a1e0:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800a2c4 <atanf+0x178>
 800a1e4:	ee66 6a06 	vmul.f32	s13, s12, s12
 800a1e8:	eee6 5a87 	vfma.f32	s11, s13, s14
 800a1ec:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800a2c8 <atanf+0x17c>
 800a1f0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a1f4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800a2cc <atanf+0x180>
 800a1f8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a1fc:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800a2d0 <atanf+0x184>
 800a200:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a204:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a2d4 <atanf+0x188>
 800a208:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a20c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800a2d8 <atanf+0x18c>
 800a210:	eea6 5a87 	vfma.f32	s10, s13, s14
 800a214:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800a2dc <atanf+0x190>
 800a218:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a21c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800a2e0 <atanf+0x194>
 800a220:	eea7 5a26 	vfma.f32	s10, s14, s13
 800a224:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800a2e4 <atanf+0x198>
 800a228:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a22c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a230:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a234:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a238:	d121      	bne.n	800a27e <atanf+0x132>
 800a23a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a23e:	e794      	b.n	800a16a <atanf+0x1e>
 800a240:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a244:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a248:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a24c:	2301      	movs	r3, #1
 800a24e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a252:	e7be      	b.n	800a1d2 <atanf+0x86>
 800a254:	4b24      	ldr	r3, [pc, #144]	@ (800a2e8 <atanf+0x19c>)
 800a256:	429c      	cmp	r4, r3
 800a258:	d80b      	bhi.n	800a272 <atanf+0x126>
 800a25a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800a25e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a262:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a266:	2302      	movs	r3, #2
 800a268:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a26c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a270:	e7af      	b.n	800a1d2 <atanf+0x86>
 800a272:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800a276:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a27a:	2303      	movs	r3, #3
 800a27c:	e7a9      	b.n	800a1d2 <atanf+0x86>
 800a27e:	4a1b      	ldr	r2, [pc, #108]	@ (800a2ec <atanf+0x1a0>)
 800a280:	491b      	ldr	r1, [pc, #108]	@ (800a2f0 <atanf+0x1a4>)
 800a282:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a286:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a28a:	edd3 6a00 	vldr	s13, [r3]
 800a28e:	ee37 7a66 	vsub.f32	s14, s14, s13
 800a292:	2d00      	cmp	r5, #0
 800a294:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a298:	edd2 7a00 	vldr	s15, [r2]
 800a29c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a2a0:	bfb8      	it	lt
 800a2a2:	eef1 7a67 	vneglt.f32	s15, s15
 800a2a6:	e760      	b.n	800a16a <atanf+0x1e>
 800a2a8:	bfc90fdb 	.word	0xbfc90fdb
 800a2ac:	3fc90fdb 	.word	0x3fc90fdb
 800a2b0:	3edfffff 	.word	0x3edfffff
 800a2b4:	7149f2ca 	.word	0x7149f2ca
 800a2b8:	3f97ffff 	.word	0x3f97ffff
 800a2bc:	3c8569d7 	.word	0x3c8569d7
 800a2c0:	3d4bda59 	.word	0x3d4bda59
 800a2c4:	bd6ef16b 	.word	0xbd6ef16b
 800a2c8:	3d886b35 	.word	0x3d886b35
 800a2cc:	3dba2e6e 	.word	0x3dba2e6e
 800a2d0:	3e124925 	.word	0x3e124925
 800a2d4:	3eaaaaab 	.word	0x3eaaaaab
 800a2d8:	bd15a221 	.word	0xbd15a221
 800a2dc:	bd9d8795 	.word	0xbd9d8795
 800a2e0:	bde38e38 	.word	0xbde38e38
 800a2e4:	be4ccccd 	.word	0xbe4ccccd
 800a2e8:	401bffff 	.word	0x401bffff
 800a2ec:	0800ec8c 	.word	0x0800ec8c
 800a2f0:	0800ec7c 	.word	0x0800ec7c

0800a2f4 <cosf>:
 800a2f4:	ee10 3a10 	vmov	r3, s0
 800a2f8:	b507      	push	{r0, r1, r2, lr}
 800a2fa:	4a1e      	ldr	r2, [pc, #120]	@ (800a374 <cosf+0x80>)
 800a2fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a300:	4293      	cmp	r3, r2
 800a302:	d806      	bhi.n	800a312 <cosf+0x1e>
 800a304:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800a378 <cosf+0x84>
 800a308:	b003      	add	sp, #12
 800a30a:	f85d eb04 	ldr.w	lr, [sp], #4
 800a30e:	f000 bc07 	b.w	800ab20 <__kernel_cosf>
 800a312:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a316:	d304      	bcc.n	800a322 <cosf+0x2e>
 800a318:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a31c:	b003      	add	sp, #12
 800a31e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a322:	4668      	mov	r0, sp
 800a324:	f000 ff00 	bl	800b128 <__ieee754_rem_pio2f>
 800a328:	f000 0003 	and.w	r0, r0, #3
 800a32c:	2801      	cmp	r0, #1
 800a32e:	d009      	beq.n	800a344 <cosf+0x50>
 800a330:	2802      	cmp	r0, #2
 800a332:	d010      	beq.n	800a356 <cosf+0x62>
 800a334:	b9b0      	cbnz	r0, 800a364 <cosf+0x70>
 800a336:	eddd 0a01 	vldr	s1, [sp, #4]
 800a33a:	ed9d 0a00 	vldr	s0, [sp]
 800a33e:	f000 fbef 	bl	800ab20 <__kernel_cosf>
 800a342:	e7eb      	b.n	800a31c <cosf+0x28>
 800a344:	eddd 0a01 	vldr	s1, [sp, #4]
 800a348:	ed9d 0a00 	vldr	s0, [sp]
 800a34c:	f000 fc40 	bl	800abd0 <__kernel_sinf>
 800a350:	eeb1 0a40 	vneg.f32	s0, s0
 800a354:	e7e2      	b.n	800a31c <cosf+0x28>
 800a356:	eddd 0a01 	vldr	s1, [sp, #4]
 800a35a:	ed9d 0a00 	vldr	s0, [sp]
 800a35e:	f000 fbdf 	bl	800ab20 <__kernel_cosf>
 800a362:	e7f5      	b.n	800a350 <cosf+0x5c>
 800a364:	eddd 0a01 	vldr	s1, [sp, #4]
 800a368:	ed9d 0a00 	vldr	s0, [sp]
 800a36c:	2001      	movs	r0, #1
 800a36e:	f000 fc2f 	bl	800abd0 <__kernel_sinf>
 800a372:	e7d3      	b.n	800a31c <cosf+0x28>
 800a374:	3f490fd8 	.word	0x3f490fd8
 800a378:	00000000 	.word	0x00000000

0800a37c <fabsf>:
 800a37c:	ee10 3a10 	vmov	r3, s0
 800a380:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a384:	ee00 3a10 	vmov	s0, r3
 800a388:	4770      	bx	lr
	...

0800a38c <sinf>:
 800a38c:	ee10 3a10 	vmov	r3, s0
 800a390:	b507      	push	{r0, r1, r2, lr}
 800a392:	4a1f      	ldr	r2, [pc, #124]	@ (800a410 <sinf+0x84>)
 800a394:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a398:	4293      	cmp	r3, r2
 800a39a:	d807      	bhi.n	800a3ac <sinf+0x20>
 800a39c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800a414 <sinf+0x88>
 800a3a0:	2000      	movs	r0, #0
 800a3a2:	b003      	add	sp, #12
 800a3a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3a8:	f000 bc12 	b.w	800abd0 <__kernel_sinf>
 800a3ac:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a3b0:	d304      	bcc.n	800a3bc <sinf+0x30>
 800a3b2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a3b6:	b003      	add	sp, #12
 800a3b8:	f85d fb04 	ldr.w	pc, [sp], #4
 800a3bc:	4668      	mov	r0, sp
 800a3be:	f000 feb3 	bl	800b128 <__ieee754_rem_pio2f>
 800a3c2:	f000 0003 	and.w	r0, r0, #3
 800a3c6:	2801      	cmp	r0, #1
 800a3c8:	d00a      	beq.n	800a3e0 <sinf+0x54>
 800a3ca:	2802      	cmp	r0, #2
 800a3cc:	d00f      	beq.n	800a3ee <sinf+0x62>
 800a3ce:	b9c0      	cbnz	r0, 800a402 <sinf+0x76>
 800a3d0:	eddd 0a01 	vldr	s1, [sp, #4]
 800a3d4:	ed9d 0a00 	vldr	s0, [sp]
 800a3d8:	2001      	movs	r0, #1
 800a3da:	f000 fbf9 	bl	800abd0 <__kernel_sinf>
 800a3de:	e7ea      	b.n	800a3b6 <sinf+0x2a>
 800a3e0:	eddd 0a01 	vldr	s1, [sp, #4]
 800a3e4:	ed9d 0a00 	vldr	s0, [sp]
 800a3e8:	f000 fb9a 	bl	800ab20 <__kernel_cosf>
 800a3ec:	e7e3      	b.n	800a3b6 <sinf+0x2a>
 800a3ee:	eddd 0a01 	vldr	s1, [sp, #4]
 800a3f2:	ed9d 0a00 	vldr	s0, [sp]
 800a3f6:	2001      	movs	r0, #1
 800a3f8:	f000 fbea 	bl	800abd0 <__kernel_sinf>
 800a3fc:	eeb1 0a40 	vneg.f32	s0, s0
 800a400:	e7d9      	b.n	800a3b6 <sinf+0x2a>
 800a402:	eddd 0a01 	vldr	s1, [sp, #4]
 800a406:	ed9d 0a00 	vldr	s0, [sp]
 800a40a:	f000 fb89 	bl	800ab20 <__kernel_cosf>
 800a40e:	e7f5      	b.n	800a3fc <sinf+0x70>
 800a410:	3f490fd8 	.word	0x3f490fd8
 800a414:	00000000 	.word	0x00000000

0800a418 <tanf>:
 800a418:	ee10 3a10 	vmov	r3, s0
 800a41c:	b507      	push	{r0, r1, r2, lr}
 800a41e:	4a12      	ldr	r2, [pc, #72]	@ (800a468 <tanf+0x50>)
 800a420:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a424:	4293      	cmp	r3, r2
 800a426:	d807      	bhi.n	800a438 <tanf+0x20>
 800a428:	eddf 0a10 	vldr	s1, [pc, #64]	@ 800a46c <tanf+0x54>
 800a42c:	2001      	movs	r0, #1
 800a42e:	b003      	add	sp, #12
 800a430:	f85d eb04 	ldr.w	lr, [sp], #4
 800a434:	f000 bc14 	b.w	800ac60 <__kernel_tanf>
 800a438:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a43c:	d304      	bcc.n	800a448 <tanf+0x30>
 800a43e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a442:	b003      	add	sp, #12
 800a444:	f85d fb04 	ldr.w	pc, [sp], #4
 800a448:	4668      	mov	r0, sp
 800a44a:	f000 fe6d 	bl	800b128 <__ieee754_rem_pio2f>
 800a44e:	0040      	lsls	r0, r0, #1
 800a450:	f000 0002 	and.w	r0, r0, #2
 800a454:	eddd 0a01 	vldr	s1, [sp, #4]
 800a458:	ed9d 0a00 	vldr	s0, [sp]
 800a45c:	f1c0 0001 	rsb	r0, r0, #1
 800a460:	f000 fbfe 	bl	800ac60 <__kernel_tanf>
 800a464:	e7ed      	b.n	800a442 <tanf+0x2a>
 800a466:	bf00      	nop
 800a468:	3f490fda 	.word	0x3f490fda
 800a46c:	00000000 	.word	0x00000000

0800a470 <nan>:
 800a470:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a478 <nan+0x8>
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop
 800a478:	00000000 	.word	0x00000000
 800a47c:	7ff80000 	.word	0x7ff80000

0800a480 <nanf>:
 800a480:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a488 <nanf+0x8>
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	7fc00000 	.word	0x7fc00000

0800a48c <fmaxf>:
 800a48c:	b508      	push	{r3, lr}
 800a48e:	ed2d 8b02 	vpush	{d8}
 800a492:	eeb0 8a40 	vmov.f32	s16, s0
 800a496:	eef0 8a60 	vmov.f32	s17, s1
 800a49a:	f000 f815 	bl	800a4c8 <__fpclassifyf>
 800a49e:	b930      	cbnz	r0, 800a4ae <fmaxf+0x22>
 800a4a0:	eeb0 8a68 	vmov.f32	s16, s17
 800a4a4:	eeb0 0a48 	vmov.f32	s0, s16
 800a4a8:	ecbd 8b02 	vpop	{d8}
 800a4ac:	bd08      	pop	{r3, pc}
 800a4ae:	eeb0 0a68 	vmov.f32	s0, s17
 800a4b2:	f000 f809 	bl	800a4c8 <__fpclassifyf>
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	d0f4      	beq.n	800a4a4 <fmaxf+0x18>
 800a4ba:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4c2:	dded      	ble.n	800a4a0 <fmaxf+0x14>
 800a4c4:	e7ee      	b.n	800a4a4 <fmaxf+0x18>
	...

0800a4c8 <__fpclassifyf>:
 800a4c8:	ee10 3a10 	vmov	r3, s0
 800a4cc:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800a4d0:	d00d      	beq.n	800a4ee <__fpclassifyf+0x26>
 800a4d2:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800a4d6:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800a4da:	d30a      	bcc.n	800a4f2 <__fpclassifyf+0x2a>
 800a4dc:	4b07      	ldr	r3, [pc, #28]	@ (800a4fc <__fpclassifyf+0x34>)
 800a4de:	1e42      	subs	r2, r0, #1
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d908      	bls.n	800a4f6 <__fpclassifyf+0x2e>
 800a4e4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800a4e8:	4258      	negs	r0, r3
 800a4ea:	4158      	adcs	r0, r3
 800a4ec:	4770      	bx	lr
 800a4ee:	2002      	movs	r0, #2
 800a4f0:	4770      	bx	lr
 800a4f2:	2004      	movs	r0, #4
 800a4f4:	4770      	bx	lr
 800a4f6:	2003      	movs	r0, #3
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	007ffffe 	.word	0x007ffffe

0800a500 <__ieee754_sqrtf>:
 800a500:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a504:	4770      	bx	lr
	...

0800a508 <__ieee754_asin>:
 800a508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a50c:	ec55 4b10 	vmov	r4, r5, d0
 800a510:	4bc7      	ldr	r3, [pc, #796]	@ (800a830 <__ieee754_asin+0x328>)
 800a512:	b087      	sub	sp, #28
 800a514:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800a518:	429e      	cmp	r6, r3
 800a51a:	9501      	str	r5, [sp, #4]
 800a51c:	d92d      	bls.n	800a57a <__ieee754_asin+0x72>
 800a51e:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800a522:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800a526:	4326      	orrs	r6, r4
 800a528:	d116      	bne.n	800a558 <__ieee754_asin+0x50>
 800a52a:	a3a7      	add	r3, pc, #668	@ (adr r3, 800a7c8 <__ieee754_asin+0x2c0>)
 800a52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a530:	4620      	mov	r0, r4
 800a532:	4629      	mov	r1, r5
 800a534:	f7f6 f878 	bl	8000628 <__aeabi_dmul>
 800a538:	a3a5      	add	r3, pc, #660	@ (adr r3, 800a7d0 <__ieee754_asin+0x2c8>)
 800a53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53e:	4606      	mov	r6, r0
 800a540:	460f      	mov	r7, r1
 800a542:	4620      	mov	r0, r4
 800a544:	4629      	mov	r1, r5
 800a546:	f7f6 f86f 	bl	8000628 <__aeabi_dmul>
 800a54a:	4602      	mov	r2, r0
 800a54c:	460b      	mov	r3, r1
 800a54e:	4630      	mov	r0, r6
 800a550:	4639      	mov	r1, r7
 800a552:	f7f5 feb3 	bl	80002bc <__adddf3>
 800a556:	e009      	b.n	800a56c <__ieee754_asin+0x64>
 800a558:	4622      	mov	r2, r4
 800a55a:	462b      	mov	r3, r5
 800a55c:	4620      	mov	r0, r4
 800a55e:	4629      	mov	r1, r5
 800a560:	f7f5 feaa 	bl	80002b8 <__aeabi_dsub>
 800a564:	4602      	mov	r2, r0
 800a566:	460b      	mov	r3, r1
 800a568:	f7f6 f988 	bl	800087c <__aeabi_ddiv>
 800a56c:	4604      	mov	r4, r0
 800a56e:	460d      	mov	r5, r1
 800a570:	ec45 4b10 	vmov	d0, r4, r5
 800a574:	b007      	add	sp, #28
 800a576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a57a:	4bae      	ldr	r3, [pc, #696]	@ (800a834 <__ieee754_asin+0x32c>)
 800a57c:	429e      	cmp	r6, r3
 800a57e:	d810      	bhi.n	800a5a2 <__ieee754_asin+0x9a>
 800a580:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800a584:	f080 80ad 	bcs.w	800a6e2 <__ieee754_asin+0x1da>
 800a588:	a393      	add	r3, pc, #588	@ (adr r3, 800a7d8 <__ieee754_asin+0x2d0>)
 800a58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58e:	4620      	mov	r0, r4
 800a590:	4629      	mov	r1, r5
 800a592:	f7f5 fe93 	bl	80002bc <__adddf3>
 800a596:	4ba8      	ldr	r3, [pc, #672]	@ (800a838 <__ieee754_asin+0x330>)
 800a598:	2200      	movs	r2, #0
 800a59a:	f7f6 fad5 	bl	8000b48 <__aeabi_dcmpgt>
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	d1e6      	bne.n	800a570 <__ieee754_asin+0x68>
 800a5a2:	ec45 4b10 	vmov	d0, r4, r5
 800a5a6:	f7ff fd7d 	bl	800a0a4 <fabs>
 800a5aa:	49a3      	ldr	r1, [pc, #652]	@ (800a838 <__ieee754_asin+0x330>)
 800a5ac:	ec53 2b10 	vmov	r2, r3, d0
 800a5b0:	2000      	movs	r0, #0
 800a5b2:	f7f5 fe81 	bl	80002b8 <__aeabi_dsub>
 800a5b6:	4ba1      	ldr	r3, [pc, #644]	@ (800a83c <__ieee754_asin+0x334>)
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f7f6 f835 	bl	8000628 <__aeabi_dmul>
 800a5be:	a388      	add	r3, pc, #544	@ (adr r3, 800a7e0 <__ieee754_asin+0x2d8>)
 800a5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c4:	4604      	mov	r4, r0
 800a5c6:	460d      	mov	r5, r1
 800a5c8:	f7f6 f82e 	bl	8000628 <__aeabi_dmul>
 800a5cc:	a386      	add	r3, pc, #536	@ (adr r3, 800a7e8 <__ieee754_asin+0x2e0>)
 800a5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d2:	f7f5 fe73 	bl	80002bc <__adddf3>
 800a5d6:	4622      	mov	r2, r4
 800a5d8:	462b      	mov	r3, r5
 800a5da:	f7f6 f825 	bl	8000628 <__aeabi_dmul>
 800a5de:	a384      	add	r3, pc, #528	@ (adr r3, 800a7f0 <__ieee754_asin+0x2e8>)
 800a5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e4:	f7f5 fe68 	bl	80002b8 <__aeabi_dsub>
 800a5e8:	4622      	mov	r2, r4
 800a5ea:	462b      	mov	r3, r5
 800a5ec:	f7f6 f81c 	bl	8000628 <__aeabi_dmul>
 800a5f0:	a381      	add	r3, pc, #516	@ (adr r3, 800a7f8 <__ieee754_asin+0x2f0>)
 800a5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f6:	f7f5 fe61 	bl	80002bc <__adddf3>
 800a5fa:	4622      	mov	r2, r4
 800a5fc:	462b      	mov	r3, r5
 800a5fe:	f7f6 f813 	bl	8000628 <__aeabi_dmul>
 800a602:	a37f      	add	r3, pc, #508	@ (adr r3, 800a800 <__ieee754_asin+0x2f8>)
 800a604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a608:	f7f5 fe56 	bl	80002b8 <__aeabi_dsub>
 800a60c:	4622      	mov	r2, r4
 800a60e:	462b      	mov	r3, r5
 800a610:	f7f6 f80a 	bl	8000628 <__aeabi_dmul>
 800a614:	a37c      	add	r3, pc, #496	@ (adr r3, 800a808 <__ieee754_asin+0x300>)
 800a616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61a:	f7f5 fe4f 	bl	80002bc <__adddf3>
 800a61e:	4622      	mov	r2, r4
 800a620:	462b      	mov	r3, r5
 800a622:	f7f6 f801 	bl	8000628 <__aeabi_dmul>
 800a626:	a37a      	add	r3, pc, #488	@ (adr r3, 800a810 <__ieee754_asin+0x308>)
 800a628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a630:	4620      	mov	r0, r4
 800a632:	4629      	mov	r1, r5
 800a634:	f7f5 fff8 	bl	8000628 <__aeabi_dmul>
 800a638:	a377      	add	r3, pc, #476	@ (adr r3, 800a818 <__ieee754_asin+0x310>)
 800a63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a63e:	f7f5 fe3b 	bl	80002b8 <__aeabi_dsub>
 800a642:	4622      	mov	r2, r4
 800a644:	462b      	mov	r3, r5
 800a646:	f7f5 ffef 	bl	8000628 <__aeabi_dmul>
 800a64a:	a375      	add	r3, pc, #468	@ (adr r3, 800a820 <__ieee754_asin+0x318>)
 800a64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a650:	f7f5 fe34 	bl	80002bc <__adddf3>
 800a654:	4622      	mov	r2, r4
 800a656:	462b      	mov	r3, r5
 800a658:	f7f5 ffe6 	bl	8000628 <__aeabi_dmul>
 800a65c:	a372      	add	r3, pc, #456	@ (adr r3, 800a828 <__ieee754_asin+0x320>)
 800a65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a662:	f7f5 fe29 	bl	80002b8 <__aeabi_dsub>
 800a666:	4622      	mov	r2, r4
 800a668:	462b      	mov	r3, r5
 800a66a:	f7f5 ffdd 	bl	8000628 <__aeabi_dmul>
 800a66e:	4b72      	ldr	r3, [pc, #456]	@ (800a838 <__ieee754_asin+0x330>)
 800a670:	2200      	movs	r2, #0
 800a672:	f7f5 fe23 	bl	80002bc <__adddf3>
 800a676:	ec45 4b10 	vmov	d0, r4, r5
 800a67a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a67e:	f000 fe83 	bl	800b388 <__ieee754_sqrt>
 800a682:	4b6f      	ldr	r3, [pc, #444]	@ (800a840 <__ieee754_asin+0x338>)
 800a684:	429e      	cmp	r6, r3
 800a686:	ec5b ab10 	vmov	sl, fp, d0
 800a68a:	f240 80db 	bls.w	800a844 <__ieee754_asin+0x33c>
 800a68e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a692:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a696:	f7f6 f8f1 	bl	800087c <__aeabi_ddiv>
 800a69a:	4652      	mov	r2, sl
 800a69c:	465b      	mov	r3, fp
 800a69e:	f7f5 ffc3 	bl	8000628 <__aeabi_dmul>
 800a6a2:	4652      	mov	r2, sl
 800a6a4:	465b      	mov	r3, fp
 800a6a6:	f7f5 fe09 	bl	80002bc <__adddf3>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	f7f5 fe05 	bl	80002bc <__adddf3>
 800a6b2:	a347      	add	r3, pc, #284	@ (adr r3, 800a7d0 <__ieee754_asin+0x2c8>)
 800a6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b8:	f7f5 fdfe 	bl	80002b8 <__aeabi_dsub>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	460b      	mov	r3, r1
 800a6c0:	a141      	add	r1, pc, #260	@ (adr r1, 800a7c8 <__ieee754_asin+0x2c0>)
 800a6c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6c6:	f7f5 fdf7 	bl	80002b8 <__aeabi_dsub>
 800a6ca:	9b01      	ldr	r3, [sp, #4]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	bfdc      	itt	le
 800a6d0:	4602      	movle	r2, r0
 800a6d2:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	460d      	mov	r5, r1
 800a6da:	bfdc      	itt	le
 800a6dc:	4614      	movle	r4, r2
 800a6de:	461d      	movle	r5, r3
 800a6e0:	e746      	b.n	800a570 <__ieee754_asin+0x68>
 800a6e2:	4622      	mov	r2, r4
 800a6e4:	462b      	mov	r3, r5
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	4629      	mov	r1, r5
 800a6ea:	f7f5 ff9d 	bl	8000628 <__aeabi_dmul>
 800a6ee:	a33c      	add	r3, pc, #240	@ (adr r3, 800a7e0 <__ieee754_asin+0x2d8>)
 800a6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f4:	4606      	mov	r6, r0
 800a6f6:	460f      	mov	r7, r1
 800a6f8:	f7f5 ff96 	bl	8000628 <__aeabi_dmul>
 800a6fc:	a33a      	add	r3, pc, #232	@ (adr r3, 800a7e8 <__ieee754_asin+0x2e0>)
 800a6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a702:	f7f5 fddb 	bl	80002bc <__adddf3>
 800a706:	4632      	mov	r2, r6
 800a708:	463b      	mov	r3, r7
 800a70a:	f7f5 ff8d 	bl	8000628 <__aeabi_dmul>
 800a70e:	a338      	add	r3, pc, #224	@ (adr r3, 800a7f0 <__ieee754_asin+0x2e8>)
 800a710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a714:	f7f5 fdd0 	bl	80002b8 <__aeabi_dsub>
 800a718:	4632      	mov	r2, r6
 800a71a:	463b      	mov	r3, r7
 800a71c:	f7f5 ff84 	bl	8000628 <__aeabi_dmul>
 800a720:	a335      	add	r3, pc, #212	@ (adr r3, 800a7f8 <__ieee754_asin+0x2f0>)
 800a722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a726:	f7f5 fdc9 	bl	80002bc <__adddf3>
 800a72a:	4632      	mov	r2, r6
 800a72c:	463b      	mov	r3, r7
 800a72e:	f7f5 ff7b 	bl	8000628 <__aeabi_dmul>
 800a732:	a333      	add	r3, pc, #204	@ (adr r3, 800a800 <__ieee754_asin+0x2f8>)
 800a734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a738:	f7f5 fdbe 	bl	80002b8 <__aeabi_dsub>
 800a73c:	4632      	mov	r2, r6
 800a73e:	463b      	mov	r3, r7
 800a740:	f7f5 ff72 	bl	8000628 <__aeabi_dmul>
 800a744:	a330      	add	r3, pc, #192	@ (adr r3, 800a808 <__ieee754_asin+0x300>)
 800a746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74a:	f7f5 fdb7 	bl	80002bc <__adddf3>
 800a74e:	4632      	mov	r2, r6
 800a750:	463b      	mov	r3, r7
 800a752:	f7f5 ff69 	bl	8000628 <__aeabi_dmul>
 800a756:	a32e      	add	r3, pc, #184	@ (adr r3, 800a810 <__ieee754_asin+0x308>)
 800a758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75c:	4680      	mov	r8, r0
 800a75e:	4689      	mov	r9, r1
 800a760:	4630      	mov	r0, r6
 800a762:	4639      	mov	r1, r7
 800a764:	f7f5 ff60 	bl	8000628 <__aeabi_dmul>
 800a768:	a32b      	add	r3, pc, #172	@ (adr r3, 800a818 <__ieee754_asin+0x310>)
 800a76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76e:	f7f5 fda3 	bl	80002b8 <__aeabi_dsub>
 800a772:	4632      	mov	r2, r6
 800a774:	463b      	mov	r3, r7
 800a776:	f7f5 ff57 	bl	8000628 <__aeabi_dmul>
 800a77a:	a329      	add	r3, pc, #164	@ (adr r3, 800a820 <__ieee754_asin+0x318>)
 800a77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a780:	f7f5 fd9c 	bl	80002bc <__adddf3>
 800a784:	4632      	mov	r2, r6
 800a786:	463b      	mov	r3, r7
 800a788:	f7f5 ff4e 	bl	8000628 <__aeabi_dmul>
 800a78c:	a326      	add	r3, pc, #152	@ (adr r3, 800a828 <__ieee754_asin+0x320>)
 800a78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a792:	f7f5 fd91 	bl	80002b8 <__aeabi_dsub>
 800a796:	4632      	mov	r2, r6
 800a798:	463b      	mov	r3, r7
 800a79a:	f7f5 ff45 	bl	8000628 <__aeabi_dmul>
 800a79e:	4b26      	ldr	r3, [pc, #152]	@ (800a838 <__ieee754_asin+0x330>)
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f7f5 fd8b 	bl	80002bc <__adddf3>
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	4640      	mov	r0, r8
 800a7ac:	4649      	mov	r1, r9
 800a7ae:	f7f6 f865 	bl	800087c <__aeabi_ddiv>
 800a7b2:	4622      	mov	r2, r4
 800a7b4:	462b      	mov	r3, r5
 800a7b6:	f7f5 ff37 	bl	8000628 <__aeabi_dmul>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	460b      	mov	r3, r1
 800a7be:	4620      	mov	r0, r4
 800a7c0:	4629      	mov	r1, r5
 800a7c2:	e6c6      	b.n	800a552 <__ieee754_asin+0x4a>
 800a7c4:	f3af 8000 	nop.w
 800a7c8:	54442d18 	.word	0x54442d18
 800a7cc:	3ff921fb 	.word	0x3ff921fb
 800a7d0:	33145c07 	.word	0x33145c07
 800a7d4:	3c91a626 	.word	0x3c91a626
 800a7d8:	8800759c 	.word	0x8800759c
 800a7dc:	7e37e43c 	.word	0x7e37e43c
 800a7e0:	0dfdf709 	.word	0x0dfdf709
 800a7e4:	3f023de1 	.word	0x3f023de1
 800a7e8:	7501b288 	.word	0x7501b288
 800a7ec:	3f49efe0 	.word	0x3f49efe0
 800a7f0:	b5688f3b 	.word	0xb5688f3b
 800a7f4:	3fa48228 	.word	0x3fa48228
 800a7f8:	0e884455 	.word	0x0e884455
 800a7fc:	3fc9c155 	.word	0x3fc9c155
 800a800:	03eb6f7d 	.word	0x03eb6f7d
 800a804:	3fd4d612 	.word	0x3fd4d612
 800a808:	55555555 	.word	0x55555555
 800a80c:	3fc55555 	.word	0x3fc55555
 800a810:	b12e9282 	.word	0xb12e9282
 800a814:	3fb3b8c5 	.word	0x3fb3b8c5
 800a818:	1b8d0159 	.word	0x1b8d0159
 800a81c:	3fe6066c 	.word	0x3fe6066c
 800a820:	9c598ac8 	.word	0x9c598ac8
 800a824:	40002ae5 	.word	0x40002ae5
 800a828:	1c8a2d4b 	.word	0x1c8a2d4b
 800a82c:	40033a27 	.word	0x40033a27
 800a830:	3fefffff 	.word	0x3fefffff
 800a834:	3fdfffff 	.word	0x3fdfffff
 800a838:	3ff00000 	.word	0x3ff00000
 800a83c:	3fe00000 	.word	0x3fe00000
 800a840:	3fef3332 	.word	0x3fef3332
 800a844:	4652      	mov	r2, sl
 800a846:	465b      	mov	r3, fp
 800a848:	4650      	mov	r0, sl
 800a84a:	4659      	mov	r1, fp
 800a84c:	f7f5 fd36 	bl	80002bc <__adddf3>
 800a850:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a854:	4606      	mov	r6, r0
 800a856:	460f      	mov	r7, r1
 800a858:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a85c:	f7f6 f80e 	bl	800087c <__aeabi_ddiv>
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	4630      	mov	r0, r6
 800a866:	4639      	mov	r1, r7
 800a868:	f7f5 fede 	bl	8000628 <__aeabi_dmul>
 800a86c:	f04f 0800 	mov.w	r8, #0
 800a870:	4606      	mov	r6, r0
 800a872:	460f      	mov	r7, r1
 800a874:	4642      	mov	r2, r8
 800a876:	465b      	mov	r3, fp
 800a878:	4640      	mov	r0, r8
 800a87a:	4659      	mov	r1, fp
 800a87c:	f7f5 fed4 	bl	8000628 <__aeabi_dmul>
 800a880:	4602      	mov	r2, r0
 800a882:	460b      	mov	r3, r1
 800a884:	4620      	mov	r0, r4
 800a886:	4629      	mov	r1, r5
 800a888:	f7f5 fd16 	bl	80002b8 <__aeabi_dsub>
 800a88c:	4642      	mov	r2, r8
 800a88e:	4604      	mov	r4, r0
 800a890:	460d      	mov	r5, r1
 800a892:	465b      	mov	r3, fp
 800a894:	4650      	mov	r0, sl
 800a896:	4659      	mov	r1, fp
 800a898:	f7f5 fd10 	bl	80002bc <__adddf3>
 800a89c:	4602      	mov	r2, r0
 800a89e:	460b      	mov	r3, r1
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	4629      	mov	r1, r5
 800a8a4:	f7f5 ffea 	bl	800087c <__aeabi_ddiv>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	f7f5 fd06 	bl	80002bc <__adddf3>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	a112      	add	r1, pc, #72	@ (adr r1, 800a900 <__ieee754_asin+0x3f8>)
 800a8b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8ba:	f7f5 fcfd 	bl	80002b8 <__aeabi_dsub>
 800a8be:	4602      	mov	r2, r0
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	4630      	mov	r0, r6
 800a8c4:	4639      	mov	r1, r7
 800a8c6:	f7f5 fcf7 	bl	80002b8 <__aeabi_dsub>
 800a8ca:	4642      	mov	r2, r8
 800a8cc:	4604      	mov	r4, r0
 800a8ce:	460d      	mov	r5, r1
 800a8d0:	465b      	mov	r3, fp
 800a8d2:	4640      	mov	r0, r8
 800a8d4:	4659      	mov	r1, fp
 800a8d6:	f7f5 fcf1 	bl	80002bc <__adddf3>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	460b      	mov	r3, r1
 800a8de:	a10a      	add	r1, pc, #40	@ (adr r1, 800a908 <__ieee754_asin+0x400>)
 800a8e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8e4:	f7f5 fce8 	bl	80002b8 <__aeabi_dsub>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	4629      	mov	r1, r5
 800a8f0:	f7f5 fce2 	bl	80002b8 <__aeabi_dsub>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	a103      	add	r1, pc, #12	@ (adr r1, 800a908 <__ieee754_asin+0x400>)
 800a8fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8fe:	e6e2      	b.n	800a6c6 <__ieee754_asin+0x1be>
 800a900:	33145c07 	.word	0x33145c07
 800a904:	3c91a626 	.word	0x3c91a626
 800a908:	54442d18 	.word	0x54442d18
 800a90c:	3fe921fb 	.word	0x3fe921fb

0800a910 <__ieee754_fmod>:
 800a910:	ec53 2b11 	vmov	r2, r3, d1
 800a914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a918:	f023 4800 	bic.w	r8, r3, #2147483648	@ 0x80000000
 800a91c:	ea52 0408 	orrs.w	r4, r2, r8
 800a920:	ec51 0b10 	vmov	r0, r1, d0
 800a924:	461e      	mov	r6, r3
 800a926:	4696      	mov	lr, r2
 800a928:	4694      	mov	ip, r2
 800a92a:	d00c      	beq.n	800a946 <__ieee754_fmod+0x36>
 800a92c:	4d76      	ldr	r5, [pc, #472]	@ (800ab08 <__ieee754_fmod+0x1f8>)
 800a92e:	f021 4900 	bic.w	r9, r1, #2147483648	@ 0x80000000
 800a932:	45a9      	cmp	r9, r5
 800a934:	460c      	mov	r4, r1
 800a936:	d806      	bhi.n	800a946 <__ieee754_fmod+0x36>
 800a938:	4255      	negs	r5, r2
 800a93a:	4f74      	ldr	r7, [pc, #464]	@ (800ab0c <__ieee754_fmod+0x1fc>)
 800a93c:	4315      	orrs	r5, r2
 800a93e:	ea48 75d5 	orr.w	r5, r8, r5, lsr #31
 800a942:	42bd      	cmp	r5, r7
 800a944:	d909      	bls.n	800a95a <__ieee754_fmod+0x4a>
 800a946:	f7f5 fe6f 	bl	8000628 <__aeabi_dmul>
 800a94a:	4602      	mov	r2, r0
 800a94c:	460b      	mov	r3, r1
 800a94e:	f7f5 ff95 	bl	800087c <__aeabi_ddiv>
 800a952:	ec41 0b10 	vmov	d0, r0, r1
 800a956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a95a:	45c1      	cmp	r9, r8
 800a95c:	4682      	mov	sl, r0
 800a95e:	4607      	mov	r7, r0
 800a960:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800a964:	dc09      	bgt.n	800a97a <__ieee754_fmod+0x6a>
 800a966:	dbf4      	blt.n	800a952 <__ieee754_fmod+0x42>
 800a968:	4282      	cmp	r2, r0
 800a96a:	d8f2      	bhi.n	800a952 <__ieee754_fmod+0x42>
 800a96c:	d105      	bne.n	800a97a <__ieee754_fmod+0x6a>
 800a96e:	4b68      	ldr	r3, [pc, #416]	@ (800ab10 <__ieee754_fmod+0x200>)
 800a970:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800a974:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a978:	e7eb      	b.n	800a952 <__ieee754_fmod+0x42>
 800a97a:	4964      	ldr	r1, [pc, #400]	@ (800ab0c <__ieee754_fmod+0x1fc>)
 800a97c:	420c      	tst	r4, r1
 800a97e:	d148      	bne.n	800aa12 <__ieee754_fmod+0x102>
 800a980:	f1b9 0f00 	cmp.w	r9, #0
 800a984:	d13d      	bne.n	800aa02 <__ieee754_fmod+0xf2>
 800a986:	4a63      	ldr	r2, [pc, #396]	@ (800ab14 <__ieee754_fmod+0x204>)
 800a988:	4653      	mov	r3, sl
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	dc36      	bgt.n	800a9fc <__ieee754_fmod+0xec>
 800a98e:	420e      	tst	r6, r1
 800a990:	d14f      	bne.n	800aa32 <__ieee754_fmod+0x122>
 800a992:	f1b8 0f00 	cmp.w	r8, #0
 800a996:	d144      	bne.n	800aa22 <__ieee754_fmod+0x112>
 800a998:	4b5e      	ldr	r3, [pc, #376]	@ (800ab14 <__ieee754_fmod+0x204>)
 800a99a:	4671      	mov	r1, lr
 800a99c:	2900      	cmp	r1, #0
 800a99e:	dc3d      	bgt.n	800aa1c <__ieee754_fmod+0x10c>
 800a9a0:	485d      	ldr	r0, [pc, #372]	@ (800ab18 <__ieee754_fmod+0x208>)
 800a9a2:	4282      	cmp	r2, r0
 800a9a4:	db4a      	blt.n	800aa3c <__ieee754_fmod+0x12c>
 800a9a6:	f3c4 0113 	ubfx	r1, r4, #0, #20
 800a9aa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800a9ae:	485a      	ldr	r0, [pc, #360]	@ (800ab18 <__ieee754_fmod+0x208>)
 800a9b0:	4283      	cmp	r3, r0
 800a9b2:	db57      	blt.n	800aa64 <__ieee754_fmod+0x154>
 800a9b4:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800a9b8:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800a9bc:	1ad0      	subs	r0, r2, r3
 800a9be:	1b8a      	subs	r2, r1, r6
 800a9c0:	eba7 040c 	sub.w	r4, r7, ip
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	d162      	bne.n	800aa8e <__ieee754_fmod+0x17e>
 800a9c8:	4567      	cmp	r7, ip
 800a9ca:	bf38      	it	cc
 800a9cc:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800a9d0:	2a00      	cmp	r2, #0
 800a9d2:	bfbc      	itt	lt
 800a9d4:	463c      	movlt	r4, r7
 800a9d6:	460a      	movlt	r2, r1
 800a9d8:	ea52 0104 	orrs.w	r1, r2, r4
 800a9dc:	d0c7      	beq.n	800a96e <__ieee754_fmod+0x5e>
 800a9de:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 800a9e2:	db69      	blt.n	800aab8 <__ieee754_fmod+0x1a8>
 800a9e4:	494c      	ldr	r1, [pc, #304]	@ (800ab18 <__ieee754_fmod+0x208>)
 800a9e6:	428b      	cmp	r3, r1
 800a9e8:	db6c      	blt.n	800aac4 <__ieee754_fmod+0x1b4>
 800a9ea:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 800a9ee:	432a      	orrs	r2, r5
 800a9f0:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800a9f4:	ea42 5103 	orr.w	r1, r2, r3, lsl #20
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	e7aa      	b.n	800a952 <__ieee754_fmod+0x42>
 800a9fc:	3a01      	subs	r2, #1
 800a9fe:	005b      	lsls	r3, r3, #1
 800aa00:	e7c3      	b.n	800a98a <__ieee754_fmod+0x7a>
 800aa02:	4a45      	ldr	r2, [pc, #276]	@ (800ab18 <__ieee754_fmod+0x208>)
 800aa04:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	ddc0      	ble.n	800a98e <__ieee754_fmod+0x7e>
 800aa0c:	3a01      	subs	r2, #1
 800aa0e:	005b      	lsls	r3, r3, #1
 800aa10:	e7fa      	b.n	800aa08 <__ieee754_fmod+0xf8>
 800aa12:	ea4f 5229 	mov.w	r2, r9, asr #20
 800aa16:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800aa1a:	e7b8      	b.n	800a98e <__ieee754_fmod+0x7e>
 800aa1c:	3b01      	subs	r3, #1
 800aa1e:	0049      	lsls	r1, r1, #1
 800aa20:	e7bc      	b.n	800a99c <__ieee754_fmod+0x8c>
 800aa22:	4b3d      	ldr	r3, [pc, #244]	@ (800ab18 <__ieee754_fmod+0x208>)
 800aa24:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800aa28:	2900      	cmp	r1, #0
 800aa2a:	ddb9      	ble.n	800a9a0 <__ieee754_fmod+0x90>
 800aa2c:	3b01      	subs	r3, #1
 800aa2e:	0049      	lsls	r1, r1, #1
 800aa30:	e7fa      	b.n	800aa28 <__ieee754_fmod+0x118>
 800aa32:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aa36:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800aa3a:	e7b1      	b.n	800a9a0 <__ieee754_fmod+0x90>
 800aa3c:	1a80      	subs	r0, r0, r2
 800aa3e:	281f      	cmp	r0, #31
 800aa40:	dc0a      	bgt.n	800aa58 <__ieee754_fmod+0x148>
 800aa42:	f202 411e 	addw	r1, r2, #1054	@ 0x41e
 800aa46:	fa09 f900 	lsl.w	r9, r9, r0
 800aa4a:	fa2a f101 	lsr.w	r1, sl, r1
 800aa4e:	ea41 0109 	orr.w	r1, r1, r9
 800aa52:	fa0a f700 	lsl.w	r7, sl, r0
 800aa56:	e7aa      	b.n	800a9ae <__ieee754_fmod+0x9e>
 800aa58:	4930      	ldr	r1, [pc, #192]	@ (800ab1c <__ieee754_fmod+0x20c>)
 800aa5a:	1a89      	subs	r1, r1, r2
 800aa5c:	fa0a f101 	lsl.w	r1, sl, r1
 800aa60:	2700      	movs	r7, #0
 800aa62:	e7a4      	b.n	800a9ae <__ieee754_fmod+0x9e>
 800aa64:	1ac0      	subs	r0, r0, r3
 800aa66:	281f      	cmp	r0, #31
 800aa68:	dc0a      	bgt.n	800aa80 <__ieee754_fmod+0x170>
 800aa6a:	f203 461e 	addw	r6, r3, #1054	@ 0x41e
 800aa6e:	fa08 f800 	lsl.w	r8, r8, r0
 800aa72:	fa2e f606 	lsr.w	r6, lr, r6
 800aa76:	ea46 0608 	orr.w	r6, r6, r8
 800aa7a:	fa0e fc00 	lsl.w	ip, lr, r0
 800aa7e:	e79d      	b.n	800a9bc <__ieee754_fmod+0xac>
 800aa80:	4e26      	ldr	r6, [pc, #152]	@ (800ab1c <__ieee754_fmod+0x20c>)
 800aa82:	1af6      	subs	r6, r6, r3
 800aa84:	fa0e f606 	lsl.w	r6, lr, r6
 800aa88:	f04f 0c00 	mov.w	ip, #0
 800aa8c:	e796      	b.n	800a9bc <__ieee754_fmod+0xac>
 800aa8e:	4567      	cmp	r7, ip
 800aa90:	bf38      	it	cc
 800aa92:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800aa96:	2a00      	cmp	r2, #0
 800aa98:	da05      	bge.n	800aaa6 <__ieee754_fmod+0x196>
 800aa9a:	0ffa      	lsrs	r2, r7, #31
 800aa9c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800aaa0:	007f      	lsls	r7, r7, #1
 800aaa2:	3801      	subs	r0, #1
 800aaa4:	e78b      	b.n	800a9be <__ieee754_fmod+0xae>
 800aaa6:	ea52 0104 	orrs.w	r1, r2, r4
 800aaaa:	f43f af60 	beq.w	800a96e <__ieee754_fmod+0x5e>
 800aaae:	0fe1      	lsrs	r1, r4, #31
 800aab0:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800aab4:	0067      	lsls	r7, r4, #1
 800aab6:	e7f4      	b.n	800aaa2 <__ieee754_fmod+0x192>
 800aab8:	0fe1      	lsrs	r1, r4, #31
 800aaba:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800aabe:	0064      	lsls	r4, r4, #1
 800aac0:	3b01      	subs	r3, #1
 800aac2:	e78c      	b.n	800a9de <__ieee754_fmod+0xce>
 800aac4:	1ac9      	subs	r1, r1, r3
 800aac6:	2914      	cmp	r1, #20
 800aac8:	dc0a      	bgt.n	800aae0 <__ieee754_fmod+0x1d0>
 800aaca:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800aace:	fa02 f303 	lsl.w	r3, r2, r3
 800aad2:	40cc      	lsrs	r4, r1
 800aad4:	4323      	orrs	r3, r4
 800aad6:	410a      	asrs	r2, r1
 800aad8:	ea42 0105 	orr.w	r1, r2, r5
 800aadc:	4618      	mov	r0, r3
 800aade:	e738      	b.n	800a952 <__ieee754_fmod+0x42>
 800aae0:	291f      	cmp	r1, #31
 800aae2:	dc07      	bgt.n	800aaf4 <__ieee754_fmod+0x1e4>
 800aae4:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800aae8:	40cc      	lsrs	r4, r1
 800aaea:	fa02 f303 	lsl.w	r3, r2, r3
 800aaee:	4323      	orrs	r3, r4
 800aaf0:	462a      	mov	r2, r5
 800aaf2:	e7f1      	b.n	800aad8 <__ieee754_fmod+0x1c8>
 800aaf4:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 800aaf8:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800aafc:	f503 437b 	add.w	r3, r3, #64256	@ 0xfb00
 800ab00:	33e2      	adds	r3, #226	@ 0xe2
 800ab02:	fa42 f303 	asr.w	r3, r2, r3
 800ab06:	e7f3      	b.n	800aaf0 <__ieee754_fmod+0x1e0>
 800ab08:	7fefffff 	.word	0x7fefffff
 800ab0c:	7ff00000 	.word	0x7ff00000
 800ab10:	0800eca0 	.word	0x0800eca0
 800ab14:	fffffbed 	.word	0xfffffbed
 800ab18:	fffffc02 	.word	0xfffffc02
 800ab1c:	fffffbe2 	.word	0xfffffbe2

0800ab20 <__kernel_cosf>:
 800ab20:	ee10 3a10 	vmov	r3, s0
 800ab24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ab28:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800ab2c:	eef0 6a40 	vmov.f32	s13, s0
 800ab30:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ab34:	d204      	bcs.n	800ab40 <__kernel_cosf+0x20>
 800ab36:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800ab3a:	ee17 2a90 	vmov	r2, s15
 800ab3e:	b342      	cbz	r2, 800ab92 <__kernel_cosf+0x72>
 800ab40:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ab44:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800abb0 <__kernel_cosf+0x90>
 800ab48:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800abb4 <__kernel_cosf+0x94>
 800ab4c:	4a1a      	ldr	r2, [pc, #104]	@ (800abb8 <__kernel_cosf+0x98>)
 800ab4e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ab52:	4293      	cmp	r3, r2
 800ab54:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800abbc <__kernel_cosf+0x9c>
 800ab58:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ab5c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800abc0 <__kernel_cosf+0xa0>
 800ab60:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ab64:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800abc4 <__kernel_cosf+0xa4>
 800ab68:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ab6c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800abc8 <__kernel_cosf+0xa8>
 800ab70:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ab74:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800ab78:	ee26 6a07 	vmul.f32	s12, s12, s14
 800ab7c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ab80:	eee7 0a06 	vfma.f32	s1, s14, s12
 800ab84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab88:	d804      	bhi.n	800ab94 <__kernel_cosf+0x74>
 800ab8a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ab8e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ab92:	4770      	bx	lr
 800ab94:	4a0d      	ldr	r2, [pc, #52]	@ (800abcc <__kernel_cosf+0xac>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	bf9a      	itte	ls
 800ab9a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800ab9e:	ee07 3a10 	vmovls	s14, r3
 800aba2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800aba6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800abaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800abae:	e7ec      	b.n	800ab8a <__kernel_cosf+0x6a>
 800abb0:	ad47d74e 	.word	0xad47d74e
 800abb4:	310f74f6 	.word	0x310f74f6
 800abb8:	3e999999 	.word	0x3e999999
 800abbc:	b493f27c 	.word	0xb493f27c
 800abc0:	37d00d01 	.word	0x37d00d01
 800abc4:	bab60b61 	.word	0xbab60b61
 800abc8:	3d2aaaab 	.word	0x3d2aaaab
 800abcc:	3f480000 	.word	0x3f480000

0800abd0 <__kernel_sinf>:
 800abd0:	ee10 3a10 	vmov	r3, s0
 800abd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800abd8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800abdc:	d204      	bcs.n	800abe8 <__kernel_sinf+0x18>
 800abde:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800abe2:	ee17 3a90 	vmov	r3, s15
 800abe6:	b35b      	cbz	r3, 800ac40 <__kernel_sinf+0x70>
 800abe8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800abec:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ac44 <__kernel_sinf+0x74>
 800abf0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800ac48 <__kernel_sinf+0x78>
 800abf4:	eea7 6a27 	vfma.f32	s12, s14, s15
 800abf8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800ac4c <__kernel_sinf+0x7c>
 800abfc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ac00:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800ac50 <__kernel_sinf+0x80>
 800ac04:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ac08:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800ac54 <__kernel_sinf+0x84>
 800ac0c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800ac10:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ac14:	b930      	cbnz	r0, 800ac24 <__kernel_sinf+0x54>
 800ac16:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800ac58 <__kernel_sinf+0x88>
 800ac1a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ac1e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800ac22:	4770      	bx	lr
 800ac24:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ac28:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800ac2c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800ac30:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800ac34:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800ac5c <__kernel_sinf+0x8c>
 800ac38:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800ac3c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop
 800ac44:	2f2ec9d3 	.word	0x2f2ec9d3
 800ac48:	b2d72f34 	.word	0xb2d72f34
 800ac4c:	3638ef1b 	.word	0x3638ef1b
 800ac50:	b9500d01 	.word	0xb9500d01
 800ac54:	3c088889 	.word	0x3c088889
 800ac58:	be2aaaab 	.word	0xbe2aaaab
 800ac5c:	3e2aaaab 	.word	0x3e2aaaab

0800ac60 <__kernel_tanf>:
 800ac60:	b508      	push	{r3, lr}
 800ac62:	ee10 3a10 	vmov	r3, s0
 800ac66:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ac6a:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 800ac6e:	eef0 7a40 	vmov.f32	s15, s0
 800ac72:	d217      	bcs.n	800aca4 <__kernel_tanf+0x44>
 800ac74:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800ac78:	ee17 1a10 	vmov	r1, s14
 800ac7c:	bb41      	cbnz	r1, 800acd0 <__kernel_tanf+0x70>
 800ac7e:	1c43      	adds	r3, r0, #1
 800ac80:	4313      	orrs	r3, r2
 800ac82:	d108      	bne.n	800ac96 <__kernel_tanf+0x36>
 800ac84:	f7ff fb7a 	bl	800a37c <fabsf>
 800ac88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac8c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ac90:	eeb0 0a67 	vmov.f32	s0, s15
 800ac94:	bd08      	pop	{r3, pc}
 800ac96:	2801      	cmp	r0, #1
 800ac98:	d0fa      	beq.n	800ac90 <__kernel_tanf+0x30>
 800ac9a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ac9e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800aca2:	e7f5      	b.n	800ac90 <__kernel_tanf+0x30>
 800aca4:	494c      	ldr	r1, [pc, #304]	@ (800add8 <__kernel_tanf+0x178>)
 800aca6:	428a      	cmp	r2, r1
 800aca8:	d312      	bcc.n	800acd0 <__kernel_tanf+0x70>
 800acaa:	2b00      	cmp	r3, #0
 800acac:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 800addc <__kernel_tanf+0x17c>
 800acb0:	bfb8      	it	lt
 800acb2:	eef1 7a40 	vneglt.f32	s15, s0
 800acb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800acba:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800ade0 <__kernel_tanf+0x180>
 800acbe:	bfb8      	it	lt
 800acc0:	eef1 0a60 	vneglt.f32	s1, s1
 800acc4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800acc8:	eddf 0a46 	vldr	s1, [pc, #280]	@ 800ade4 <__kernel_tanf+0x184>
 800accc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800acd0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800acd4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800ade8 <__kernel_tanf+0x188>
 800acd8:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 800adec <__kernel_tanf+0x18c>
 800acdc:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 800adf0 <__kernel_tanf+0x190>
 800ace0:	493d      	ldr	r1, [pc, #244]	@ (800add8 <__kernel_tanf+0x178>)
 800ace2:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ace6:	428a      	cmp	r2, r1
 800ace8:	eea7 6a25 	vfma.f32	s12, s14, s11
 800acec:	eddf 5a41 	vldr	s11, [pc, #260]	@ 800adf4 <__kernel_tanf+0x194>
 800acf0:	eee6 5a07 	vfma.f32	s11, s12, s14
 800acf4:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 800adf8 <__kernel_tanf+0x198>
 800acf8:	eea5 6a87 	vfma.f32	s12, s11, s14
 800acfc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800adfc <__kernel_tanf+0x19c>
 800ad00:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ad04:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 800ae00 <__kernel_tanf+0x1a0>
 800ad08:	eea5 6a87 	vfma.f32	s12, s11, s14
 800ad0c:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800ae04 <__kernel_tanf+0x1a4>
 800ad10:	eee7 5a05 	vfma.f32	s11, s14, s10
 800ad14:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800ae08 <__kernel_tanf+0x1a8>
 800ad18:	eea5 5a87 	vfma.f32	s10, s11, s14
 800ad1c:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800ae0c <__kernel_tanf+0x1ac>
 800ad20:	eee5 5a07 	vfma.f32	s11, s10, s14
 800ad24:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800ae10 <__kernel_tanf+0x1b0>
 800ad28:	eea5 5a87 	vfma.f32	s10, s11, s14
 800ad2c:	eddf 5a39 	vldr	s11, [pc, #228]	@ 800ae14 <__kernel_tanf+0x1b4>
 800ad30:	eee5 5a07 	vfma.f32	s11, s10, s14
 800ad34:	eeb0 7a46 	vmov.f32	s14, s12
 800ad38:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ad3c:	ee27 5aa6 	vmul.f32	s10, s15, s13
 800ad40:	eeb0 6a60 	vmov.f32	s12, s1
 800ad44:	eea7 6a05 	vfma.f32	s12, s14, s10
 800ad48:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800ae18 <__kernel_tanf+0x1b8>
 800ad4c:	eee6 0a26 	vfma.f32	s1, s12, s13
 800ad50:	eee5 0a07 	vfma.f32	s1, s10, s14
 800ad54:	ee37 6aa0 	vadd.f32	s12, s15, s1
 800ad58:	d31d      	bcc.n	800ad96 <__kernel_tanf+0x136>
 800ad5a:	ee07 0a10 	vmov	s14, r0
 800ad5e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ad62:	ee26 5a06 	vmul.f32	s10, s12, s12
 800ad66:	ee36 6a07 	vadd.f32	s12, s12, s14
 800ad6a:	179b      	asrs	r3, r3, #30
 800ad6c:	eec5 5a06 	vdiv.f32	s11, s10, s12
 800ad70:	f003 0302 	and.w	r3, r3, #2
 800ad74:	f1c3 0301 	rsb	r3, r3, #1
 800ad78:	ee06 3a90 	vmov	s13, r3
 800ad7c:	ee35 6ae0 	vsub.f32	s12, s11, s1
 800ad80:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ad84:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ad88:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800ad8c:	eea7 7ac6 	vfms.f32	s14, s15, s12
 800ad90:	ee66 7a87 	vmul.f32	s15, s13, s14
 800ad94:	e77c      	b.n	800ac90 <__kernel_tanf+0x30>
 800ad96:	2801      	cmp	r0, #1
 800ad98:	d01b      	beq.n	800add2 <__kernel_tanf+0x172>
 800ad9a:	4b20      	ldr	r3, [pc, #128]	@ (800ae1c <__kernel_tanf+0x1bc>)
 800ad9c:	ee16 2a10 	vmov	r2, s12
 800ada0:	401a      	ands	r2, r3
 800ada2:	ee05 2a90 	vmov	s11, r2
 800ada6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800adaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800adae:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800adb2:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 800adb6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800adba:	ee16 2a90 	vmov	r2, s13
 800adbe:	4013      	ands	r3, r2
 800adc0:	ee07 3a90 	vmov	s15, r3
 800adc4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800adc8:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800adcc:	eee7 7a26 	vfma.f32	s15, s14, s13
 800add0:	e75e      	b.n	800ac90 <__kernel_tanf+0x30>
 800add2:	eef0 7a46 	vmov.f32	s15, s12
 800add6:	e75b      	b.n	800ac90 <__kernel_tanf+0x30>
 800add8:	3f2ca140 	.word	0x3f2ca140
 800addc:	3f490fda 	.word	0x3f490fda
 800ade0:	33222168 	.word	0x33222168
 800ade4:	00000000 	.word	0x00000000
 800ade8:	b79bae5f 	.word	0xb79bae5f
 800adec:	38a3f445 	.word	0x38a3f445
 800adf0:	37d95384 	.word	0x37d95384
 800adf4:	3a1a26c8 	.word	0x3a1a26c8
 800adf8:	3b6b6916 	.word	0x3b6b6916
 800adfc:	3cb327a4 	.word	0x3cb327a4
 800ae00:	3e088889 	.word	0x3e088889
 800ae04:	3895c07a 	.word	0x3895c07a
 800ae08:	398137b9 	.word	0x398137b9
 800ae0c:	3abede48 	.word	0x3abede48
 800ae10:	3c11371f 	.word	0x3c11371f
 800ae14:	3d5d0dd1 	.word	0x3d5d0dd1
 800ae18:	3eaaaaab 	.word	0x3eaaaaab
 800ae1c:	fffff000 	.word	0xfffff000

0800ae20 <__ieee754_asinf>:
 800ae20:	b538      	push	{r3, r4, r5, lr}
 800ae22:	ee10 5a10 	vmov	r5, s0
 800ae26:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800ae2a:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800ae2e:	ed2d 8b04 	vpush	{d8-d9}
 800ae32:	d10c      	bne.n	800ae4e <__ieee754_asinf+0x2e>
 800ae34:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800afa8 <__ieee754_asinf+0x188>
 800ae38:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 800afac <__ieee754_asinf+0x18c>
 800ae3c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ae40:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ae44:	eeb0 0a67 	vmov.f32	s0, s15
 800ae48:	ecbd 8b04 	vpop	{d8-d9}
 800ae4c:	bd38      	pop	{r3, r4, r5, pc}
 800ae4e:	d904      	bls.n	800ae5a <__ieee754_asinf+0x3a>
 800ae50:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ae54:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ae58:	e7f6      	b.n	800ae48 <__ieee754_asinf+0x28>
 800ae5a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800ae5e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800ae62:	d20b      	bcs.n	800ae7c <__ieee754_asinf+0x5c>
 800ae64:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800ae68:	d252      	bcs.n	800af10 <__ieee754_asinf+0xf0>
 800ae6a:	eddf 7a51 	vldr	s15, [pc, #324]	@ 800afb0 <__ieee754_asinf+0x190>
 800ae6e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800ae72:	eef4 7ae8 	vcmpe.f32	s15, s17
 800ae76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae7a:	dce5      	bgt.n	800ae48 <__ieee754_asinf+0x28>
 800ae7c:	f7ff fa7e 	bl	800a37c <fabsf>
 800ae80:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800ae84:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ae88:	ee28 8a27 	vmul.f32	s16, s16, s15
 800ae8c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800afb4 <__ieee754_asinf+0x194>
 800ae90:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800afb8 <__ieee754_asinf+0x198>
 800ae94:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 800afbc <__ieee754_asinf+0x19c>
 800ae98:	eea8 7a27 	vfma.f32	s14, s16, s15
 800ae9c:	eddf 7a48 	vldr	s15, [pc, #288]	@ 800afc0 <__ieee754_asinf+0x1a0>
 800aea0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800aea4:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800afc4 <__ieee754_asinf+0x1a4>
 800aea8:	eea7 7a88 	vfma.f32	s14, s15, s16
 800aeac:	eddf 7a46 	vldr	s15, [pc, #280]	@ 800afc8 <__ieee754_asinf+0x1a8>
 800aeb0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800aeb4:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800afcc <__ieee754_asinf+0x1ac>
 800aeb8:	eea7 9a88 	vfma.f32	s18, s15, s16
 800aebc:	eddf 7a44 	vldr	s15, [pc, #272]	@ 800afd0 <__ieee754_asinf+0x1b0>
 800aec0:	eee8 7a07 	vfma.f32	s15, s16, s14
 800aec4:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 800afd4 <__ieee754_asinf+0x1b4>
 800aec8:	eea7 7a88 	vfma.f32	s14, s15, s16
 800aecc:	eddf 7a42 	vldr	s15, [pc, #264]	@ 800afd8 <__ieee754_asinf+0x1b8>
 800aed0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800aed4:	eeb0 0a48 	vmov.f32	s0, s16
 800aed8:	eee7 8a88 	vfma.f32	s17, s15, s16
 800aedc:	f7ff fb10 	bl	800a500 <__ieee754_sqrtf>
 800aee0:	4b3e      	ldr	r3, [pc, #248]	@ (800afdc <__ieee754_asinf+0x1bc>)
 800aee2:	ee29 9a08 	vmul.f32	s18, s18, s16
 800aee6:	429c      	cmp	r4, r3
 800aee8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800aeec:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800aef0:	d93d      	bls.n	800af6e <__ieee754_asinf+0x14e>
 800aef2:	eea0 0a06 	vfma.f32	s0, s0, s12
 800aef6:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 800afe0 <__ieee754_asinf+0x1c0>
 800aefa:	eee0 7a26 	vfma.f32	s15, s0, s13
 800aefe:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 800afac <__ieee754_asinf+0x18c>
 800af02:	ee30 0a67 	vsub.f32	s0, s0, s15
 800af06:	2d00      	cmp	r5, #0
 800af08:	bfd8      	it	le
 800af0a:	eeb1 0a40 	vnegle.f32	s0, s0
 800af0e:	e79b      	b.n	800ae48 <__ieee754_asinf+0x28>
 800af10:	ee60 7a00 	vmul.f32	s15, s0, s0
 800af14:	eddf 6a28 	vldr	s13, [pc, #160]	@ 800afb8 <__ieee754_asinf+0x198>
 800af18:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800afb4 <__ieee754_asinf+0x194>
 800af1c:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 800afcc <__ieee754_asinf+0x1ac>
 800af20:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800af24:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800afc0 <__ieee754_asinf+0x1a0>
 800af28:	eee7 6a27 	vfma.f32	s13, s14, s15
 800af2c:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800afc4 <__ieee754_asinf+0x1a4>
 800af30:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800af34:	eddf 6a24 	vldr	s13, [pc, #144]	@ 800afc8 <__ieee754_asinf+0x1a8>
 800af38:	eee7 6a27 	vfma.f32	s13, s14, s15
 800af3c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800afbc <__ieee754_asinf+0x19c>
 800af40:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800af44:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800afd0 <__ieee754_asinf+0x1b0>
 800af48:	eee7 6a86 	vfma.f32	s13, s15, s12
 800af4c:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 800afd4 <__ieee754_asinf+0x1b4>
 800af50:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800af54:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800afd8 <__ieee754_asinf+0x1b8>
 800af58:	eee6 6a27 	vfma.f32	s13, s12, s15
 800af5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af60:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800af64:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800af68:	eea0 0a27 	vfma.f32	s0, s0, s15
 800af6c:	e76c      	b.n	800ae48 <__ieee754_asinf+0x28>
 800af6e:	ee10 3a10 	vmov	r3, s0
 800af72:	f36f 030b 	bfc	r3, #0, #12
 800af76:	ee07 3a10 	vmov	s14, r3
 800af7a:	eea7 8a47 	vfms.f32	s16, s14, s14
 800af7e:	ee70 5a00 	vadd.f32	s11, s0, s0
 800af82:	ee30 0a07 	vadd.f32	s0, s0, s14
 800af86:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800afa8 <__ieee754_asinf+0x188>
 800af8a:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800af8e:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800afe4 <__ieee754_asinf+0x1c4>
 800af92:	eee5 7a66 	vfms.f32	s15, s10, s13
 800af96:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800af9a:	eeb0 6a40 	vmov.f32	s12, s0
 800af9e:	eea7 6a66 	vfms.f32	s12, s14, s13
 800afa2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800afa6:	e7ac      	b.n	800af02 <__ieee754_asinf+0xe2>
 800afa8:	b33bbd2e 	.word	0xb33bbd2e
 800afac:	3fc90fdb 	.word	0x3fc90fdb
 800afb0:	7149f2ca 	.word	0x7149f2ca
 800afb4:	3a4f7f04 	.word	0x3a4f7f04
 800afb8:	3811ef08 	.word	0x3811ef08
 800afbc:	3e2aaaab 	.word	0x3e2aaaab
 800afc0:	bd241146 	.word	0xbd241146
 800afc4:	3e4e0aa8 	.word	0x3e4e0aa8
 800afc8:	bea6b090 	.word	0xbea6b090
 800afcc:	3d9dc62e 	.word	0x3d9dc62e
 800afd0:	bf303361 	.word	0xbf303361
 800afd4:	4001572d 	.word	0x4001572d
 800afd8:	c019d139 	.word	0xc019d139
 800afdc:	3f799999 	.word	0x3f799999
 800afe0:	333bbd2e 	.word	0x333bbd2e
 800afe4:	3f490fdb 	.word	0x3f490fdb

0800afe8 <__ieee754_atan2f>:
 800afe8:	ee10 2a90 	vmov	r2, s1
 800afec:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800aff0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800aff4:	b510      	push	{r4, lr}
 800aff6:	eef0 7a40 	vmov.f32	s15, s0
 800affa:	d806      	bhi.n	800b00a <__ieee754_atan2f+0x22>
 800affc:	ee10 0a10 	vmov	r0, s0
 800b000:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800b004:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b008:	d904      	bls.n	800b014 <__ieee754_atan2f+0x2c>
 800b00a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800b00e:	eeb0 0a67 	vmov.f32	s0, s15
 800b012:	bd10      	pop	{r4, pc}
 800b014:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800b018:	d103      	bne.n	800b022 <__ieee754_atan2f+0x3a>
 800b01a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b01e:	f7ff b895 	b.w	800a14c <atanf>
 800b022:	1794      	asrs	r4, r2, #30
 800b024:	f004 0402 	and.w	r4, r4, #2
 800b028:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b02c:	b943      	cbnz	r3, 800b040 <__ieee754_atan2f+0x58>
 800b02e:	2c02      	cmp	r4, #2
 800b030:	d05e      	beq.n	800b0f0 <__ieee754_atan2f+0x108>
 800b032:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800b104 <__ieee754_atan2f+0x11c>
 800b036:	2c03      	cmp	r4, #3
 800b038:	bf08      	it	eq
 800b03a:	eef0 7a47 	vmoveq.f32	s15, s14
 800b03e:	e7e6      	b.n	800b00e <__ieee754_atan2f+0x26>
 800b040:	b941      	cbnz	r1, 800b054 <__ieee754_atan2f+0x6c>
 800b042:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800b108 <__ieee754_atan2f+0x120>
 800b046:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800b10c <__ieee754_atan2f+0x124>
 800b04a:	2800      	cmp	r0, #0
 800b04c:	bfa8      	it	ge
 800b04e:	eef0 7a47 	vmovge.f32	s15, s14
 800b052:	e7dc      	b.n	800b00e <__ieee754_atan2f+0x26>
 800b054:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800b058:	d110      	bne.n	800b07c <__ieee754_atan2f+0x94>
 800b05a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b05e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b062:	d107      	bne.n	800b074 <__ieee754_atan2f+0x8c>
 800b064:	2c02      	cmp	r4, #2
 800b066:	d846      	bhi.n	800b0f6 <__ieee754_atan2f+0x10e>
 800b068:	4b29      	ldr	r3, [pc, #164]	@ (800b110 <__ieee754_atan2f+0x128>)
 800b06a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b06e:	edd3 7a00 	vldr	s15, [r3]
 800b072:	e7cc      	b.n	800b00e <__ieee754_atan2f+0x26>
 800b074:	2c02      	cmp	r4, #2
 800b076:	d841      	bhi.n	800b0fc <__ieee754_atan2f+0x114>
 800b078:	4b26      	ldr	r3, [pc, #152]	@ (800b114 <__ieee754_atan2f+0x12c>)
 800b07a:	e7f6      	b.n	800b06a <__ieee754_atan2f+0x82>
 800b07c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b080:	d0df      	beq.n	800b042 <__ieee754_atan2f+0x5a>
 800b082:	1a5b      	subs	r3, r3, r1
 800b084:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800b088:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800b08c:	da1a      	bge.n	800b0c4 <__ieee754_atan2f+0xdc>
 800b08e:	2a00      	cmp	r2, #0
 800b090:	da01      	bge.n	800b096 <__ieee754_atan2f+0xae>
 800b092:	313c      	adds	r1, #60	@ 0x3c
 800b094:	db19      	blt.n	800b0ca <__ieee754_atan2f+0xe2>
 800b096:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800b09a:	f7ff f96f 	bl	800a37c <fabsf>
 800b09e:	f7ff f855 	bl	800a14c <atanf>
 800b0a2:	eef0 7a40 	vmov.f32	s15, s0
 800b0a6:	2c01      	cmp	r4, #1
 800b0a8:	d012      	beq.n	800b0d0 <__ieee754_atan2f+0xe8>
 800b0aa:	2c02      	cmp	r4, #2
 800b0ac:	d017      	beq.n	800b0de <__ieee754_atan2f+0xf6>
 800b0ae:	2c00      	cmp	r4, #0
 800b0b0:	d0ad      	beq.n	800b00e <__ieee754_atan2f+0x26>
 800b0b2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800b118 <__ieee754_atan2f+0x130>
 800b0b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b0ba:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800b11c <__ieee754_atan2f+0x134>
 800b0be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b0c2:	e7a4      	b.n	800b00e <__ieee754_atan2f+0x26>
 800b0c4:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800b10c <__ieee754_atan2f+0x124>
 800b0c8:	e7ed      	b.n	800b0a6 <__ieee754_atan2f+0xbe>
 800b0ca:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800b120 <__ieee754_atan2f+0x138>
 800b0ce:	e7ea      	b.n	800b0a6 <__ieee754_atan2f+0xbe>
 800b0d0:	ee17 3a90 	vmov	r3, s15
 800b0d4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b0d8:	ee07 3a90 	vmov	s15, r3
 800b0dc:	e797      	b.n	800b00e <__ieee754_atan2f+0x26>
 800b0de:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800b118 <__ieee754_atan2f+0x130>
 800b0e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b0e6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800b11c <__ieee754_atan2f+0x134>
 800b0ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0ee:	e78e      	b.n	800b00e <__ieee754_atan2f+0x26>
 800b0f0:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800b11c <__ieee754_atan2f+0x134>
 800b0f4:	e78b      	b.n	800b00e <__ieee754_atan2f+0x26>
 800b0f6:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800b124 <__ieee754_atan2f+0x13c>
 800b0fa:	e788      	b.n	800b00e <__ieee754_atan2f+0x26>
 800b0fc:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800b120 <__ieee754_atan2f+0x138>
 800b100:	e785      	b.n	800b00e <__ieee754_atan2f+0x26>
 800b102:	bf00      	nop
 800b104:	c0490fdb 	.word	0xc0490fdb
 800b108:	bfc90fdb 	.word	0xbfc90fdb
 800b10c:	3fc90fdb 	.word	0x3fc90fdb
 800b110:	0800ecbc 	.word	0x0800ecbc
 800b114:	0800ecb0 	.word	0x0800ecb0
 800b118:	33bbbd2e 	.word	0x33bbbd2e
 800b11c:	40490fdb 	.word	0x40490fdb
 800b120:	00000000 	.word	0x00000000
 800b124:	3f490fdb 	.word	0x3f490fdb

0800b128 <__ieee754_rem_pio2f>:
 800b128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b12a:	ee10 6a10 	vmov	r6, s0
 800b12e:	4b88      	ldr	r3, [pc, #544]	@ (800b350 <__ieee754_rem_pio2f+0x228>)
 800b130:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800b134:	429d      	cmp	r5, r3
 800b136:	b087      	sub	sp, #28
 800b138:	4604      	mov	r4, r0
 800b13a:	d805      	bhi.n	800b148 <__ieee754_rem_pio2f+0x20>
 800b13c:	2300      	movs	r3, #0
 800b13e:	ed80 0a00 	vstr	s0, [r0]
 800b142:	6043      	str	r3, [r0, #4]
 800b144:	2000      	movs	r0, #0
 800b146:	e022      	b.n	800b18e <__ieee754_rem_pio2f+0x66>
 800b148:	4b82      	ldr	r3, [pc, #520]	@ (800b354 <__ieee754_rem_pio2f+0x22c>)
 800b14a:	429d      	cmp	r5, r3
 800b14c:	d83a      	bhi.n	800b1c4 <__ieee754_rem_pio2f+0x9c>
 800b14e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b152:	2e00      	cmp	r6, #0
 800b154:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800b358 <__ieee754_rem_pio2f+0x230>
 800b158:	4a80      	ldr	r2, [pc, #512]	@ (800b35c <__ieee754_rem_pio2f+0x234>)
 800b15a:	f023 030f 	bic.w	r3, r3, #15
 800b15e:	dd18      	ble.n	800b192 <__ieee754_rem_pio2f+0x6a>
 800b160:	4293      	cmp	r3, r2
 800b162:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b166:	bf09      	itett	eq
 800b168:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800b360 <__ieee754_rem_pio2f+0x238>
 800b16c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800b364 <__ieee754_rem_pio2f+0x23c>
 800b170:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800b368 <__ieee754_rem_pio2f+0x240>
 800b174:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b178:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800b17c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b180:	ed80 7a00 	vstr	s14, [r0]
 800b184:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b188:	edc0 7a01 	vstr	s15, [r0, #4]
 800b18c:	2001      	movs	r0, #1
 800b18e:	b007      	add	sp, #28
 800b190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b192:	4293      	cmp	r3, r2
 800b194:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b198:	bf09      	itett	eq
 800b19a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800b360 <__ieee754_rem_pio2f+0x238>
 800b19e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800b364 <__ieee754_rem_pio2f+0x23c>
 800b1a2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800b368 <__ieee754_rem_pio2f+0x240>
 800b1a6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b1aa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b1ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b1b2:	ed80 7a00 	vstr	s14, [r0]
 800b1b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1ba:	edc0 7a01 	vstr	s15, [r0, #4]
 800b1be:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c2:	e7e4      	b.n	800b18e <__ieee754_rem_pio2f+0x66>
 800b1c4:	4b69      	ldr	r3, [pc, #420]	@ (800b36c <__ieee754_rem_pio2f+0x244>)
 800b1c6:	429d      	cmp	r5, r3
 800b1c8:	d873      	bhi.n	800b2b2 <__ieee754_rem_pio2f+0x18a>
 800b1ca:	f7ff f8d7 	bl	800a37c <fabsf>
 800b1ce:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800b370 <__ieee754_rem_pio2f+0x248>
 800b1d2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b1d6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b1da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b1de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b1e2:	ee17 0a90 	vmov	r0, s15
 800b1e6:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b358 <__ieee754_rem_pio2f+0x230>
 800b1ea:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b1ee:	281f      	cmp	r0, #31
 800b1f0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b364 <__ieee754_rem_pio2f+0x23c>
 800b1f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1f8:	eeb1 6a47 	vneg.f32	s12, s14
 800b1fc:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b200:	ee16 1a90 	vmov	r1, s13
 800b204:	dc09      	bgt.n	800b21a <__ieee754_rem_pio2f+0xf2>
 800b206:	4a5b      	ldr	r2, [pc, #364]	@ (800b374 <__ieee754_rem_pio2f+0x24c>)
 800b208:	1e47      	subs	r7, r0, #1
 800b20a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b20e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800b212:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b216:	4293      	cmp	r3, r2
 800b218:	d107      	bne.n	800b22a <__ieee754_rem_pio2f+0x102>
 800b21a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800b21e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800b222:	2a08      	cmp	r2, #8
 800b224:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800b228:	dc14      	bgt.n	800b254 <__ieee754_rem_pio2f+0x12c>
 800b22a:	6021      	str	r1, [r4, #0]
 800b22c:	ed94 7a00 	vldr	s14, [r4]
 800b230:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b234:	2e00      	cmp	r6, #0
 800b236:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b23a:	ed84 0a01 	vstr	s0, [r4, #4]
 800b23e:	daa6      	bge.n	800b18e <__ieee754_rem_pio2f+0x66>
 800b240:	eeb1 7a47 	vneg.f32	s14, s14
 800b244:	eeb1 0a40 	vneg.f32	s0, s0
 800b248:	ed84 7a00 	vstr	s14, [r4]
 800b24c:	ed84 0a01 	vstr	s0, [r4, #4]
 800b250:	4240      	negs	r0, r0
 800b252:	e79c      	b.n	800b18e <__ieee754_rem_pio2f+0x66>
 800b254:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800b360 <__ieee754_rem_pio2f+0x238>
 800b258:	eef0 6a40 	vmov.f32	s13, s0
 800b25c:	eee6 6a25 	vfma.f32	s13, s12, s11
 800b260:	ee70 7a66 	vsub.f32	s15, s0, s13
 800b264:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b268:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b368 <__ieee754_rem_pio2f+0x240>
 800b26c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b270:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b274:	ee15 2a90 	vmov	r2, s11
 800b278:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b27c:	1a5b      	subs	r3, r3, r1
 800b27e:	2b19      	cmp	r3, #25
 800b280:	dc04      	bgt.n	800b28c <__ieee754_rem_pio2f+0x164>
 800b282:	edc4 5a00 	vstr	s11, [r4]
 800b286:	eeb0 0a66 	vmov.f32	s0, s13
 800b28a:	e7cf      	b.n	800b22c <__ieee754_rem_pio2f+0x104>
 800b28c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800b378 <__ieee754_rem_pio2f+0x250>
 800b290:	eeb0 0a66 	vmov.f32	s0, s13
 800b294:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b298:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b29c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800b37c <__ieee754_rem_pio2f+0x254>
 800b2a0:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b2a4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b2a8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b2ac:	ed84 7a00 	vstr	s14, [r4]
 800b2b0:	e7bc      	b.n	800b22c <__ieee754_rem_pio2f+0x104>
 800b2b2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800b2b6:	d306      	bcc.n	800b2c6 <__ieee754_rem_pio2f+0x19e>
 800b2b8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b2bc:	edc0 7a01 	vstr	s15, [r0, #4]
 800b2c0:	edc0 7a00 	vstr	s15, [r0]
 800b2c4:	e73e      	b.n	800b144 <__ieee754_rem_pio2f+0x1c>
 800b2c6:	15ea      	asrs	r2, r5, #23
 800b2c8:	3a86      	subs	r2, #134	@ 0x86
 800b2ca:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b2ce:	ee07 3a90 	vmov	s15, r3
 800b2d2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b2d6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800b380 <__ieee754_rem_pio2f+0x258>
 800b2da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b2de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b2e2:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b2e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b2ea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b2ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b2f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b2f6:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b2fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b2fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b306:	edcd 7a05 	vstr	s15, [sp, #20]
 800b30a:	d11e      	bne.n	800b34a <__ieee754_rem_pio2f+0x222>
 800b30c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b314:	bf0c      	ite	eq
 800b316:	2301      	moveq	r3, #1
 800b318:	2302      	movne	r3, #2
 800b31a:	491a      	ldr	r1, [pc, #104]	@ (800b384 <__ieee754_rem_pio2f+0x25c>)
 800b31c:	9101      	str	r1, [sp, #4]
 800b31e:	2102      	movs	r1, #2
 800b320:	9100      	str	r1, [sp, #0]
 800b322:	a803      	add	r0, sp, #12
 800b324:	4621      	mov	r1, r4
 800b326:	f000 f905 	bl	800b534 <__kernel_rem_pio2f>
 800b32a:	2e00      	cmp	r6, #0
 800b32c:	f6bf af2f 	bge.w	800b18e <__ieee754_rem_pio2f+0x66>
 800b330:	edd4 7a00 	vldr	s15, [r4]
 800b334:	eef1 7a67 	vneg.f32	s15, s15
 800b338:	edc4 7a00 	vstr	s15, [r4]
 800b33c:	edd4 7a01 	vldr	s15, [r4, #4]
 800b340:	eef1 7a67 	vneg.f32	s15, s15
 800b344:	edc4 7a01 	vstr	s15, [r4, #4]
 800b348:	e782      	b.n	800b250 <__ieee754_rem_pio2f+0x128>
 800b34a:	2303      	movs	r3, #3
 800b34c:	e7e5      	b.n	800b31a <__ieee754_rem_pio2f+0x1f2>
 800b34e:	bf00      	nop
 800b350:	3f490fd8 	.word	0x3f490fd8
 800b354:	4016cbe3 	.word	0x4016cbe3
 800b358:	3fc90f80 	.word	0x3fc90f80
 800b35c:	3fc90fd0 	.word	0x3fc90fd0
 800b360:	37354400 	.word	0x37354400
 800b364:	37354443 	.word	0x37354443
 800b368:	2e85a308 	.word	0x2e85a308
 800b36c:	43490f80 	.word	0x43490f80
 800b370:	3f22f984 	.word	0x3f22f984
 800b374:	0800ecc8 	.word	0x0800ecc8
 800b378:	2e85a300 	.word	0x2e85a300
 800b37c:	248d3132 	.word	0x248d3132
 800b380:	43800000 	.word	0x43800000
 800b384:	0800ed48 	.word	0x0800ed48

0800b388 <__ieee754_sqrt>:
 800b388:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b38c:	4a66      	ldr	r2, [pc, #408]	@ (800b528 <__ieee754_sqrt+0x1a0>)
 800b38e:	ec55 4b10 	vmov	r4, r5, d0
 800b392:	43aa      	bics	r2, r5
 800b394:	462b      	mov	r3, r5
 800b396:	4621      	mov	r1, r4
 800b398:	d110      	bne.n	800b3bc <__ieee754_sqrt+0x34>
 800b39a:	4622      	mov	r2, r4
 800b39c:	4620      	mov	r0, r4
 800b39e:	4629      	mov	r1, r5
 800b3a0:	f7f5 f942 	bl	8000628 <__aeabi_dmul>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	4629      	mov	r1, r5
 800b3ac:	f7f4 ff86 	bl	80002bc <__adddf3>
 800b3b0:	4604      	mov	r4, r0
 800b3b2:	460d      	mov	r5, r1
 800b3b4:	ec45 4b10 	vmov	d0, r4, r5
 800b3b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3bc:	2d00      	cmp	r5, #0
 800b3be:	dc0e      	bgt.n	800b3de <__ieee754_sqrt+0x56>
 800b3c0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b3c4:	4322      	orrs	r2, r4
 800b3c6:	d0f5      	beq.n	800b3b4 <__ieee754_sqrt+0x2c>
 800b3c8:	b19d      	cbz	r5, 800b3f2 <__ieee754_sqrt+0x6a>
 800b3ca:	4622      	mov	r2, r4
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	4629      	mov	r1, r5
 800b3d0:	f7f4 ff72 	bl	80002b8 <__aeabi_dsub>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	f7f5 fa50 	bl	800087c <__aeabi_ddiv>
 800b3dc:	e7e8      	b.n	800b3b0 <__ieee754_sqrt+0x28>
 800b3de:	152a      	asrs	r2, r5, #20
 800b3e0:	d115      	bne.n	800b40e <__ieee754_sqrt+0x86>
 800b3e2:	2000      	movs	r0, #0
 800b3e4:	e009      	b.n	800b3fa <__ieee754_sqrt+0x72>
 800b3e6:	0acb      	lsrs	r3, r1, #11
 800b3e8:	3a15      	subs	r2, #21
 800b3ea:	0549      	lsls	r1, r1, #21
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d0fa      	beq.n	800b3e6 <__ieee754_sqrt+0x5e>
 800b3f0:	e7f7      	b.n	800b3e2 <__ieee754_sqrt+0x5a>
 800b3f2:	462a      	mov	r2, r5
 800b3f4:	e7fa      	b.n	800b3ec <__ieee754_sqrt+0x64>
 800b3f6:	005b      	lsls	r3, r3, #1
 800b3f8:	3001      	adds	r0, #1
 800b3fa:	02dc      	lsls	r4, r3, #11
 800b3fc:	d5fb      	bpl.n	800b3f6 <__ieee754_sqrt+0x6e>
 800b3fe:	1e44      	subs	r4, r0, #1
 800b400:	1b12      	subs	r2, r2, r4
 800b402:	f1c0 0420 	rsb	r4, r0, #32
 800b406:	fa21 f404 	lsr.w	r4, r1, r4
 800b40a:	4323      	orrs	r3, r4
 800b40c:	4081      	lsls	r1, r0
 800b40e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b412:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800b416:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b41a:	07d2      	lsls	r2, r2, #31
 800b41c:	bf5c      	itt	pl
 800b41e:	005b      	lslpl	r3, r3, #1
 800b420:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800b424:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b428:	bf58      	it	pl
 800b42a:	0049      	lslpl	r1, r1, #1
 800b42c:	2600      	movs	r6, #0
 800b42e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800b432:	107f      	asrs	r7, r7, #1
 800b434:	0049      	lsls	r1, r1, #1
 800b436:	2016      	movs	r0, #22
 800b438:	4632      	mov	r2, r6
 800b43a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800b43e:	1915      	adds	r5, r2, r4
 800b440:	429d      	cmp	r5, r3
 800b442:	bfde      	ittt	le
 800b444:	192a      	addle	r2, r5, r4
 800b446:	1b5b      	suble	r3, r3, r5
 800b448:	1936      	addle	r6, r6, r4
 800b44a:	0fcd      	lsrs	r5, r1, #31
 800b44c:	3801      	subs	r0, #1
 800b44e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800b452:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b456:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b45a:	d1f0      	bne.n	800b43e <__ieee754_sqrt+0xb6>
 800b45c:	4605      	mov	r5, r0
 800b45e:	2420      	movs	r4, #32
 800b460:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b464:	4293      	cmp	r3, r2
 800b466:	eb0c 0e00 	add.w	lr, ip, r0
 800b46a:	dc02      	bgt.n	800b472 <__ieee754_sqrt+0xea>
 800b46c:	d113      	bne.n	800b496 <__ieee754_sqrt+0x10e>
 800b46e:	458e      	cmp	lr, r1
 800b470:	d811      	bhi.n	800b496 <__ieee754_sqrt+0x10e>
 800b472:	f1be 0f00 	cmp.w	lr, #0
 800b476:	eb0e 000c 	add.w	r0, lr, ip
 800b47a:	da3f      	bge.n	800b4fc <__ieee754_sqrt+0x174>
 800b47c:	2800      	cmp	r0, #0
 800b47e:	db3d      	blt.n	800b4fc <__ieee754_sqrt+0x174>
 800b480:	f102 0801 	add.w	r8, r2, #1
 800b484:	1a9b      	subs	r3, r3, r2
 800b486:	458e      	cmp	lr, r1
 800b488:	bf88      	it	hi
 800b48a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b48e:	eba1 010e 	sub.w	r1, r1, lr
 800b492:	4465      	add	r5, ip
 800b494:	4642      	mov	r2, r8
 800b496:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b49a:	3c01      	subs	r4, #1
 800b49c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b4a0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b4a4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b4a8:	d1dc      	bne.n	800b464 <__ieee754_sqrt+0xdc>
 800b4aa:	4319      	orrs	r1, r3
 800b4ac:	d01b      	beq.n	800b4e6 <__ieee754_sqrt+0x15e>
 800b4ae:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800b52c <__ieee754_sqrt+0x1a4>
 800b4b2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800b530 <__ieee754_sqrt+0x1a8>
 800b4b6:	e9da 0100 	ldrd	r0, r1, [sl]
 800b4ba:	e9db 2300 	ldrd	r2, r3, [fp]
 800b4be:	f7f4 fefb 	bl	80002b8 <__aeabi_dsub>
 800b4c2:	e9da 8900 	ldrd	r8, r9, [sl]
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	4640      	mov	r0, r8
 800b4cc:	4649      	mov	r1, r9
 800b4ce:	f7f5 fb27 	bl	8000b20 <__aeabi_dcmple>
 800b4d2:	b140      	cbz	r0, 800b4e6 <__ieee754_sqrt+0x15e>
 800b4d4:	f1b5 3fff 	cmp.w	r5, #4294967295
 800b4d8:	e9da 0100 	ldrd	r0, r1, [sl]
 800b4dc:	e9db 2300 	ldrd	r2, r3, [fp]
 800b4e0:	d10e      	bne.n	800b500 <__ieee754_sqrt+0x178>
 800b4e2:	3601      	adds	r6, #1
 800b4e4:	4625      	mov	r5, r4
 800b4e6:	1073      	asrs	r3, r6, #1
 800b4e8:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800b4ec:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800b4f0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800b4f4:	086b      	lsrs	r3, r5, #1
 800b4f6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800b4fa:	e759      	b.n	800b3b0 <__ieee754_sqrt+0x28>
 800b4fc:	4690      	mov	r8, r2
 800b4fe:	e7c1      	b.n	800b484 <__ieee754_sqrt+0xfc>
 800b500:	f7f4 fedc 	bl	80002bc <__adddf3>
 800b504:	e9da 8900 	ldrd	r8, r9, [sl]
 800b508:	4602      	mov	r2, r0
 800b50a:	460b      	mov	r3, r1
 800b50c:	4640      	mov	r0, r8
 800b50e:	4649      	mov	r1, r9
 800b510:	f7f5 fafc 	bl	8000b0c <__aeabi_dcmplt>
 800b514:	b120      	cbz	r0, 800b520 <__ieee754_sqrt+0x198>
 800b516:	1cab      	adds	r3, r5, #2
 800b518:	bf08      	it	eq
 800b51a:	3601      	addeq	r6, #1
 800b51c:	3502      	adds	r5, #2
 800b51e:	e7e2      	b.n	800b4e6 <__ieee754_sqrt+0x15e>
 800b520:	1c6b      	adds	r3, r5, #1
 800b522:	f023 0501 	bic.w	r5, r3, #1
 800b526:	e7de      	b.n	800b4e6 <__ieee754_sqrt+0x15e>
 800b528:	7ff00000 	.word	0x7ff00000
 800b52c:	0800f068 	.word	0x0800f068
 800b530:	0800f060 	.word	0x0800f060

0800b534 <__kernel_rem_pio2f>:
 800b534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b538:	ed2d 8b04 	vpush	{d8-d9}
 800b53c:	b0d9      	sub	sp, #356	@ 0x164
 800b53e:	4690      	mov	r8, r2
 800b540:	9001      	str	r0, [sp, #4]
 800b542:	4ab6      	ldr	r2, [pc, #728]	@ (800b81c <__kernel_rem_pio2f+0x2e8>)
 800b544:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800b546:	f118 0f04 	cmn.w	r8, #4
 800b54a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800b54e:	460f      	mov	r7, r1
 800b550:	f103 3bff 	add.w	fp, r3, #4294967295
 800b554:	db26      	blt.n	800b5a4 <__kernel_rem_pio2f+0x70>
 800b556:	f1b8 0203 	subs.w	r2, r8, #3
 800b55a:	bf48      	it	mi
 800b55c:	f108 0204 	addmi.w	r2, r8, #4
 800b560:	10d2      	asrs	r2, r2, #3
 800b562:	1c55      	adds	r5, r2, #1
 800b564:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b566:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800b82c <__kernel_rem_pio2f+0x2f8>
 800b56a:	00e8      	lsls	r0, r5, #3
 800b56c:	eba2 060b 	sub.w	r6, r2, fp
 800b570:	9002      	str	r0, [sp, #8]
 800b572:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800b576:	eb0a 0c0b 	add.w	ip, sl, fp
 800b57a:	ac1c      	add	r4, sp, #112	@ 0x70
 800b57c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800b580:	2000      	movs	r0, #0
 800b582:	4560      	cmp	r0, ip
 800b584:	dd10      	ble.n	800b5a8 <__kernel_rem_pio2f+0x74>
 800b586:	a91c      	add	r1, sp, #112	@ 0x70
 800b588:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800b58c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800b590:	2600      	movs	r6, #0
 800b592:	4556      	cmp	r6, sl
 800b594:	dc24      	bgt.n	800b5e0 <__kernel_rem_pio2f+0xac>
 800b596:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b59a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800b82c <__kernel_rem_pio2f+0x2f8>
 800b59e:	4684      	mov	ip, r0
 800b5a0:	2400      	movs	r4, #0
 800b5a2:	e016      	b.n	800b5d2 <__kernel_rem_pio2f+0x9e>
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	e7dc      	b.n	800b562 <__kernel_rem_pio2f+0x2e>
 800b5a8:	42c6      	cmn	r6, r0
 800b5aa:	bf5d      	ittte	pl
 800b5ac:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800b5b0:	ee07 1a90 	vmovpl	s15, r1
 800b5b4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b5b8:	eef0 7a47 	vmovmi.f32	s15, s14
 800b5bc:	ece4 7a01 	vstmia	r4!, {s15}
 800b5c0:	3001      	adds	r0, #1
 800b5c2:	e7de      	b.n	800b582 <__kernel_rem_pio2f+0x4e>
 800b5c4:	ecfe 6a01 	vldmia	lr!, {s13}
 800b5c8:	ed3c 7a01 	vldmdb	ip!, {s14}
 800b5cc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b5d0:	3401      	adds	r4, #1
 800b5d2:	455c      	cmp	r4, fp
 800b5d4:	ddf6      	ble.n	800b5c4 <__kernel_rem_pio2f+0x90>
 800b5d6:	ece9 7a01 	vstmia	r9!, {s15}
 800b5da:	3601      	adds	r6, #1
 800b5dc:	3004      	adds	r0, #4
 800b5de:	e7d8      	b.n	800b592 <__kernel_rem_pio2f+0x5e>
 800b5e0:	a908      	add	r1, sp, #32
 800b5e2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b5e6:	9104      	str	r1, [sp, #16]
 800b5e8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b5ea:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800b828 <__kernel_rem_pio2f+0x2f4>
 800b5ee:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800b824 <__kernel_rem_pio2f+0x2f0>
 800b5f2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800b5f6:	9203      	str	r2, [sp, #12]
 800b5f8:	4654      	mov	r4, sl
 800b5fa:	00a2      	lsls	r2, r4, #2
 800b5fc:	9205      	str	r2, [sp, #20]
 800b5fe:	aa58      	add	r2, sp, #352	@ 0x160
 800b600:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800b604:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800b608:	a944      	add	r1, sp, #272	@ 0x110
 800b60a:	aa08      	add	r2, sp, #32
 800b60c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800b610:	4694      	mov	ip, r2
 800b612:	4626      	mov	r6, r4
 800b614:	2e00      	cmp	r6, #0
 800b616:	dc4c      	bgt.n	800b6b2 <__kernel_rem_pio2f+0x17e>
 800b618:	4628      	mov	r0, r5
 800b61a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b61e:	f000 f9f1 	bl	800ba04 <scalbnf>
 800b622:	eeb0 8a40 	vmov.f32	s16, s0
 800b626:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800b62a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b62e:	f000 fa4f 	bl	800bad0 <floorf>
 800b632:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800b636:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b63a:	2d00      	cmp	r5, #0
 800b63c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b640:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b644:	ee17 9a90 	vmov	r9, s15
 800b648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b64c:	ee38 8a67 	vsub.f32	s16, s16, s15
 800b650:	dd41      	ble.n	800b6d6 <__kernel_rem_pio2f+0x1a2>
 800b652:	f104 3cff 	add.w	ip, r4, #4294967295
 800b656:	a908      	add	r1, sp, #32
 800b658:	f1c5 0e08 	rsb	lr, r5, #8
 800b65c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800b660:	fa46 f00e 	asr.w	r0, r6, lr
 800b664:	4481      	add	r9, r0
 800b666:	fa00 f00e 	lsl.w	r0, r0, lr
 800b66a:	1a36      	subs	r6, r6, r0
 800b66c:	f1c5 0007 	rsb	r0, r5, #7
 800b670:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800b674:	4106      	asrs	r6, r0
 800b676:	2e00      	cmp	r6, #0
 800b678:	dd3c      	ble.n	800b6f4 <__kernel_rem_pio2f+0x1c0>
 800b67a:	f04f 0e00 	mov.w	lr, #0
 800b67e:	f109 0901 	add.w	r9, r9, #1
 800b682:	4670      	mov	r0, lr
 800b684:	4574      	cmp	r4, lr
 800b686:	dc68      	bgt.n	800b75a <__kernel_rem_pio2f+0x226>
 800b688:	2d00      	cmp	r5, #0
 800b68a:	dd03      	ble.n	800b694 <__kernel_rem_pio2f+0x160>
 800b68c:	2d01      	cmp	r5, #1
 800b68e:	d074      	beq.n	800b77a <__kernel_rem_pio2f+0x246>
 800b690:	2d02      	cmp	r5, #2
 800b692:	d07d      	beq.n	800b790 <__kernel_rem_pio2f+0x25c>
 800b694:	2e02      	cmp	r6, #2
 800b696:	d12d      	bne.n	800b6f4 <__kernel_rem_pio2f+0x1c0>
 800b698:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b69c:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b6a0:	b340      	cbz	r0, 800b6f4 <__kernel_rem_pio2f+0x1c0>
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	9306      	str	r3, [sp, #24]
 800b6a6:	f000 f9ad 	bl	800ba04 <scalbnf>
 800b6aa:	9b06      	ldr	r3, [sp, #24]
 800b6ac:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b6b0:	e020      	b.n	800b6f4 <__kernel_rem_pio2f+0x1c0>
 800b6b2:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b6b6:	3e01      	subs	r6, #1
 800b6b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b6bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b6c0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b6c4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b6c8:	ecac 0a01 	vstmia	ip!, {s0}
 800b6cc:	ed30 0a01 	vldmdb	r0!, {s0}
 800b6d0:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b6d4:	e79e      	b.n	800b614 <__kernel_rem_pio2f+0xe0>
 800b6d6:	d105      	bne.n	800b6e4 <__kernel_rem_pio2f+0x1b0>
 800b6d8:	1e60      	subs	r0, r4, #1
 800b6da:	a908      	add	r1, sp, #32
 800b6dc:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800b6e0:	11f6      	asrs	r6, r6, #7
 800b6e2:	e7c8      	b.n	800b676 <__kernel_rem_pio2f+0x142>
 800b6e4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b6e8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b6ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6f0:	da31      	bge.n	800b756 <__kernel_rem_pio2f+0x222>
 800b6f2:	2600      	movs	r6, #0
 800b6f4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6fc:	f040 8098 	bne.w	800b830 <__kernel_rem_pio2f+0x2fc>
 800b700:	1e60      	subs	r0, r4, #1
 800b702:	2200      	movs	r2, #0
 800b704:	4550      	cmp	r0, sl
 800b706:	da4b      	bge.n	800b7a0 <__kernel_rem_pio2f+0x26c>
 800b708:	2a00      	cmp	r2, #0
 800b70a:	d065      	beq.n	800b7d8 <__kernel_rem_pio2f+0x2a4>
 800b70c:	3c01      	subs	r4, #1
 800b70e:	ab08      	add	r3, sp, #32
 800b710:	3d08      	subs	r5, #8
 800b712:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d0f8      	beq.n	800b70c <__kernel_rem_pio2f+0x1d8>
 800b71a:	4628      	mov	r0, r5
 800b71c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b720:	f000 f970 	bl	800ba04 <scalbnf>
 800b724:	1c63      	adds	r3, r4, #1
 800b726:	aa44      	add	r2, sp, #272	@ 0x110
 800b728:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800b828 <__kernel_rem_pio2f+0x2f4>
 800b72c:	0099      	lsls	r1, r3, #2
 800b72e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b732:	4623      	mov	r3, r4
 800b734:	2b00      	cmp	r3, #0
 800b736:	f280 80a9 	bge.w	800b88c <__kernel_rem_pio2f+0x358>
 800b73a:	4623      	mov	r3, r4
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	f2c0 80c7 	blt.w	800b8d0 <__kernel_rem_pio2f+0x39c>
 800b742:	aa44      	add	r2, sp, #272	@ 0x110
 800b744:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800b748:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800b820 <__kernel_rem_pio2f+0x2ec>
 800b74c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800b82c <__kernel_rem_pio2f+0x2f8>
 800b750:	2000      	movs	r0, #0
 800b752:	1ae2      	subs	r2, r4, r3
 800b754:	e0b1      	b.n	800b8ba <__kernel_rem_pio2f+0x386>
 800b756:	2602      	movs	r6, #2
 800b758:	e78f      	b.n	800b67a <__kernel_rem_pio2f+0x146>
 800b75a:	f852 1b04 	ldr.w	r1, [r2], #4
 800b75e:	b948      	cbnz	r0, 800b774 <__kernel_rem_pio2f+0x240>
 800b760:	b121      	cbz	r1, 800b76c <__kernel_rem_pio2f+0x238>
 800b762:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800b766:	f842 1c04 	str.w	r1, [r2, #-4]
 800b76a:	2101      	movs	r1, #1
 800b76c:	f10e 0e01 	add.w	lr, lr, #1
 800b770:	4608      	mov	r0, r1
 800b772:	e787      	b.n	800b684 <__kernel_rem_pio2f+0x150>
 800b774:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800b778:	e7f5      	b.n	800b766 <__kernel_rem_pio2f+0x232>
 800b77a:	f104 3cff 	add.w	ip, r4, #4294967295
 800b77e:	aa08      	add	r2, sp, #32
 800b780:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b784:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b788:	a908      	add	r1, sp, #32
 800b78a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800b78e:	e781      	b.n	800b694 <__kernel_rem_pio2f+0x160>
 800b790:	f104 3cff 	add.w	ip, r4, #4294967295
 800b794:	aa08      	add	r2, sp, #32
 800b796:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b79a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800b79e:	e7f3      	b.n	800b788 <__kernel_rem_pio2f+0x254>
 800b7a0:	a908      	add	r1, sp, #32
 800b7a2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b7a6:	3801      	subs	r0, #1
 800b7a8:	430a      	orrs	r2, r1
 800b7aa:	e7ab      	b.n	800b704 <__kernel_rem_pio2f+0x1d0>
 800b7ac:	3201      	adds	r2, #1
 800b7ae:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800b7b2:	2e00      	cmp	r6, #0
 800b7b4:	d0fa      	beq.n	800b7ac <__kernel_rem_pio2f+0x278>
 800b7b6:	9905      	ldr	r1, [sp, #20]
 800b7b8:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800b7bc:	eb0d 0001 	add.w	r0, sp, r1
 800b7c0:	18e6      	adds	r6, r4, r3
 800b7c2:	a91c      	add	r1, sp, #112	@ 0x70
 800b7c4:	f104 0c01 	add.w	ip, r4, #1
 800b7c8:	384c      	subs	r0, #76	@ 0x4c
 800b7ca:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800b7ce:	4422      	add	r2, r4
 800b7d0:	4562      	cmp	r2, ip
 800b7d2:	da04      	bge.n	800b7de <__kernel_rem_pio2f+0x2aa>
 800b7d4:	4614      	mov	r4, r2
 800b7d6:	e710      	b.n	800b5fa <__kernel_rem_pio2f+0xc6>
 800b7d8:	9804      	ldr	r0, [sp, #16]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	e7e7      	b.n	800b7ae <__kernel_rem_pio2f+0x27a>
 800b7de:	9903      	ldr	r1, [sp, #12]
 800b7e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b7e4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800b7e8:	9105      	str	r1, [sp, #20]
 800b7ea:	ee07 1a90 	vmov	s15, r1
 800b7ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7f2:	2400      	movs	r4, #0
 800b7f4:	ece6 7a01 	vstmia	r6!, {s15}
 800b7f8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800b82c <__kernel_rem_pio2f+0x2f8>
 800b7fc:	46b1      	mov	r9, r6
 800b7fe:	455c      	cmp	r4, fp
 800b800:	dd04      	ble.n	800b80c <__kernel_rem_pio2f+0x2d8>
 800b802:	ece0 7a01 	vstmia	r0!, {s15}
 800b806:	f10c 0c01 	add.w	ip, ip, #1
 800b80a:	e7e1      	b.n	800b7d0 <__kernel_rem_pio2f+0x29c>
 800b80c:	ecfe 6a01 	vldmia	lr!, {s13}
 800b810:	ed39 7a01 	vldmdb	r9!, {s14}
 800b814:	3401      	adds	r4, #1
 800b816:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b81a:	e7f0      	b.n	800b7fe <__kernel_rem_pio2f+0x2ca>
 800b81c:	0800f09c 	.word	0x0800f09c
 800b820:	0800f070 	.word	0x0800f070
 800b824:	43800000 	.word	0x43800000
 800b828:	3b800000 	.word	0x3b800000
 800b82c:	00000000 	.word	0x00000000
 800b830:	9b02      	ldr	r3, [sp, #8]
 800b832:	eeb0 0a48 	vmov.f32	s0, s16
 800b836:	eba3 0008 	sub.w	r0, r3, r8
 800b83a:	f000 f8e3 	bl	800ba04 <scalbnf>
 800b83e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800b824 <__kernel_rem_pio2f+0x2f0>
 800b842:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b84a:	db19      	blt.n	800b880 <__kernel_rem_pio2f+0x34c>
 800b84c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800b828 <__kernel_rem_pio2f+0x2f4>
 800b850:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b854:	aa08      	add	r2, sp, #32
 800b856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b85a:	3508      	adds	r5, #8
 800b85c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b860:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b864:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b868:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b86c:	ee10 3a10 	vmov	r3, s0
 800b870:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800b874:	ee17 3a90 	vmov	r3, s15
 800b878:	3401      	adds	r4, #1
 800b87a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800b87e:	e74c      	b.n	800b71a <__kernel_rem_pio2f+0x1e6>
 800b880:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b884:	aa08      	add	r2, sp, #32
 800b886:	ee10 3a10 	vmov	r3, s0
 800b88a:	e7f6      	b.n	800b87a <__kernel_rem_pio2f+0x346>
 800b88c:	a808      	add	r0, sp, #32
 800b88e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800b892:	9001      	str	r0, [sp, #4]
 800b894:	ee07 0a90 	vmov	s15, r0
 800b898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b89c:	3b01      	subs	r3, #1
 800b89e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b8a2:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b8a6:	ed62 7a01 	vstmdb	r2!, {s15}
 800b8aa:	e743      	b.n	800b734 <__kernel_rem_pio2f+0x200>
 800b8ac:	ecfc 6a01 	vldmia	ip!, {s13}
 800b8b0:	ecb5 7a01 	vldmia	r5!, {s14}
 800b8b4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b8b8:	3001      	adds	r0, #1
 800b8ba:	4550      	cmp	r0, sl
 800b8bc:	dc01      	bgt.n	800b8c2 <__kernel_rem_pio2f+0x38e>
 800b8be:	4290      	cmp	r0, r2
 800b8c0:	ddf4      	ble.n	800b8ac <__kernel_rem_pio2f+0x378>
 800b8c2:	a858      	add	r0, sp, #352	@ 0x160
 800b8c4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b8c8:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800b8cc:	3b01      	subs	r3, #1
 800b8ce:	e735      	b.n	800b73c <__kernel_rem_pio2f+0x208>
 800b8d0:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800b8d2:	2b02      	cmp	r3, #2
 800b8d4:	dc09      	bgt.n	800b8ea <__kernel_rem_pio2f+0x3b6>
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	dc27      	bgt.n	800b92a <__kernel_rem_pio2f+0x3f6>
 800b8da:	d040      	beq.n	800b95e <__kernel_rem_pio2f+0x42a>
 800b8dc:	f009 0007 	and.w	r0, r9, #7
 800b8e0:	b059      	add	sp, #356	@ 0x164
 800b8e2:	ecbd 8b04 	vpop	{d8-d9}
 800b8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ea:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800b8ec:	2b03      	cmp	r3, #3
 800b8ee:	d1f5      	bne.n	800b8dc <__kernel_rem_pio2f+0x3a8>
 800b8f0:	aa30      	add	r2, sp, #192	@ 0xc0
 800b8f2:	1f0b      	subs	r3, r1, #4
 800b8f4:	4413      	add	r3, r2
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	2800      	cmp	r0, #0
 800b8fc:	dc50      	bgt.n	800b9a0 <__kernel_rem_pio2f+0x46c>
 800b8fe:	4622      	mov	r2, r4
 800b900:	2a01      	cmp	r2, #1
 800b902:	dc5d      	bgt.n	800b9c0 <__kernel_rem_pio2f+0x48c>
 800b904:	ab30      	add	r3, sp, #192	@ 0xc0
 800b906:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800b82c <__kernel_rem_pio2f+0x2f8>
 800b90a:	440b      	add	r3, r1
 800b90c:	2c01      	cmp	r4, #1
 800b90e:	dc67      	bgt.n	800b9e0 <__kernel_rem_pio2f+0x4ac>
 800b910:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800b914:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800b918:	2e00      	cmp	r6, #0
 800b91a:	d167      	bne.n	800b9ec <__kernel_rem_pio2f+0x4b8>
 800b91c:	edc7 6a00 	vstr	s13, [r7]
 800b920:	ed87 7a01 	vstr	s14, [r7, #4]
 800b924:	edc7 7a02 	vstr	s15, [r7, #8]
 800b928:	e7d8      	b.n	800b8dc <__kernel_rem_pio2f+0x3a8>
 800b92a:	ab30      	add	r3, sp, #192	@ 0xc0
 800b92c:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800b82c <__kernel_rem_pio2f+0x2f8>
 800b930:	440b      	add	r3, r1
 800b932:	4622      	mov	r2, r4
 800b934:	2a00      	cmp	r2, #0
 800b936:	da24      	bge.n	800b982 <__kernel_rem_pio2f+0x44e>
 800b938:	b34e      	cbz	r6, 800b98e <__kernel_rem_pio2f+0x45a>
 800b93a:	eef1 7a47 	vneg.f32	s15, s14
 800b93e:	edc7 7a00 	vstr	s15, [r7]
 800b942:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800b946:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b94a:	aa31      	add	r2, sp, #196	@ 0xc4
 800b94c:	2301      	movs	r3, #1
 800b94e:	429c      	cmp	r4, r3
 800b950:	da20      	bge.n	800b994 <__kernel_rem_pio2f+0x460>
 800b952:	b10e      	cbz	r6, 800b958 <__kernel_rem_pio2f+0x424>
 800b954:	eef1 7a67 	vneg.f32	s15, s15
 800b958:	edc7 7a01 	vstr	s15, [r7, #4]
 800b95c:	e7be      	b.n	800b8dc <__kernel_rem_pio2f+0x3a8>
 800b95e:	ab30      	add	r3, sp, #192	@ 0xc0
 800b960:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800b82c <__kernel_rem_pio2f+0x2f8>
 800b964:	440b      	add	r3, r1
 800b966:	2c00      	cmp	r4, #0
 800b968:	da05      	bge.n	800b976 <__kernel_rem_pio2f+0x442>
 800b96a:	b10e      	cbz	r6, 800b970 <__kernel_rem_pio2f+0x43c>
 800b96c:	eef1 7a67 	vneg.f32	s15, s15
 800b970:	edc7 7a00 	vstr	s15, [r7]
 800b974:	e7b2      	b.n	800b8dc <__kernel_rem_pio2f+0x3a8>
 800b976:	ed33 7a01 	vldmdb	r3!, {s14}
 800b97a:	3c01      	subs	r4, #1
 800b97c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b980:	e7f1      	b.n	800b966 <__kernel_rem_pio2f+0x432>
 800b982:	ed73 7a01 	vldmdb	r3!, {s15}
 800b986:	3a01      	subs	r2, #1
 800b988:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b98c:	e7d2      	b.n	800b934 <__kernel_rem_pio2f+0x400>
 800b98e:	eef0 7a47 	vmov.f32	s15, s14
 800b992:	e7d4      	b.n	800b93e <__kernel_rem_pio2f+0x40a>
 800b994:	ecb2 7a01 	vldmia	r2!, {s14}
 800b998:	3301      	adds	r3, #1
 800b99a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b99e:	e7d6      	b.n	800b94e <__kernel_rem_pio2f+0x41a>
 800b9a0:	ed72 7a01 	vldmdb	r2!, {s15}
 800b9a4:	edd2 6a01 	vldr	s13, [r2, #4]
 800b9a8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b9ac:	3801      	subs	r0, #1
 800b9ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b9b2:	ed82 7a00 	vstr	s14, [r2]
 800b9b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9ba:	edc2 7a01 	vstr	s15, [r2, #4]
 800b9be:	e79c      	b.n	800b8fa <__kernel_rem_pio2f+0x3c6>
 800b9c0:	ed73 7a01 	vldmdb	r3!, {s15}
 800b9c4:	edd3 6a01 	vldr	s13, [r3, #4]
 800b9c8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b9cc:	3a01      	subs	r2, #1
 800b9ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b9d2:	ed83 7a00 	vstr	s14, [r3]
 800b9d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9da:	edc3 7a01 	vstr	s15, [r3, #4]
 800b9de:	e78f      	b.n	800b900 <__kernel_rem_pio2f+0x3cc>
 800b9e0:	ed33 7a01 	vldmdb	r3!, {s14}
 800b9e4:	3c01      	subs	r4, #1
 800b9e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b9ea:	e78f      	b.n	800b90c <__kernel_rem_pio2f+0x3d8>
 800b9ec:	eef1 6a66 	vneg.f32	s13, s13
 800b9f0:	eeb1 7a47 	vneg.f32	s14, s14
 800b9f4:	edc7 6a00 	vstr	s13, [r7]
 800b9f8:	ed87 7a01 	vstr	s14, [r7, #4]
 800b9fc:	eef1 7a67 	vneg.f32	s15, s15
 800ba00:	e790      	b.n	800b924 <__kernel_rem_pio2f+0x3f0>
 800ba02:	bf00      	nop

0800ba04 <scalbnf>:
 800ba04:	ee10 3a10 	vmov	r3, s0
 800ba08:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800ba0c:	d02b      	beq.n	800ba66 <scalbnf+0x62>
 800ba0e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800ba12:	d302      	bcc.n	800ba1a <scalbnf+0x16>
 800ba14:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ba18:	4770      	bx	lr
 800ba1a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800ba1e:	d123      	bne.n	800ba68 <scalbnf+0x64>
 800ba20:	4b24      	ldr	r3, [pc, #144]	@ (800bab4 <scalbnf+0xb0>)
 800ba22:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800bab8 <scalbnf+0xb4>
 800ba26:	4298      	cmp	r0, r3
 800ba28:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ba2c:	db17      	blt.n	800ba5e <scalbnf+0x5a>
 800ba2e:	ee10 3a10 	vmov	r3, s0
 800ba32:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ba36:	3a19      	subs	r2, #25
 800ba38:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800ba3c:	4288      	cmp	r0, r1
 800ba3e:	dd15      	ble.n	800ba6c <scalbnf+0x68>
 800ba40:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800babc <scalbnf+0xb8>
 800ba44:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800bac0 <scalbnf+0xbc>
 800ba48:	ee10 3a10 	vmov	r3, s0
 800ba4c:	eeb0 7a67 	vmov.f32	s14, s15
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	bfb8      	it	lt
 800ba54:	eef0 7a66 	vmovlt.f32	s15, s13
 800ba58:	ee27 0a87 	vmul.f32	s0, s15, s14
 800ba5c:	4770      	bx	lr
 800ba5e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bac4 <scalbnf+0xc0>
 800ba62:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ba66:	4770      	bx	lr
 800ba68:	0dd2      	lsrs	r2, r2, #23
 800ba6a:	e7e5      	b.n	800ba38 <scalbnf+0x34>
 800ba6c:	4410      	add	r0, r2
 800ba6e:	28fe      	cmp	r0, #254	@ 0xfe
 800ba70:	dce6      	bgt.n	800ba40 <scalbnf+0x3c>
 800ba72:	2800      	cmp	r0, #0
 800ba74:	dd06      	ble.n	800ba84 <scalbnf+0x80>
 800ba76:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ba7a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ba7e:	ee00 3a10 	vmov	s0, r3
 800ba82:	4770      	bx	lr
 800ba84:	f110 0f16 	cmn.w	r0, #22
 800ba88:	da09      	bge.n	800ba9e <scalbnf+0x9a>
 800ba8a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800bac4 <scalbnf+0xc0>
 800ba8e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800bac8 <scalbnf+0xc4>
 800ba92:	ee10 3a10 	vmov	r3, s0
 800ba96:	eeb0 7a67 	vmov.f32	s14, s15
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	e7d9      	b.n	800ba52 <scalbnf+0x4e>
 800ba9e:	3019      	adds	r0, #25
 800baa0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800baa4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800baa8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800bacc <scalbnf+0xc8>
 800baac:	ee07 3a90 	vmov	s15, r3
 800bab0:	e7d7      	b.n	800ba62 <scalbnf+0x5e>
 800bab2:	bf00      	nop
 800bab4:	ffff3cb0 	.word	0xffff3cb0
 800bab8:	4c000000 	.word	0x4c000000
 800babc:	7149f2ca 	.word	0x7149f2ca
 800bac0:	f149f2ca 	.word	0xf149f2ca
 800bac4:	0da24260 	.word	0x0da24260
 800bac8:	8da24260 	.word	0x8da24260
 800bacc:	33000000 	.word	0x33000000

0800bad0 <floorf>:
 800bad0:	ee10 3a10 	vmov	r3, s0
 800bad4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bad8:	3a7f      	subs	r2, #127	@ 0x7f
 800bada:	2a16      	cmp	r2, #22
 800badc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bae0:	dc2b      	bgt.n	800bb3a <floorf+0x6a>
 800bae2:	2a00      	cmp	r2, #0
 800bae4:	da12      	bge.n	800bb0c <floorf+0x3c>
 800bae6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bb4c <floorf+0x7c>
 800baea:	ee30 0a27 	vadd.f32	s0, s0, s15
 800baee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800baf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baf6:	dd06      	ble.n	800bb06 <floorf+0x36>
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	da24      	bge.n	800bb46 <floorf+0x76>
 800bafc:	2900      	cmp	r1, #0
 800bafe:	4b14      	ldr	r3, [pc, #80]	@ (800bb50 <floorf+0x80>)
 800bb00:	bf08      	it	eq
 800bb02:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800bb06:	ee00 3a10 	vmov	s0, r3
 800bb0a:	4770      	bx	lr
 800bb0c:	4911      	ldr	r1, [pc, #68]	@ (800bb54 <floorf+0x84>)
 800bb0e:	4111      	asrs	r1, r2
 800bb10:	420b      	tst	r3, r1
 800bb12:	d0fa      	beq.n	800bb0a <floorf+0x3a>
 800bb14:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800bb4c <floorf+0x7c>
 800bb18:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bb1c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bb20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb24:	ddef      	ble.n	800bb06 <floorf+0x36>
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	bfbe      	ittt	lt
 800bb2a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800bb2e:	fa40 f202 	asrlt.w	r2, r0, r2
 800bb32:	189b      	addlt	r3, r3, r2
 800bb34:	ea23 0301 	bic.w	r3, r3, r1
 800bb38:	e7e5      	b.n	800bb06 <floorf+0x36>
 800bb3a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bb3e:	d3e4      	bcc.n	800bb0a <floorf+0x3a>
 800bb40:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bb44:	4770      	bx	lr
 800bb46:	2300      	movs	r3, #0
 800bb48:	e7dd      	b.n	800bb06 <floorf+0x36>
 800bb4a:	bf00      	nop
 800bb4c:	7149f2ca 	.word	0x7149f2ca
 800bb50:	bf800000 	.word	0xbf800000
 800bb54:	007fffff 	.word	0x007fffff

0800bb58 <__cxa_guard_acquire>:
 800bb58:	6802      	ldr	r2, [r0, #0]
 800bb5a:	07d2      	lsls	r2, r2, #31
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	d405      	bmi.n	800bb6c <__cxa_guard_acquire+0x14>
 800bb60:	7842      	ldrb	r2, [r0, #1]
 800bb62:	b102      	cbz	r2, 800bb66 <__cxa_guard_acquire+0xe>
 800bb64:	deff      	udf	#255	@ 0xff
 800bb66:	2001      	movs	r0, #1
 800bb68:	7058      	strb	r0, [r3, #1]
 800bb6a:	4770      	bx	lr
 800bb6c:	2000      	movs	r0, #0
 800bb6e:	4770      	bx	lr

0800bb70 <__cxa_guard_release>:
 800bb70:	2301      	movs	r3, #1
 800bb72:	6003      	str	r3, [r0, #0]
 800bb74:	4770      	bx	lr

0800bb76 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800bb76:	b10a      	cbz	r2, 800bb7c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800bb78:	f001 b9e5 	b.w	800cf46 <memcpy>
 800bb7c:	4770      	bx	lr

0800bb7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j>:
 800bb7e:	1e08      	subs	r0, r1, #0
 800bb80:	b508      	push	{r3, lr}
 800bb82:	da01      	bge.n	800bb88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j+0xa>
 800bb84:	f000 f8ff 	bl	800bd86 <_ZSt17__throw_bad_allocv>
 800bb88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bb8c:	f000 b8ea 	b.w	800bd64 <_Znwj>

0800bb90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 800bb90:	f850 3b08 	ldr.w	r3, [r0], #8
 800bb94:	1a1b      	subs	r3, r3, r0
 800bb96:	4258      	negs	r0, r3
 800bb98:	4158      	adcs	r0, r3
 800bb9a:	4770      	bx	lr

0800bb9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800bb9c:	680b      	ldr	r3, [r1, #0]
 800bb9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bba2:	b510      	push	{r4, lr}
 800bba4:	d302      	bcc.n	800bbac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800bba6:	480b      	ldr	r0, [pc, #44]	@ (800bbd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x38>)
 800bba8:	f000 f8f3 	bl	800bd92 <_ZSt20__throw_length_errorPKc>
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d90b      	bls.n	800bbc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800bbb0:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800bbb4:	ea4f 0442 	mov.w	r4, r2, lsl #1
 800bbb8:	d206      	bcs.n	800bbc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800bbba:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800bbbe:	bf2a      	itet	cs
 800bbc0:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 800bbc4:	600c      	strcc	r4, [r1, #0]
 800bbc6:	600b      	strcs	r3, [r1, #0]
 800bbc8:	6809      	ldr	r1, [r1, #0]
 800bbca:	3101      	adds	r1, #1
 800bbcc:	f7ff ffd7 	bl	800bb7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j>
 800bbd0:	bd10      	pop	{r4, pc}
 800bbd2:	bf00      	nop
 800bbd4:	0800eacc 	.word	0x0800eacc

0800bbd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>:
 800bbd8:	6800      	ldr	r0, [r0, #0]
 800bbda:	f000 b8c1 	b.w	800bd60 <_ZdlPv>

0800bbde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800bbde:	b510      	push	{r4, lr}
 800bbe0:	4604      	mov	r4, r0
 800bbe2:	f7ff ffd5 	bl	800bb90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800bbe6:	b918      	cbnz	r0, 800bbf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x12>
 800bbe8:	68a1      	ldr	r1, [r4, #8]
 800bbea:	4620      	mov	r0, r4
 800bbec:	f7ff fff4 	bl	800bbd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>
 800bbf0:	bd10      	pop	{r4, pc}

0800bbf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800bbf2:	2a01      	cmp	r2, #1
 800bbf4:	b410      	push	{r4}
 800bbf6:	d104      	bne.n	800bc02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800bbf8:	780a      	ldrb	r2, [r1, #0]
 800bbfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbfe:	7002      	strb	r2, [r0, #0]
 800bc00:	4770      	bx	lr
 800bc02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc06:	f7ff bfb6 	b.w	800bb76 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800bc0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800bc0a:	b508      	push	{r3, lr}
 800bc0c:	1a52      	subs	r2, r2, r1
 800bc0e:	f7ff fff0 	bl	800bbf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800bc12:	bd08      	pop	{r3, pc}

0800bc14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800bc14:	b508      	push	{r3, lr}
 800bc16:	1a52      	subs	r2, r2, r1
 800bc18:	f7ff ffeb 	bl	800bbf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800bc1c:	bd08      	pop	{r3, pc}

0800bc1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800bc1e:	f100 0208 	add.w	r2, r0, #8
 800bc22:	6002      	str	r2, [r0, #0]
 800bc24:	2200      	movs	r2, #0
 800bc26:	6042      	str	r2, [r0, #4]
 800bc28:	7202      	strb	r2, [r0, #8]
 800bc2a:	4770      	bx	lr

0800bc2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800bc2c:	b510      	push	{r4, lr}
 800bc2e:	4604      	mov	r4, r0
 800bc30:	f7ff ffd5 	bl	800bbde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800bc34:	4620      	mov	r0, r4
 800bc36:	bd10      	pop	{r4, pc}

0800bc38 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 800bc38:	6840      	ldr	r0, [r0, #4]
 800bc3a:	4770      	bx	lr

0800bc3c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 800bc3c:	b510      	push	{r4, lr}
 800bc3e:	4604      	mov	r4, r0
 800bc40:	f7ff ffa6 	bl	800bb90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800bc44:	b908      	cbnz	r0, 800bc4a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 800bc46:	68a0      	ldr	r0, [r4, #8]
 800bc48:	bd10      	pop	{r4, pc}
 800bc4a:	200f      	movs	r0, #15
 800bc4c:	e7fc      	b.n	800bc48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

0800bc4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 800bc4e:	4288      	cmp	r0, r1
 800bc50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc52:	4604      	mov	r4, r0
 800bc54:	460e      	mov	r6, r1
 800bc56:	d01d      	beq.n	800bc94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x46>
 800bc58:	684d      	ldr	r5, [r1, #4]
 800bc5a:	f7ff ffef 	bl	800bc3c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 800bc5e:	42a8      	cmp	r0, r5
 800bc60:	4602      	mov	r2, r0
 800bc62:	d211      	bcs.n	800bc88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3a>
 800bc64:	a901      	add	r1, sp, #4
 800bc66:	4620      	mov	r0, r4
 800bc68:	9501      	str	r5, [sp, #4]
 800bc6a:	f7ff ff97 	bl	800bb9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800bc6e:	4607      	mov	r7, r0
 800bc70:	4620      	mov	r0, r4
 800bc72:	f7ff ffb4 	bl	800bbde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800bc76:	9b01      	ldr	r3, [sp, #4]
 800bc78:	6027      	str	r7, [r4, #0]
 800bc7a:	60a3      	str	r3, [r4, #8]
 800bc7c:	6831      	ldr	r1, [r6, #0]
 800bc7e:	6820      	ldr	r0, [r4, #0]
 800bc80:	462a      	mov	r2, r5
 800bc82:	f7ff ffb6 	bl	800bbf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800bc86:	e001      	b.n	800bc8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3e>
 800bc88:	2d00      	cmp	r5, #0
 800bc8a:	d1f7      	bne.n	800bc7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x2e>
 800bc8c:	6823      	ldr	r3, [r4, #0]
 800bc8e:	6065      	str	r5, [r4, #4]
 800bc90:	2200      	movs	r2, #0
 800bc92:	555a      	strb	r2, [r3, r5]
 800bc94:	b003      	add	sp, #12
 800bc96:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bc98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 800bc98:	b510      	push	{r4, lr}
 800bc9a:	4604      	mov	r4, r0
 800bc9c:	f7ff ffd7 	bl	800bc4e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 800bca0:	4620      	mov	r0, r4
 800bca2:	bd10      	pop	{r4, pc}

0800bca4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
 800bca4:	6800      	ldr	r0, [r0, #0]
 800bca6:	4770      	bx	lr

0800bca8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 800bca8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bcaa:	1a53      	subs	r3, r2, r1
 800bcac:	2b0f      	cmp	r3, #15
 800bcae:	4604      	mov	r4, r0
 800bcb0:	460d      	mov	r5, r1
 800bcb2:	4616      	mov	r6, r2
 800bcb4:	9301      	str	r3, [sp, #4]
 800bcb6:	d906      	bls.n	800bcc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 800bcb8:	2200      	movs	r2, #0
 800bcba:	a901      	add	r1, sp, #4
 800bcbc:	f7ff ff6e 	bl	800bb9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800bcc0:	9b01      	ldr	r3, [sp, #4]
 800bcc2:	6020      	str	r0, [r4, #0]
 800bcc4:	60a3      	str	r3, [r4, #8]
 800bcc6:	4632      	mov	r2, r6
 800bcc8:	4629      	mov	r1, r5
 800bcca:	6820      	ldr	r0, [r4, #0]
 800bccc:	f7ff ff9d 	bl	800bc0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 800bcd0:	9b01      	ldr	r3, [sp, #4]
 800bcd2:	6822      	ldr	r2, [r4, #0]
 800bcd4:	6063      	str	r3, [r4, #4]
 800bcd6:	2100      	movs	r1, #0
 800bcd8:	54d1      	strb	r1, [r2, r3]
 800bcda:	b002      	add	sp, #8
 800bcdc:	bd70      	pop	{r4, r5, r6, pc}

0800bcde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800bcde:	f100 0208 	add.w	r2, r0, #8
 800bce2:	b510      	push	{r4, lr}
 800bce4:	6002      	str	r2, [r0, #0]
 800bce6:	e9d1 1200 	ldrd	r1, r2, [r1]
 800bcea:	4604      	mov	r4, r0
 800bcec:	f04f 0300 	mov.w	r3, #0
 800bcf0:	440a      	add	r2, r1
 800bcf2:	f7ff ffd9 	bl	800bca8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	bd10      	pop	{r4, pc}

0800bcfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800bcfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bcfc:	1a53      	subs	r3, r2, r1
 800bcfe:	2b0f      	cmp	r3, #15
 800bd00:	4604      	mov	r4, r0
 800bd02:	460d      	mov	r5, r1
 800bd04:	4616      	mov	r6, r2
 800bd06:	9301      	str	r3, [sp, #4]
 800bd08:	d906      	bls.n	800bd18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	a901      	add	r1, sp, #4
 800bd0e:	f7ff ff45 	bl	800bb9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800bd12:	9b01      	ldr	r3, [sp, #4]
 800bd14:	6020      	str	r0, [r4, #0]
 800bd16:	60a3      	str	r3, [r4, #8]
 800bd18:	4632      	mov	r2, r6
 800bd1a:	4629      	mov	r1, r5
 800bd1c:	6820      	ldr	r0, [r4, #0]
 800bd1e:	f7ff ff79 	bl	800bc14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800bd22:	9b01      	ldr	r3, [sp, #4]
 800bd24:	6822      	ldr	r2, [r4, #0]
 800bd26:	6063      	str	r3, [r4, #4]
 800bd28:	2100      	movs	r1, #0
 800bd2a:	54d1      	strb	r1, [r2, r3]
 800bd2c:	b002      	add	sp, #8
 800bd2e:	bd70      	pop	{r4, r5, r6, pc}

0800bd30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800bd30:	b538      	push	{r3, r4, r5, lr}
 800bd32:	f100 0308 	add.w	r3, r0, #8
 800bd36:	4604      	mov	r4, r0
 800bd38:	6003      	str	r3, [r0, #0]
 800bd3a:	460d      	mov	r5, r1
 800bd3c:	b911      	cbnz	r1, 800bd44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x14>
 800bd3e:	4807      	ldr	r0, [pc, #28]	@ (800bd5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x2c>)
 800bd40:	f000 f824 	bl	800bd8c <_ZSt19__throw_logic_errorPKc>
 800bd44:	4608      	mov	r0, r1
 800bd46:	f7f4 faab 	bl	80002a0 <strlen>
 800bd4a:	f04f 0300 	mov.w	r3, #0
 800bd4e:	182a      	adds	r2, r5, r0
 800bd50:	4629      	mov	r1, r5
 800bd52:	4620      	mov	r0, r4
 800bd54:	f7ff ffd1 	bl	800bcfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800bd58:	4620      	mov	r0, r4
 800bd5a:	bd38      	pop	{r3, r4, r5, pc}
 800bd5c:	0800eae4 	.word	0x0800eae4

0800bd60 <_ZdlPv>:
 800bd60:	f000 b834 	b.w	800bdcc <free>

0800bd64 <_Znwj>:
 800bd64:	2801      	cmp	r0, #1
 800bd66:	bf38      	it	cc
 800bd68:	2001      	movcc	r0, #1
 800bd6a:	b510      	push	{r4, lr}
 800bd6c:	4604      	mov	r4, r0
 800bd6e:	4620      	mov	r0, r4
 800bd70:	f000 f824 	bl	800bdbc <malloc>
 800bd74:	b100      	cbz	r0, 800bd78 <_Znwj+0x14>
 800bd76:	bd10      	pop	{r4, pc}
 800bd78:	f000 f80e 	bl	800bd98 <_ZSt15get_new_handlerv>
 800bd7c:	b908      	cbnz	r0, 800bd82 <_Znwj+0x1e>
 800bd7e:	f000 f813 	bl	800bda8 <abort>
 800bd82:	4780      	blx	r0
 800bd84:	e7f3      	b.n	800bd6e <_Znwj+0xa>

0800bd86 <_ZSt17__throw_bad_allocv>:
 800bd86:	b508      	push	{r3, lr}
 800bd88:	f000 f80e 	bl	800bda8 <abort>

0800bd8c <_ZSt19__throw_logic_errorPKc>:
 800bd8c:	b508      	push	{r3, lr}
 800bd8e:	f000 f80b 	bl	800bda8 <abort>

0800bd92 <_ZSt20__throw_length_errorPKc>:
 800bd92:	b508      	push	{r3, lr}
 800bd94:	f000 f808 	bl	800bda8 <abort>

0800bd98 <_ZSt15get_new_handlerv>:
 800bd98:	4b02      	ldr	r3, [pc, #8]	@ (800bda4 <_ZSt15get_new_handlerv+0xc>)
 800bd9a:	6818      	ldr	r0, [r3, #0]
 800bd9c:	f3bf 8f5b 	dmb	ish
 800bda0:	4770      	bx	lr
 800bda2:	bf00      	nop
 800bda4:	20001b28 	.word	0x20001b28

0800bda8 <abort>:
 800bda8:	b508      	push	{r3, lr}
 800bdaa:	2006      	movs	r0, #6
 800bdac:	f001 f82c 	bl	800ce08 <raise>
 800bdb0:	2001      	movs	r0, #1
 800bdb2:	f7f7 f8a7 	bl	8002f04 <_exit>

0800bdb6 <atof>:
 800bdb6:	2100      	movs	r1, #0
 800bdb8:	f000 bec2 	b.w	800cb40 <strtod>

0800bdbc <malloc>:
 800bdbc:	4b02      	ldr	r3, [pc, #8]	@ (800bdc8 <malloc+0xc>)
 800bdbe:	4601      	mov	r1, r0
 800bdc0:	6818      	ldr	r0, [r3, #0]
 800bdc2:	f000 b82d 	b.w	800be20 <_malloc_r>
 800bdc6:	bf00      	nop
 800bdc8:	20000184 	.word	0x20000184

0800bdcc <free>:
 800bdcc:	4b02      	ldr	r3, [pc, #8]	@ (800bdd8 <free+0xc>)
 800bdce:	4601      	mov	r1, r0
 800bdd0:	6818      	ldr	r0, [r3, #0]
 800bdd2:	f001 b8c7 	b.w	800cf64 <_free_r>
 800bdd6:	bf00      	nop
 800bdd8:	20000184 	.word	0x20000184

0800bddc <sbrk_aligned>:
 800bddc:	b570      	push	{r4, r5, r6, lr}
 800bdde:	4e0f      	ldr	r6, [pc, #60]	@ (800be1c <sbrk_aligned+0x40>)
 800bde0:	460c      	mov	r4, r1
 800bde2:	6831      	ldr	r1, [r6, #0]
 800bde4:	4605      	mov	r5, r0
 800bde6:	b911      	cbnz	r1, 800bdee <sbrk_aligned+0x12>
 800bde8:	f001 f85e 	bl	800cea8 <_sbrk_r>
 800bdec:	6030      	str	r0, [r6, #0]
 800bdee:	4621      	mov	r1, r4
 800bdf0:	4628      	mov	r0, r5
 800bdf2:	f001 f859 	bl	800cea8 <_sbrk_r>
 800bdf6:	1c43      	adds	r3, r0, #1
 800bdf8:	d103      	bne.n	800be02 <sbrk_aligned+0x26>
 800bdfa:	f04f 34ff 	mov.w	r4, #4294967295
 800bdfe:	4620      	mov	r0, r4
 800be00:	bd70      	pop	{r4, r5, r6, pc}
 800be02:	1cc4      	adds	r4, r0, #3
 800be04:	f024 0403 	bic.w	r4, r4, #3
 800be08:	42a0      	cmp	r0, r4
 800be0a:	d0f8      	beq.n	800bdfe <sbrk_aligned+0x22>
 800be0c:	1a21      	subs	r1, r4, r0
 800be0e:	4628      	mov	r0, r5
 800be10:	f001 f84a 	bl	800cea8 <_sbrk_r>
 800be14:	3001      	adds	r0, #1
 800be16:	d1f2      	bne.n	800bdfe <sbrk_aligned+0x22>
 800be18:	e7ef      	b.n	800bdfa <sbrk_aligned+0x1e>
 800be1a:	bf00      	nop
 800be1c:	20001b2c 	.word	0x20001b2c

0800be20 <_malloc_r>:
 800be20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be24:	1ccd      	adds	r5, r1, #3
 800be26:	f025 0503 	bic.w	r5, r5, #3
 800be2a:	3508      	adds	r5, #8
 800be2c:	2d0c      	cmp	r5, #12
 800be2e:	bf38      	it	cc
 800be30:	250c      	movcc	r5, #12
 800be32:	2d00      	cmp	r5, #0
 800be34:	4606      	mov	r6, r0
 800be36:	db01      	blt.n	800be3c <_malloc_r+0x1c>
 800be38:	42a9      	cmp	r1, r5
 800be3a:	d904      	bls.n	800be46 <_malloc_r+0x26>
 800be3c:	230c      	movs	r3, #12
 800be3e:	6033      	str	r3, [r6, #0]
 800be40:	2000      	movs	r0, #0
 800be42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bf1c <_malloc_r+0xfc>
 800be4a:	f000 f869 	bl	800bf20 <__malloc_lock>
 800be4e:	f8d8 3000 	ldr.w	r3, [r8]
 800be52:	461c      	mov	r4, r3
 800be54:	bb44      	cbnz	r4, 800bea8 <_malloc_r+0x88>
 800be56:	4629      	mov	r1, r5
 800be58:	4630      	mov	r0, r6
 800be5a:	f7ff ffbf 	bl	800bddc <sbrk_aligned>
 800be5e:	1c43      	adds	r3, r0, #1
 800be60:	4604      	mov	r4, r0
 800be62:	d158      	bne.n	800bf16 <_malloc_r+0xf6>
 800be64:	f8d8 4000 	ldr.w	r4, [r8]
 800be68:	4627      	mov	r7, r4
 800be6a:	2f00      	cmp	r7, #0
 800be6c:	d143      	bne.n	800bef6 <_malloc_r+0xd6>
 800be6e:	2c00      	cmp	r4, #0
 800be70:	d04b      	beq.n	800bf0a <_malloc_r+0xea>
 800be72:	6823      	ldr	r3, [r4, #0]
 800be74:	4639      	mov	r1, r7
 800be76:	4630      	mov	r0, r6
 800be78:	eb04 0903 	add.w	r9, r4, r3
 800be7c:	f001 f814 	bl	800cea8 <_sbrk_r>
 800be80:	4581      	cmp	r9, r0
 800be82:	d142      	bne.n	800bf0a <_malloc_r+0xea>
 800be84:	6821      	ldr	r1, [r4, #0]
 800be86:	1a6d      	subs	r5, r5, r1
 800be88:	4629      	mov	r1, r5
 800be8a:	4630      	mov	r0, r6
 800be8c:	f7ff ffa6 	bl	800bddc <sbrk_aligned>
 800be90:	3001      	adds	r0, #1
 800be92:	d03a      	beq.n	800bf0a <_malloc_r+0xea>
 800be94:	6823      	ldr	r3, [r4, #0]
 800be96:	442b      	add	r3, r5
 800be98:	6023      	str	r3, [r4, #0]
 800be9a:	f8d8 3000 	ldr.w	r3, [r8]
 800be9e:	685a      	ldr	r2, [r3, #4]
 800bea0:	bb62      	cbnz	r2, 800befc <_malloc_r+0xdc>
 800bea2:	f8c8 7000 	str.w	r7, [r8]
 800bea6:	e00f      	b.n	800bec8 <_malloc_r+0xa8>
 800bea8:	6822      	ldr	r2, [r4, #0]
 800beaa:	1b52      	subs	r2, r2, r5
 800beac:	d420      	bmi.n	800bef0 <_malloc_r+0xd0>
 800beae:	2a0b      	cmp	r2, #11
 800beb0:	d917      	bls.n	800bee2 <_malloc_r+0xc2>
 800beb2:	1961      	adds	r1, r4, r5
 800beb4:	42a3      	cmp	r3, r4
 800beb6:	6025      	str	r5, [r4, #0]
 800beb8:	bf18      	it	ne
 800beba:	6059      	strne	r1, [r3, #4]
 800bebc:	6863      	ldr	r3, [r4, #4]
 800bebe:	bf08      	it	eq
 800bec0:	f8c8 1000 	streq.w	r1, [r8]
 800bec4:	5162      	str	r2, [r4, r5]
 800bec6:	604b      	str	r3, [r1, #4]
 800bec8:	4630      	mov	r0, r6
 800beca:	f000 f82f 	bl	800bf2c <__malloc_unlock>
 800bece:	f104 000b 	add.w	r0, r4, #11
 800bed2:	1d23      	adds	r3, r4, #4
 800bed4:	f020 0007 	bic.w	r0, r0, #7
 800bed8:	1ac2      	subs	r2, r0, r3
 800beda:	bf1c      	itt	ne
 800bedc:	1a1b      	subne	r3, r3, r0
 800bede:	50a3      	strne	r3, [r4, r2]
 800bee0:	e7af      	b.n	800be42 <_malloc_r+0x22>
 800bee2:	6862      	ldr	r2, [r4, #4]
 800bee4:	42a3      	cmp	r3, r4
 800bee6:	bf0c      	ite	eq
 800bee8:	f8c8 2000 	streq.w	r2, [r8]
 800beec:	605a      	strne	r2, [r3, #4]
 800beee:	e7eb      	b.n	800bec8 <_malloc_r+0xa8>
 800bef0:	4623      	mov	r3, r4
 800bef2:	6864      	ldr	r4, [r4, #4]
 800bef4:	e7ae      	b.n	800be54 <_malloc_r+0x34>
 800bef6:	463c      	mov	r4, r7
 800bef8:	687f      	ldr	r7, [r7, #4]
 800befa:	e7b6      	b.n	800be6a <_malloc_r+0x4a>
 800befc:	461a      	mov	r2, r3
 800befe:	685b      	ldr	r3, [r3, #4]
 800bf00:	42a3      	cmp	r3, r4
 800bf02:	d1fb      	bne.n	800befc <_malloc_r+0xdc>
 800bf04:	2300      	movs	r3, #0
 800bf06:	6053      	str	r3, [r2, #4]
 800bf08:	e7de      	b.n	800bec8 <_malloc_r+0xa8>
 800bf0a:	230c      	movs	r3, #12
 800bf0c:	6033      	str	r3, [r6, #0]
 800bf0e:	4630      	mov	r0, r6
 800bf10:	f000 f80c 	bl	800bf2c <__malloc_unlock>
 800bf14:	e794      	b.n	800be40 <_malloc_r+0x20>
 800bf16:	6005      	str	r5, [r0, #0]
 800bf18:	e7d6      	b.n	800bec8 <_malloc_r+0xa8>
 800bf1a:	bf00      	nop
 800bf1c:	20001b30 	.word	0x20001b30

0800bf20 <__malloc_lock>:
 800bf20:	4801      	ldr	r0, [pc, #4]	@ (800bf28 <__malloc_lock+0x8>)
 800bf22:	f001 b80e 	b.w	800cf42 <__retarget_lock_acquire_recursive>
 800bf26:	bf00      	nop
 800bf28:	20001c74 	.word	0x20001c74

0800bf2c <__malloc_unlock>:
 800bf2c:	4801      	ldr	r0, [pc, #4]	@ (800bf34 <__malloc_unlock+0x8>)
 800bf2e:	f001 b809 	b.w	800cf44 <__retarget_lock_release_recursive>
 800bf32:	bf00      	nop
 800bf34:	20001c74 	.word	0x20001c74

0800bf38 <sulp>:
 800bf38:	b570      	push	{r4, r5, r6, lr}
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	460d      	mov	r5, r1
 800bf3e:	ec45 4b10 	vmov	d0, r4, r5
 800bf42:	4616      	mov	r6, r2
 800bf44:	f001 ff10 	bl	800dd68 <__ulp>
 800bf48:	ec51 0b10 	vmov	r0, r1, d0
 800bf4c:	b17e      	cbz	r6, 800bf6e <sulp+0x36>
 800bf4e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bf52:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	dd09      	ble.n	800bf6e <sulp+0x36>
 800bf5a:	051b      	lsls	r3, r3, #20
 800bf5c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800bf60:	2400      	movs	r4, #0
 800bf62:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800bf66:	4622      	mov	r2, r4
 800bf68:	462b      	mov	r3, r5
 800bf6a:	f7f4 fb5d 	bl	8000628 <__aeabi_dmul>
 800bf6e:	ec41 0b10 	vmov	d0, r0, r1
 800bf72:	bd70      	pop	{r4, r5, r6, pc}
 800bf74:	0000      	movs	r0, r0
	...

0800bf78 <_strtod_l>:
 800bf78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf7c:	b09f      	sub	sp, #124	@ 0x7c
 800bf7e:	460c      	mov	r4, r1
 800bf80:	9217      	str	r2, [sp, #92]	@ 0x5c
 800bf82:	2200      	movs	r2, #0
 800bf84:	921a      	str	r2, [sp, #104]	@ 0x68
 800bf86:	9005      	str	r0, [sp, #20]
 800bf88:	f04f 0a00 	mov.w	sl, #0
 800bf8c:	f04f 0b00 	mov.w	fp, #0
 800bf90:	460a      	mov	r2, r1
 800bf92:	9219      	str	r2, [sp, #100]	@ 0x64
 800bf94:	7811      	ldrb	r1, [r2, #0]
 800bf96:	292b      	cmp	r1, #43	@ 0x2b
 800bf98:	d04a      	beq.n	800c030 <_strtod_l+0xb8>
 800bf9a:	d838      	bhi.n	800c00e <_strtod_l+0x96>
 800bf9c:	290d      	cmp	r1, #13
 800bf9e:	d832      	bhi.n	800c006 <_strtod_l+0x8e>
 800bfa0:	2908      	cmp	r1, #8
 800bfa2:	d832      	bhi.n	800c00a <_strtod_l+0x92>
 800bfa4:	2900      	cmp	r1, #0
 800bfa6:	d03b      	beq.n	800c020 <_strtod_l+0xa8>
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	920e      	str	r2, [sp, #56]	@ 0x38
 800bfac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800bfae:	782a      	ldrb	r2, [r5, #0]
 800bfb0:	2a30      	cmp	r2, #48	@ 0x30
 800bfb2:	f040 80b2 	bne.w	800c11a <_strtod_l+0x1a2>
 800bfb6:	786a      	ldrb	r2, [r5, #1]
 800bfb8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bfbc:	2a58      	cmp	r2, #88	@ 0x58
 800bfbe:	d16e      	bne.n	800c09e <_strtod_l+0x126>
 800bfc0:	9302      	str	r3, [sp, #8]
 800bfc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfc4:	9301      	str	r3, [sp, #4]
 800bfc6:	ab1a      	add	r3, sp, #104	@ 0x68
 800bfc8:	9300      	str	r3, [sp, #0]
 800bfca:	4a8f      	ldr	r2, [pc, #572]	@ (800c208 <_strtod_l+0x290>)
 800bfcc:	9805      	ldr	r0, [sp, #20]
 800bfce:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bfd0:	a919      	add	r1, sp, #100	@ 0x64
 800bfd2:	f001 f879 	bl	800d0c8 <__gethex>
 800bfd6:	f010 060f 	ands.w	r6, r0, #15
 800bfda:	4604      	mov	r4, r0
 800bfdc:	d005      	beq.n	800bfea <_strtod_l+0x72>
 800bfde:	2e06      	cmp	r6, #6
 800bfe0:	d128      	bne.n	800c034 <_strtod_l+0xbc>
 800bfe2:	3501      	adds	r5, #1
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	9519      	str	r5, [sp, #100]	@ 0x64
 800bfe8:	930e      	str	r3, [sp, #56]	@ 0x38
 800bfea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	f040 858e 	bne.w	800cb0e <_strtod_l+0xb96>
 800bff2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bff4:	b1cb      	cbz	r3, 800c02a <_strtod_l+0xb2>
 800bff6:	4652      	mov	r2, sl
 800bff8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800bffc:	ec43 2b10 	vmov	d0, r2, r3
 800c000:	b01f      	add	sp, #124	@ 0x7c
 800c002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c006:	2920      	cmp	r1, #32
 800c008:	d1ce      	bne.n	800bfa8 <_strtod_l+0x30>
 800c00a:	3201      	adds	r2, #1
 800c00c:	e7c1      	b.n	800bf92 <_strtod_l+0x1a>
 800c00e:	292d      	cmp	r1, #45	@ 0x2d
 800c010:	d1ca      	bne.n	800bfa8 <_strtod_l+0x30>
 800c012:	2101      	movs	r1, #1
 800c014:	910e      	str	r1, [sp, #56]	@ 0x38
 800c016:	1c51      	adds	r1, r2, #1
 800c018:	9119      	str	r1, [sp, #100]	@ 0x64
 800c01a:	7852      	ldrb	r2, [r2, #1]
 800c01c:	2a00      	cmp	r2, #0
 800c01e:	d1c5      	bne.n	800bfac <_strtod_l+0x34>
 800c020:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c022:	9419      	str	r4, [sp, #100]	@ 0x64
 800c024:	2b00      	cmp	r3, #0
 800c026:	f040 8570 	bne.w	800cb0a <_strtod_l+0xb92>
 800c02a:	4652      	mov	r2, sl
 800c02c:	465b      	mov	r3, fp
 800c02e:	e7e5      	b.n	800bffc <_strtod_l+0x84>
 800c030:	2100      	movs	r1, #0
 800c032:	e7ef      	b.n	800c014 <_strtod_l+0x9c>
 800c034:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c036:	b13a      	cbz	r2, 800c048 <_strtod_l+0xd0>
 800c038:	2135      	movs	r1, #53	@ 0x35
 800c03a:	a81c      	add	r0, sp, #112	@ 0x70
 800c03c:	f001 ff8e 	bl	800df5c <__copybits>
 800c040:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c042:	9805      	ldr	r0, [sp, #20]
 800c044:	f001 fb64 	bl	800d710 <_Bfree>
 800c048:	3e01      	subs	r6, #1
 800c04a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c04c:	2e04      	cmp	r6, #4
 800c04e:	d806      	bhi.n	800c05e <_strtod_l+0xe6>
 800c050:	e8df f006 	tbb	[pc, r6]
 800c054:	201d0314 	.word	0x201d0314
 800c058:	14          	.byte	0x14
 800c059:	00          	.byte	0x00
 800c05a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c05e:	05e1      	lsls	r1, r4, #23
 800c060:	bf48      	it	mi
 800c062:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c066:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c06a:	0d1b      	lsrs	r3, r3, #20
 800c06c:	051b      	lsls	r3, r3, #20
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d1bb      	bne.n	800bfea <_strtod_l+0x72>
 800c072:	f000 ff3b 	bl	800ceec <__errno>
 800c076:	2322      	movs	r3, #34	@ 0x22
 800c078:	6003      	str	r3, [r0, #0]
 800c07a:	e7b6      	b.n	800bfea <_strtod_l+0x72>
 800c07c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c080:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c084:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c088:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c08c:	e7e7      	b.n	800c05e <_strtod_l+0xe6>
 800c08e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c210 <_strtod_l+0x298>
 800c092:	e7e4      	b.n	800c05e <_strtod_l+0xe6>
 800c094:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c098:	f04f 3aff 	mov.w	sl, #4294967295
 800c09c:	e7df      	b.n	800c05e <_strtod_l+0xe6>
 800c09e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c0a0:	1c5a      	adds	r2, r3, #1
 800c0a2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c0a4:	785b      	ldrb	r3, [r3, #1]
 800c0a6:	2b30      	cmp	r3, #48	@ 0x30
 800c0a8:	d0f9      	beq.n	800c09e <_strtod_l+0x126>
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d09d      	beq.n	800bfea <_strtod_l+0x72>
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	2700      	movs	r7, #0
 800c0b2:	9308      	str	r3, [sp, #32]
 800c0b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c0b6:	930c      	str	r3, [sp, #48]	@ 0x30
 800c0b8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c0ba:	46b9      	mov	r9, r7
 800c0bc:	220a      	movs	r2, #10
 800c0be:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c0c0:	7805      	ldrb	r5, [r0, #0]
 800c0c2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c0c6:	b2d9      	uxtb	r1, r3
 800c0c8:	2909      	cmp	r1, #9
 800c0ca:	d928      	bls.n	800c11e <_strtod_l+0x1a6>
 800c0cc:	494f      	ldr	r1, [pc, #316]	@ (800c20c <_strtod_l+0x294>)
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	f000 fe5f 	bl	800cd92 <strncmp>
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	d032      	beq.n	800c13e <_strtod_l+0x1c6>
 800c0d8:	2000      	movs	r0, #0
 800c0da:	462a      	mov	r2, r5
 800c0dc:	900a      	str	r0, [sp, #40]	@ 0x28
 800c0de:	464d      	mov	r5, r9
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	2a65      	cmp	r2, #101	@ 0x65
 800c0e4:	d001      	beq.n	800c0ea <_strtod_l+0x172>
 800c0e6:	2a45      	cmp	r2, #69	@ 0x45
 800c0e8:	d114      	bne.n	800c114 <_strtod_l+0x19c>
 800c0ea:	b91d      	cbnz	r5, 800c0f4 <_strtod_l+0x17c>
 800c0ec:	9a08      	ldr	r2, [sp, #32]
 800c0ee:	4302      	orrs	r2, r0
 800c0f0:	d096      	beq.n	800c020 <_strtod_l+0xa8>
 800c0f2:	2500      	movs	r5, #0
 800c0f4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c0f6:	1c62      	adds	r2, r4, #1
 800c0f8:	9219      	str	r2, [sp, #100]	@ 0x64
 800c0fa:	7862      	ldrb	r2, [r4, #1]
 800c0fc:	2a2b      	cmp	r2, #43	@ 0x2b
 800c0fe:	d07a      	beq.n	800c1f6 <_strtod_l+0x27e>
 800c100:	2a2d      	cmp	r2, #45	@ 0x2d
 800c102:	d07e      	beq.n	800c202 <_strtod_l+0x28a>
 800c104:	f04f 0c00 	mov.w	ip, #0
 800c108:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c10c:	2909      	cmp	r1, #9
 800c10e:	f240 8085 	bls.w	800c21c <_strtod_l+0x2a4>
 800c112:	9419      	str	r4, [sp, #100]	@ 0x64
 800c114:	f04f 0800 	mov.w	r8, #0
 800c118:	e0a5      	b.n	800c266 <_strtod_l+0x2ee>
 800c11a:	2300      	movs	r3, #0
 800c11c:	e7c8      	b.n	800c0b0 <_strtod_l+0x138>
 800c11e:	f1b9 0f08 	cmp.w	r9, #8
 800c122:	bfd8      	it	le
 800c124:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800c126:	f100 0001 	add.w	r0, r0, #1
 800c12a:	bfda      	itte	le
 800c12c:	fb02 3301 	mlale	r3, r2, r1, r3
 800c130:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800c132:	fb02 3707 	mlagt	r7, r2, r7, r3
 800c136:	f109 0901 	add.w	r9, r9, #1
 800c13a:	9019      	str	r0, [sp, #100]	@ 0x64
 800c13c:	e7bf      	b.n	800c0be <_strtod_l+0x146>
 800c13e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c140:	1c5a      	adds	r2, r3, #1
 800c142:	9219      	str	r2, [sp, #100]	@ 0x64
 800c144:	785a      	ldrb	r2, [r3, #1]
 800c146:	f1b9 0f00 	cmp.w	r9, #0
 800c14a:	d03b      	beq.n	800c1c4 <_strtod_l+0x24c>
 800c14c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c14e:	464d      	mov	r5, r9
 800c150:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c154:	2b09      	cmp	r3, #9
 800c156:	d912      	bls.n	800c17e <_strtod_l+0x206>
 800c158:	2301      	movs	r3, #1
 800c15a:	e7c2      	b.n	800c0e2 <_strtod_l+0x16a>
 800c15c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c15e:	1c5a      	adds	r2, r3, #1
 800c160:	9219      	str	r2, [sp, #100]	@ 0x64
 800c162:	785a      	ldrb	r2, [r3, #1]
 800c164:	3001      	adds	r0, #1
 800c166:	2a30      	cmp	r2, #48	@ 0x30
 800c168:	d0f8      	beq.n	800c15c <_strtod_l+0x1e4>
 800c16a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c16e:	2b08      	cmp	r3, #8
 800c170:	f200 84d2 	bhi.w	800cb18 <_strtod_l+0xba0>
 800c174:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c176:	900a      	str	r0, [sp, #40]	@ 0x28
 800c178:	2000      	movs	r0, #0
 800c17a:	930c      	str	r3, [sp, #48]	@ 0x30
 800c17c:	4605      	mov	r5, r0
 800c17e:	3a30      	subs	r2, #48	@ 0x30
 800c180:	f100 0301 	add.w	r3, r0, #1
 800c184:	d018      	beq.n	800c1b8 <_strtod_l+0x240>
 800c186:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c188:	4419      	add	r1, r3
 800c18a:	910a      	str	r1, [sp, #40]	@ 0x28
 800c18c:	462e      	mov	r6, r5
 800c18e:	f04f 0e0a 	mov.w	lr, #10
 800c192:	1c71      	adds	r1, r6, #1
 800c194:	eba1 0c05 	sub.w	ip, r1, r5
 800c198:	4563      	cmp	r3, ip
 800c19a:	dc15      	bgt.n	800c1c8 <_strtod_l+0x250>
 800c19c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c1a0:	182b      	adds	r3, r5, r0
 800c1a2:	2b08      	cmp	r3, #8
 800c1a4:	f105 0501 	add.w	r5, r5, #1
 800c1a8:	4405      	add	r5, r0
 800c1aa:	dc1a      	bgt.n	800c1e2 <_strtod_l+0x26a>
 800c1ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c1ae:	230a      	movs	r3, #10
 800c1b0:	fb03 2301 	mla	r3, r3, r1, r2
 800c1b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c1ba:	1c51      	adds	r1, r2, #1
 800c1bc:	9119      	str	r1, [sp, #100]	@ 0x64
 800c1be:	7852      	ldrb	r2, [r2, #1]
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	e7c5      	b.n	800c150 <_strtod_l+0x1d8>
 800c1c4:	4648      	mov	r0, r9
 800c1c6:	e7ce      	b.n	800c166 <_strtod_l+0x1ee>
 800c1c8:	2e08      	cmp	r6, #8
 800c1ca:	dc05      	bgt.n	800c1d8 <_strtod_l+0x260>
 800c1cc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c1ce:	fb0e f606 	mul.w	r6, lr, r6
 800c1d2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800c1d4:	460e      	mov	r6, r1
 800c1d6:	e7dc      	b.n	800c192 <_strtod_l+0x21a>
 800c1d8:	2910      	cmp	r1, #16
 800c1da:	bfd8      	it	le
 800c1dc:	fb0e f707 	mulle.w	r7, lr, r7
 800c1e0:	e7f8      	b.n	800c1d4 <_strtod_l+0x25c>
 800c1e2:	2b0f      	cmp	r3, #15
 800c1e4:	bfdc      	itt	le
 800c1e6:	230a      	movle	r3, #10
 800c1e8:	fb03 2707 	mlale	r7, r3, r7, r2
 800c1ec:	e7e3      	b.n	800c1b6 <_strtod_l+0x23e>
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e77a      	b.n	800c0ec <_strtod_l+0x174>
 800c1f6:	f04f 0c00 	mov.w	ip, #0
 800c1fa:	1ca2      	adds	r2, r4, #2
 800c1fc:	9219      	str	r2, [sp, #100]	@ 0x64
 800c1fe:	78a2      	ldrb	r2, [r4, #2]
 800c200:	e782      	b.n	800c108 <_strtod_l+0x190>
 800c202:	f04f 0c01 	mov.w	ip, #1
 800c206:	e7f8      	b.n	800c1fa <_strtod_l+0x282>
 800c208:	0800f0bc 	.word	0x0800f0bc
 800c20c:	0800eb16 	.word	0x0800eb16
 800c210:	7ff00000 	.word	0x7ff00000
 800c214:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c216:	1c51      	adds	r1, r2, #1
 800c218:	9119      	str	r1, [sp, #100]	@ 0x64
 800c21a:	7852      	ldrb	r2, [r2, #1]
 800c21c:	2a30      	cmp	r2, #48	@ 0x30
 800c21e:	d0f9      	beq.n	800c214 <_strtod_l+0x29c>
 800c220:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c224:	2908      	cmp	r1, #8
 800c226:	f63f af75 	bhi.w	800c114 <_strtod_l+0x19c>
 800c22a:	3a30      	subs	r2, #48	@ 0x30
 800c22c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c22e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c230:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c232:	f04f 080a 	mov.w	r8, #10
 800c236:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c238:	1c56      	adds	r6, r2, #1
 800c23a:	9619      	str	r6, [sp, #100]	@ 0x64
 800c23c:	7852      	ldrb	r2, [r2, #1]
 800c23e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c242:	f1be 0f09 	cmp.w	lr, #9
 800c246:	d939      	bls.n	800c2bc <_strtod_l+0x344>
 800c248:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c24a:	1a76      	subs	r6, r6, r1
 800c24c:	2e08      	cmp	r6, #8
 800c24e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c252:	dc03      	bgt.n	800c25c <_strtod_l+0x2e4>
 800c254:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c256:	4588      	cmp	r8, r1
 800c258:	bfa8      	it	ge
 800c25a:	4688      	movge	r8, r1
 800c25c:	f1bc 0f00 	cmp.w	ip, #0
 800c260:	d001      	beq.n	800c266 <_strtod_l+0x2ee>
 800c262:	f1c8 0800 	rsb	r8, r8, #0
 800c266:	2d00      	cmp	r5, #0
 800c268:	d14e      	bne.n	800c308 <_strtod_l+0x390>
 800c26a:	9908      	ldr	r1, [sp, #32]
 800c26c:	4308      	orrs	r0, r1
 800c26e:	f47f aebc 	bne.w	800bfea <_strtod_l+0x72>
 800c272:	2b00      	cmp	r3, #0
 800c274:	f47f aed4 	bne.w	800c020 <_strtod_l+0xa8>
 800c278:	2a69      	cmp	r2, #105	@ 0x69
 800c27a:	d028      	beq.n	800c2ce <_strtod_l+0x356>
 800c27c:	dc25      	bgt.n	800c2ca <_strtod_l+0x352>
 800c27e:	2a49      	cmp	r2, #73	@ 0x49
 800c280:	d025      	beq.n	800c2ce <_strtod_l+0x356>
 800c282:	2a4e      	cmp	r2, #78	@ 0x4e
 800c284:	f47f aecc 	bne.w	800c020 <_strtod_l+0xa8>
 800c288:	499a      	ldr	r1, [pc, #616]	@ (800c4f4 <_strtod_l+0x57c>)
 800c28a:	a819      	add	r0, sp, #100	@ 0x64
 800c28c:	f001 f93e 	bl	800d50c <__match>
 800c290:	2800      	cmp	r0, #0
 800c292:	f43f aec5 	beq.w	800c020 <_strtod_l+0xa8>
 800c296:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c298:	781b      	ldrb	r3, [r3, #0]
 800c29a:	2b28      	cmp	r3, #40	@ 0x28
 800c29c:	d12e      	bne.n	800c2fc <_strtod_l+0x384>
 800c29e:	4996      	ldr	r1, [pc, #600]	@ (800c4f8 <_strtod_l+0x580>)
 800c2a0:	aa1c      	add	r2, sp, #112	@ 0x70
 800c2a2:	a819      	add	r0, sp, #100	@ 0x64
 800c2a4:	f001 f946 	bl	800d534 <__hexnan>
 800c2a8:	2805      	cmp	r0, #5
 800c2aa:	d127      	bne.n	800c2fc <_strtod_l+0x384>
 800c2ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c2ae:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c2b2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c2b6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c2ba:	e696      	b.n	800bfea <_strtod_l+0x72>
 800c2bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c2be:	fb08 2101 	mla	r1, r8, r1, r2
 800c2c2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c2c6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c2c8:	e7b5      	b.n	800c236 <_strtod_l+0x2be>
 800c2ca:	2a6e      	cmp	r2, #110	@ 0x6e
 800c2cc:	e7da      	b.n	800c284 <_strtod_l+0x30c>
 800c2ce:	498b      	ldr	r1, [pc, #556]	@ (800c4fc <_strtod_l+0x584>)
 800c2d0:	a819      	add	r0, sp, #100	@ 0x64
 800c2d2:	f001 f91b 	bl	800d50c <__match>
 800c2d6:	2800      	cmp	r0, #0
 800c2d8:	f43f aea2 	beq.w	800c020 <_strtod_l+0xa8>
 800c2dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2de:	4988      	ldr	r1, [pc, #544]	@ (800c500 <_strtod_l+0x588>)
 800c2e0:	3b01      	subs	r3, #1
 800c2e2:	a819      	add	r0, sp, #100	@ 0x64
 800c2e4:	9319      	str	r3, [sp, #100]	@ 0x64
 800c2e6:	f001 f911 	bl	800d50c <__match>
 800c2ea:	b910      	cbnz	r0, 800c2f2 <_strtod_l+0x37a>
 800c2ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	9319      	str	r3, [sp, #100]	@ 0x64
 800c2f2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800c510 <_strtod_l+0x598>
 800c2f6:	f04f 0a00 	mov.w	sl, #0
 800c2fa:	e676      	b.n	800bfea <_strtod_l+0x72>
 800c2fc:	4881      	ldr	r0, [pc, #516]	@ (800c504 <_strtod_l+0x58c>)
 800c2fe:	f7fe f8b7 	bl	800a470 <nan>
 800c302:	ec5b ab10 	vmov	sl, fp, d0
 800c306:	e670      	b.n	800bfea <_strtod_l+0x72>
 800c308:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c30a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c30c:	eba8 0303 	sub.w	r3, r8, r3
 800c310:	f1b9 0f00 	cmp.w	r9, #0
 800c314:	bf08      	it	eq
 800c316:	46a9      	moveq	r9, r5
 800c318:	2d10      	cmp	r5, #16
 800c31a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c31c:	462c      	mov	r4, r5
 800c31e:	bfa8      	it	ge
 800c320:	2410      	movge	r4, #16
 800c322:	f7f4 f907 	bl	8000534 <__aeabi_ui2d>
 800c326:	2d09      	cmp	r5, #9
 800c328:	4682      	mov	sl, r0
 800c32a:	468b      	mov	fp, r1
 800c32c:	dc13      	bgt.n	800c356 <_strtod_l+0x3de>
 800c32e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c330:	2b00      	cmp	r3, #0
 800c332:	f43f ae5a 	beq.w	800bfea <_strtod_l+0x72>
 800c336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c338:	dd78      	ble.n	800c42c <_strtod_l+0x4b4>
 800c33a:	2b16      	cmp	r3, #22
 800c33c:	dc5f      	bgt.n	800c3fe <_strtod_l+0x486>
 800c33e:	4972      	ldr	r1, [pc, #456]	@ (800c508 <_strtod_l+0x590>)
 800c340:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c344:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c348:	4652      	mov	r2, sl
 800c34a:	465b      	mov	r3, fp
 800c34c:	f7f4 f96c 	bl	8000628 <__aeabi_dmul>
 800c350:	4682      	mov	sl, r0
 800c352:	468b      	mov	fp, r1
 800c354:	e649      	b.n	800bfea <_strtod_l+0x72>
 800c356:	4b6c      	ldr	r3, [pc, #432]	@ (800c508 <_strtod_l+0x590>)
 800c358:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c35c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c360:	f7f4 f962 	bl	8000628 <__aeabi_dmul>
 800c364:	4682      	mov	sl, r0
 800c366:	4638      	mov	r0, r7
 800c368:	468b      	mov	fp, r1
 800c36a:	f7f4 f8e3 	bl	8000534 <__aeabi_ui2d>
 800c36e:	4602      	mov	r2, r0
 800c370:	460b      	mov	r3, r1
 800c372:	4650      	mov	r0, sl
 800c374:	4659      	mov	r1, fp
 800c376:	f7f3 ffa1 	bl	80002bc <__adddf3>
 800c37a:	2d0f      	cmp	r5, #15
 800c37c:	4682      	mov	sl, r0
 800c37e:	468b      	mov	fp, r1
 800c380:	ddd5      	ble.n	800c32e <_strtod_l+0x3b6>
 800c382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c384:	1b2c      	subs	r4, r5, r4
 800c386:	441c      	add	r4, r3
 800c388:	2c00      	cmp	r4, #0
 800c38a:	f340 8093 	ble.w	800c4b4 <_strtod_l+0x53c>
 800c38e:	f014 030f 	ands.w	r3, r4, #15
 800c392:	d00a      	beq.n	800c3aa <_strtod_l+0x432>
 800c394:	495c      	ldr	r1, [pc, #368]	@ (800c508 <_strtod_l+0x590>)
 800c396:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c39a:	4652      	mov	r2, sl
 800c39c:	465b      	mov	r3, fp
 800c39e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3a2:	f7f4 f941 	bl	8000628 <__aeabi_dmul>
 800c3a6:	4682      	mov	sl, r0
 800c3a8:	468b      	mov	fp, r1
 800c3aa:	f034 040f 	bics.w	r4, r4, #15
 800c3ae:	d073      	beq.n	800c498 <_strtod_l+0x520>
 800c3b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c3b4:	dd49      	ble.n	800c44a <_strtod_l+0x4d2>
 800c3b6:	2400      	movs	r4, #0
 800c3b8:	46a0      	mov	r8, r4
 800c3ba:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c3bc:	46a1      	mov	r9, r4
 800c3be:	9a05      	ldr	r2, [sp, #20]
 800c3c0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800c510 <_strtod_l+0x598>
 800c3c4:	2322      	movs	r3, #34	@ 0x22
 800c3c6:	6013      	str	r3, [r2, #0]
 800c3c8:	f04f 0a00 	mov.w	sl, #0
 800c3cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	f43f ae0b 	beq.w	800bfea <_strtod_l+0x72>
 800c3d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c3d6:	9805      	ldr	r0, [sp, #20]
 800c3d8:	f001 f99a 	bl	800d710 <_Bfree>
 800c3dc:	9805      	ldr	r0, [sp, #20]
 800c3de:	4649      	mov	r1, r9
 800c3e0:	f001 f996 	bl	800d710 <_Bfree>
 800c3e4:	9805      	ldr	r0, [sp, #20]
 800c3e6:	4641      	mov	r1, r8
 800c3e8:	f001 f992 	bl	800d710 <_Bfree>
 800c3ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c3ee:	9805      	ldr	r0, [sp, #20]
 800c3f0:	f001 f98e 	bl	800d710 <_Bfree>
 800c3f4:	9805      	ldr	r0, [sp, #20]
 800c3f6:	4621      	mov	r1, r4
 800c3f8:	f001 f98a 	bl	800d710 <_Bfree>
 800c3fc:	e5f5      	b.n	800bfea <_strtod_l+0x72>
 800c3fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c400:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c404:	4293      	cmp	r3, r2
 800c406:	dbbc      	blt.n	800c382 <_strtod_l+0x40a>
 800c408:	4c3f      	ldr	r4, [pc, #252]	@ (800c508 <_strtod_l+0x590>)
 800c40a:	f1c5 050f 	rsb	r5, r5, #15
 800c40e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c412:	4652      	mov	r2, sl
 800c414:	465b      	mov	r3, fp
 800c416:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c41a:	f7f4 f905 	bl	8000628 <__aeabi_dmul>
 800c41e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c420:	1b5d      	subs	r5, r3, r5
 800c422:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c426:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c42a:	e78f      	b.n	800c34c <_strtod_l+0x3d4>
 800c42c:	3316      	adds	r3, #22
 800c42e:	dba8      	blt.n	800c382 <_strtod_l+0x40a>
 800c430:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c432:	eba3 0808 	sub.w	r8, r3, r8
 800c436:	4b34      	ldr	r3, [pc, #208]	@ (800c508 <_strtod_l+0x590>)
 800c438:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c43c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c440:	4650      	mov	r0, sl
 800c442:	4659      	mov	r1, fp
 800c444:	f7f4 fa1a 	bl	800087c <__aeabi_ddiv>
 800c448:	e782      	b.n	800c350 <_strtod_l+0x3d8>
 800c44a:	2300      	movs	r3, #0
 800c44c:	4f2f      	ldr	r7, [pc, #188]	@ (800c50c <_strtod_l+0x594>)
 800c44e:	1124      	asrs	r4, r4, #4
 800c450:	4650      	mov	r0, sl
 800c452:	4659      	mov	r1, fp
 800c454:	461e      	mov	r6, r3
 800c456:	2c01      	cmp	r4, #1
 800c458:	dc21      	bgt.n	800c49e <_strtod_l+0x526>
 800c45a:	b10b      	cbz	r3, 800c460 <_strtod_l+0x4e8>
 800c45c:	4682      	mov	sl, r0
 800c45e:	468b      	mov	fp, r1
 800c460:	492a      	ldr	r1, [pc, #168]	@ (800c50c <_strtod_l+0x594>)
 800c462:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c466:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c46a:	4652      	mov	r2, sl
 800c46c:	465b      	mov	r3, fp
 800c46e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c472:	f7f4 f8d9 	bl	8000628 <__aeabi_dmul>
 800c476:	4b26      	ldr	r3, [pc, #152]	@ (800c510 <_strtod_l+0x598>)
 800c478:	460a      	mov	r2, r1
 800c47a:	400b      	ands	r3, r1
 800c47c:	4925      	ldr	r1, [pc, #148]	@ (800c514 <_strtod_l+0x59c>)
 800c47e:	428b      	cmp	r3, r1
 800c480:	4682      	mov	sl, r0
 800c482:	d898      	bhi.n	800c3b6 <_strtod_l+0x43e>
 800c484:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c488:	428b      	cmp	r3, r1
 800c48a:	bf86      	itte	hi
 800c48c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800c518 <_strtod_l+0x5a0>
 800c490:	f04f 3aff 	movhi.w	sl, #4294967295
 800c494:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c498:	2300      	movs	r3, #0
 800c49a:	9308      	str	r3, [sp, #32]
 800c49c:	e076      	b.n	800c58c <_strtod_l+0x614>
 800c49e:	07e2      	lsls	r2, r4, #31
 800c4a0:	d504      	bpl.n	800c4ac <_strtod_l+0x534>
 800c4a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4a6:	f7f4 f8bf 	bl	8000628 <__aeabi_dmul>
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	3601      	adds	r6, #1
 800c4ae:	1064      	asrs	r4, r4, #1
 800c4b0:	3708      	adds	r7, #8
 800c4b2:	e7d0      	b.n	800c456 <_strtod_l+0x4de>
 800c4b4:	d0f0      	beq.n	800c498 <_strtod_l+0x520>
 800c4b6:	4264      	negs	r4, r4
 800c4b8:	f014 020f 	ands.w	r2, r4, #15
 800c4bc:	d00a      	beq.n	800c4d4 <_strtod_l+0x55c>
 800c4be:	4b12      	ldr	r3, [pc, #72]	@ (800c508 <_strtod_l+0x590>)
 800c4c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4c4:	4650      	mov	r0, sl
 800c4c6:	4659      	mov	r1, fp
 800c4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4cc:	f7f4 f9d6 	bl	800087c <__aeabi_ddiv>
 800c4d0:	4682      	mov	sl, r0
 800c4d2:	468b      	mov	fp, r1
 800c4d4:	1124      	asrs	r4, r4, #4
 800c4d6:	d0df      	beq.n	800c498 <_strtod_l+0x520>
 800c4d8:	2c1f      	cmp	r4, #31
 800c4da:	dd1f      	ble.n	800c51c <_strtod_l+0x5a4>
 800c4dc:	2400      	movs	r4, #0
 800c4de:	46a0      	mov	r8, r4
 800c4e0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c4e2:	46a1      	mov	r9, r4
 800c4e4:	9a05      	ldr	r2, [sp, #20]
 800c4e6:	2322      	movs	r3, #34	@ 0x22
 800c4e8:	f04f 0a00 	mov.w	sl, #0
 800c4ec:	f04f 0b00 	mov.w	fp, #0
 800c4f0:	6013      	str	r3, [r2, #0]
 800c4f2:	e76b      	b.n	800c3cc <_strtod_l+0x454>
 800c4f4:	0800eb21 	.word	0x0800eb21
 800c4f8:	0800f0a8 	.word	0x0800f0a8
 800c4fc:	0800eb18 	.word	0x0800eb18
 800c500:	0800eb1b 	.word	0x0800eb1b
 800c504:	0800ec6a 	.word	0x0800ec6a
 800c508:	0800f130 	.word	0x0800f130
 800c50c:	0800f108 	.word	0x0800f108
 800c510:	7ff00000 	.word	0x7ff00000
 800c514:	7ca00000 	.word	0x7ca00000
 800c518:	7fefffff 	.word	0x7fefffff
 800c51c:	f014 0310 	ands.w	r3, r4, #16
 800c520:	bf18      	it	ne
 800c522:	236a      	movne	r3, #106	@ 0x6a
 800c524:	4ea9      	ldr	r6, [pc, #676]	@ (800c7cc <_strtod_l+0x854>)
 800c526:	9308      	str	r3, [sp, #32]
 800c528:	4650      	mov	r0, sl
 800c52a:	4659      	mov	r1, fp
 800c52c:	2300      	movs	r3, #0
 800c52e:	07e7      	lsls	r7, r4, #31
 800c530:	d504      	bpl.n	800c53c <_strtod_l+0x5c4>
 800c532:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c536:	f7f4 f877 	bl	8000628 <__aeabi_dmul>
 800c53a:	2301      	movs	r3, #1
 800c53c:	1064      	asrs	r4, r4, #1
 800c53e:	f106 0608 	add.w	r6, r6, #8
 800c542:	d1f4      	bne.n	800c52e <_strtod_l+0x5b6>
 800c544:	b10b      	cbz	r3, 800c54a <_strtod_l+0x5d2>
 800c546:	4682      	mov	sl, r0
 800c548:	468b      	mov	fp, r1
 800c54a:	9b08      	ldr	r3, [sp, #32]
 800c54c:	b1b3      	cbz	r3, 800c57c <_strtod_l+0x604>
 800c54e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c552:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c556:	2b00      	cmp	r3, #0
 800c558:	4659      	mov	r1, fp
 800c55a:	dd0f      	ble.n	800c57c <_strtod_l+0x604>
 800c55c:	2b1f      	cmp	r3, #31
 800c55e:	dd56      	ble.n	800c60e <_strtod_l+0x696>
 800c560:	2b34      	cmp	r3, #52	@ 0x34
 800c562:	bfde      	ittt	le
 800c564:	f04f 33ff 	movle.w	r3, #4294967295
 800c568:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c56c:	4093      	lslle	r3, r2
 800c56e:	f04f 0a00 	mov.w	sl, #0
 800c572:	bfcc      	ite	gt
 800c574:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c578:	ea03 0b01 	andle.w	fp, r3, r1
 800c57c:	2200      	movs	r2, #0
 800c57e:	2300      	movs	r3, #0
 800c580:	4650      	mov	r0, sl
 800c582:	4659      	mov	r1, fp
 800c584:	f7f4 fab8 	bl	8000af8 <__aeabi_dcmpeq>
 800c588:	2800      	cmp	r0, #0
 800c58a:	d1a7      	bne.n	800c4dc <_strtod_l+0x564>
 800c58c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c58e:	9300      	str	r3, [sp, #0]
 800c590:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c592:	9805      	ldr	r0, [sp, #20]
 800c594:	462b      	mov	r3, r5
 800c596:	464a      	mov	r2, r9
 800c598:	f001 f922 	bl	800d7e0 <__s2b>
 800c59c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	f43f af09 	beq.w	800c3b6 <_strtod_l+0x43e>
 800c5a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5a8:	2a00      	cmp	r2, #0
 800c5aa:	eba3 0308 	sub.w	r3, r3, r8
 800c5ae:	bfa8      	it	ge
 800c5b0:	2300      	movge	r3, #0
 800c5b2:	9312      	str	r3, [sp, #72]	@ 0x48
 800c5b4:	2400      	movs	r4, #0
 800c5b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c5ba:	9316      	str	r3, [sp, #88]	@ 0x58
 800c5bc:	46a0      	mov	r8, r4
 800c5be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5c0:	9805      	ldr	r0, [sp, #20]
 800c5c2:	6859      	ldr	r1, [r3, #4]
 800c5c4:	f001 f864 	bl	800d690 <_Balloc>
 800c5c8:	4681      	mov	r9, r0
 800c5ca:	2800      	cmp	r0, #0
 800c5cc:	f43f aef7 	beq.w	800c3be <_strtod_l+0x446>
 800c5d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5d2:	691a      	ldr	r2, [r3, #16]
 800c5d4:	3202      	adds	r2, #2
 800c5d6:	f103 010c 	add.w	r1, r3, #12
 800c5da:	0092      	lsls	r2, r2, #2
 800c5dc:	300c      	adds	r0, #12
 800c5de:	f000 fcb2 	bl	800cf46 <memcpy>
 800c5e2:	ec4b ab10 	vmov	d0, sl, fp
 800c5e6:	9805      	ldr	r0, [sp, #20]
 800c5e8:	aa1c      	add	r2, sp, #112	@ 0x70
 800c5ea:	a91b      	add	r1, sp, #108	@ 0x6c
 800c5ec:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c5f0:	f001 fc2a 	bl	800de48 <__d2b>
 800c5f4:	901a      	str	r0, [sp, #104]	@ 0x68
 800c5f6:	2800      	cmp	r0, #0
 800c5f8:	f43f aee1 	beq.w	800c3be <_strtod_l+0x446>
 800c5fc:	9805      	ldr	r0, [sp, #20]
 800c5fe:	2101      	movs	r1, #1
 800c600:	f001 f984 	bl	800d90c <__i2b>
 800c604:	4680      	mov	r8, r0
 800c606:	b948      	cbnz	r0, 800c61c <_strtod_l+0x6a4>
 800c608:	f04f 0800 	mov.w	r8, #0
 800c60c:	e6d7      	b.n	800c3be <_strtod_l+0x446>
 800c60e:	f04f 32ff 	mov.w	r2, #4294967295
 800c612:	fa02 f303 	lsl.w	r3, r2, r3
 800c616:	ea03 0a0a 	and.w	sl, r3, sl
 800c61a:	e7af      	b.n	800c57c <_strtod_l+0x604>
 800c61c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c61e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c620:	2d00      	cmp	r5, #0
 800c622:	bfab      	itete	ge
 800c624:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c626:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c628:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c62a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c62c:	bfac      	ite	ge
 800c62e:	18ef      	addge	r7, r5, r3
 800c630:	1b5e      	sublt	r6, r3, r5
 800c632:	9b08      	ldr	r3, [sp, #32]
 800c634:	1aed      	subs	r5, r5, r3
 800c636:	4415      	add	r5, r2
 800c638:	4b65      	ldr	r3, [pc, #404]	@ (800c7d0 <_strtod_l+0x858>)
 800c63a:	3d01      	subs	r5, #1
 800c63c:	429d      	cmp	r5, r3
 800c63e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c642:	da50      	bge.n	800c6e6 <_strtod_l+0x76e>
 800c644:	1b5b      	subs	r3, r3, r5
 800c646:	2b1f      	cmp	r3, #31
 800c648:	eba2 0203 	sub.w	r2, r2, r3
 800c64c:	f04f 0101 	mov.w	r1, #1
 800c650:	dc3d      	bgt.n	800c6ce <_strtod_l+0x756>
 800c652:	fa01 f303 	lsl.w	r3, r1, r3
 800c656:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c658:	2300      	movs	r3, #0
 800c65a:	9310      	str	r3, [sp, #64]	@ 0x40
 800c65c:	18bd      	adds	r5, r7, r2
 800c65e:	9b08      	ldr	r3, [sp, #32]
 800c660:	42af      	cmp	r7, r5
 800c662:	4416      	add	r6, r2
 800c664:	441e      	add	r6, r3
 800c666:	463b      	mov	r3, r7
 800c668:	bfa8      	it	ge
 800c66a:	462b      	movge	r3, r5
 800c66c:	42b3      	cmp	r3, r6
 800c66e:	bfa8      	it	ge
 800c670:	4633      	movge	r3, r6
 800c672:	2b00      	cmp	r3, #0
 800c674:	bfc2      	ittt	gt
 800c676:	1aed      	subgt	r5, r5, r3
 800c678:	1af6      	subgt	r6, r6, r3
 800c67a:	1aff      	subgt	r7, r7, r3
 800c67c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c67e:	2b00      	cmp	r3, #0
 800c680:	dd16      	ble.n	800c6b0 <_strtod_l+0x738>
 800c682:	4641      	mov	r1, r8
 800c684:	9805      	ldr	r0, [sp, #20]
 800c686:	461a      	mov	r2, r3
 800c688:	f001 f9f8 	bl	800da7c <__pow5mult>
 800c68c:	4680      	mov	r8, r0
 800c68e:	2800      	cmp	r0, #0
 800c690:	d0ba      	beq.n	800c608 <_strtod_l+0x690>
 800c692:	4601      	mov	r1, r0
 800c694:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c696:	9805      	ldr	r0, [sp, #20]
 800c698:	f001 f94e 	bl	800d938 <__multiply>
 800c69c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	f43f ae8d 	beq.w	800c3be <_strtod_l+0x446>
 800c6a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c6a6:	9805      	ldr	r0, [sp, #20]
 800c6a8:	f001 f832 	bl	800d710 <_Bfree>
 800c6ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6ae:	931a      	str	r3, [sp, #104]	@ 0x68
 800c6b0:	2d00      	cmp	r5, #0
 800c6b2:	dc1d      	bgt.n	800c6f0 <_strtod_l+0x778>
 800c6b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	dd23      	ble.n	800c702 <_strtod_l+0x78a>
 800c6ba:	4649      	mov	r1, r9
 800c6bc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c6be:	9805      	ldr	r0, [sp, #20]
 800c6c0:	f001 f9dc 	bl	800da7c <__pow5mult>
 800c6c4:	4681      	mov	r9, r0
 800c6c6:	b9e0      	cbnz	r0, 800c702 <_strtod_l+0x78a>
 800c6c8:	f04f 0900 	mov.w	r9, #0
 800c6cc:	e677      	b.n	800c3be <_strtod_l+0x446>
 800c6ce:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c6d2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c6d6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c6da:	35e2      	adds	r5, #226	@ 0xe2
 800c6dc:	fa01 f305 	lsl.w	r3, r1, r5
 800c6e0:	9310      	str	r3, [sp, #64]	@ 0x40
 800c6e2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c6e4:	e7ba      	b.n	800c65c <_strtod_l+0x6e4>
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	9310      	str	r3, [sp, #64]	@ 0x40
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c6ee:	e7b5      	b.n	800c65c <_strtod_l+0x6e4>
 800c6f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c6f2:	9805      	ldr	r0, [sp, #20]
 800c6f4:	462a      	mov	r2, r5
 800c6f6:	f001 fa1b 	bl	800db30 <__lshift>
 800c6fa:	901a      	str	r0, [sp, #104]	@ 0x68
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	d1d9      	bne.n	800c6b4 <_strtod_l+0x73c>
 800c700:	e65d      	b.n	800c3be <_strtod_l+0x446>
 800c702:	2e00      	cmp	r6, #0
 800c704:	dd07      	ble.n	800c716 <_strtod_l+0x79e>
 800c706:	4649      	mov	r1, r9
 800c708:	9805      	ldr	r0, [sp, #20]
 800c70a:	4632      	mov	r2, r6
 800c70c:	f001 fa10 	bl	800db30 <__lshift>
 800c710:	4681      	mov	r9, r0
 800c712:	2800      	cmp	r0, #0
 800c714:	d0d8      	beq.n	800c6c8 <_strtod_l+0x750>
 800c716:	2f00      	cmp	r7, #0
 800c718:	dd08      	ble.n	800c72c <_strtod_l+0x7b4>
 800c71a:	4641      	mov	r1, r8
 800c71c:	9805      	ldr	r0, [sp, #20]
 800c71e:	463a      	mov	r2, r7
 800c720:	f001 fa06 	bl	800db30 <__lshift>
 800c724:	4680      	mov	r8, r0
 800c726:	2800      	cmp	r0, #0
 800c728:	f43f ae49 	beq.w	800c3be <_strtod_l+0x446>
 800c72c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c72e:	9805      	ldr	r0, [sp, #20]
 800c730:	464a      	mov	r2, r9
 800c732:	f001 fa85 	bl	800dc40 <__mdiff>
 800c736:	4604      	mov	r4, r0
 800c738:	2800      	cmp	r0, #0
 800c73a:	f43f ae40 	beq.w	800c3be <_strtod_l+0x446>
 800c73e:	68c3      	ldr	r3, [r0, #12]
 800c740:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c742:	2300      	movs	r3, #0
 800c744:	60c3      	str	r3, [r0, #12]
 800c746:	4641      	mov	r1, r8
 800c748:	f001 fa5e 	bl	800dc08 <__mcmp>
 800c74c:	2800      	cmp	r0, #0
 800c74e:	da45      	bge.n	800c7dc <_strtod_l+0x864>
 800c750:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c752:	ea53 030a 	orrs.w	r3, r3, sl
 800c756:	d16b      	bne.n	800c830 <_strtod_l+0x8b8>
 800c758:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d167      	bne.n	800c830 <_strtod_l+0x8b8>
 800c760:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c764:	0d1b      	lsrs	r3, r3, #20
 800c766:	051b      	lsls	r3, r3, #20
 800c768:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c76c:	d960      	bls.n	800c830 <_strtod_l+0x8b8>
 800c76e:	6963      	ldr	r3, [r4, #20]
 800c770:	b913      	cbnz	r3, 800c778 <_strtod_l+0x800>
 800c772:	6923      	ldr	r3, [r4, #16]
 800c774:	2b01      	cmp	r3, #1
 800c776:	dd5b      	ble.n	800c830 <_strtod_l+0x8b8>
 800c778:	4621      	mov	r1, r4
 800c77a:	2201      	movs	r2, #1
 800c77c:	9805      	ldr	r0, [sp, #20]
 800c77e:	f001 f9d7 	bl	800db30 <__lshift>
 800c782:	4641      	mov	r1, r8
 800c784:	4604      	mov	r4, r0
 800c786:	f001 fa3f 	bl	800dc08 <__mcmp>
 800c78a:	2800      	cmp	r0, #0
 800c78c:	dd50      	ble.n	800c830 <_strtod_l+0x8b8>
 800c78e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c792:	9a08      	ldr	r2, [sp, #32]
 800c794:	0d1b      	lsrs	r3, r3, #20
 800c796:	051b      	lsls	r3, r3, #20
 800c798:	2a00      	cmp	r2, #0
 800c79a:	d06a      	beq.n	800c872 <_strtod_l+0x8fa>
 800c79c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c7a0:	d867      	bhi.n	800c872 <_strtod_l+0x8fa>
 800c7a2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c7a6:	f67f ae9d 	bls.w	800c4e4 <_strtod_l+0x56c>
 800c7aa:	4b0a      	ldr	r3, [pc, #40]	@ (800c7d4 <_strtod_l+0x85c>)
 800c7ac:	4650      	mov	r0, sl
 800c7ae:	4659      	mov	r1, fp
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f7f3 ff39 	bl	8000628 <__aeabi_dmul>
 800c7b6:	4b08      	ldr	r3, [pc, #32]	@ (800c7d8 <_strtod_l+0x860>)
 800c7b8:	400b      	ands	r3, r1
 800c7ba:	4682      	mov	sl, r0
 800c7bc:	468b      	mov	fp, r1
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	f47f ae08 	bne.w	800c3d4 <_strtod_l+0x45c>
 800c7c4:	9a05      	ldr	r2, [sp, #20]
 800c7c6:	2322      	movs	r3, #34	@ 0x22
 800c7c8:	6013      	str	r3, [r2, #0]
 800c7ca:	e603      	b.n	800c3d4 <_strtod_l+0x45c>
 800c7cc:	0800f0d0 	.word	0x0800f0d0
 800c7d0:	fffffc02 	.word	0xfffffc02
 800c7d4:	39500000 	.word	0x39500000
 800c7d8:	7ff00000 	.word	0x7ff00000
 800c7dc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c7e0:	d165      	bne.n	800c8ae <_strtod_l+0x936>
 800c7e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c7e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c7e8:	b35a      	cbz	r2, 800c842 <_strtod_l+0x8ca>
 800c7ea:	4a9f      	ldr	r2, [pc, #636]	@ (800ca68 <_strtod_l+0xaf0>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d12b      	bne.n	800c848 <_strtod_l+0x8d0>
 800c7f0:	9b08      	ldr	r3, [sp, #32]
 800c7f2:	4651      	mov	r1, sl
 800c7f4:	b303      	cbz	r3, 800c838 <_strtod_l+0x8c0>
 800c7f6:	4b9d      	ldr	r3, [pc, #628]	@ (800ca6c <_strtod_l+0xaf4>)
 800c7f8:	465a      	mov	r2, fp
 800c7fa:	4013      	ands	r3, r2
 800c7fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c800:	f04f 32ff 	mov.w	r2, #4294967295
 800c804:	d81b      	bhi.n	800c83e <_strtod_l+0x8c6>
 800c806:	0d1b      	lsrs	r3, r3, #20
 800c808:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c80c:	fa02 f303 	lsl.w	r3, r2, r3
 800c810:	4299      	cmp	r1, r3
 800c812:	d119      	bne.n	800c848 <_strtod_l+0x8d0>
 800c814:	4b96      	ldr	r3, [pc, #600]	@ (800ca70 <_strtod_l+0xaf8>)
 800c816:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c818:	429a      	cmp	r2, r3
 800c81a:	d102      	bne.n	800c822 <_strtod_l+0x8aa>
 800c81c:	3101      	adds	r1, #1
 800c81e:	f43f adce 	beq.w	800c3be <_strtod_l+0x446>
 800c822:	4b92      	ldr	r3, [pc, #584]	@ (800ca6c <_strtod_l+0xaf4>)
 800c824:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c826:	401a      	ands	r2, r3
 800c828:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c82c:	f04f 0a00 	mov.w	sl, #0
 800c830:	9b08      	ldr	r3, [sp, #32]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d1b9      	bne.n	800c7aa <_strtod_l+0x832>
 800c836:	e5cd      	b.n	800c3d4 <_strtod_l+0x45c>
 800c838:	f04f 33ff 	mov.w	r3, #4294967295
 800c83c:	e7e8      	b.n	800c810 <_strtod_l+0x898>
 800c83e:	4613      	mov	r3, r2
 800c840:	e7e6      	b.n	800c810 <_strtod_l+0x898>
 800c842:	ea53 030a 	orrs.w	r3, r3, sl
 800c846:	d0a2      	beq.n	800c78e <_strtod_l+0x816>
 800c848:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c84a:	b1db      	cbz	r3, 800c884 <_strtod_l+0x90c>
 800c84c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c84e:	4213      	tst	r3, r2
 800c850:	d0ee      	beq.n	800c830 <_strtod_l+0x8b8>
 800c852:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c854:	9a08      	ldr	r2, [sp, #32]
 800c856:	4650      	mov	r0, sl
 800c858:	4659      	mov	r1, fp
 800c85a:	b1bb      	cbz	r3, 800c88c <_strtod_l+0x914>
 800c85c:	f7ff fb6c 	bl	800bf38 <sulp>
 800c860:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c864:	ec53 2b10 	vmov	r2, r3, d0
 800c868:	f7f3 fd28 	bl	80002bc <__adddf3>
 800c86c:	4682      	mov	sl, r0
 800c86e:	468b      	mov	fp, r1
 800c870:	e7de      	b.n	800c830 <_strtod_l+0x8b8>
 800c872:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c876:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c87a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c87e:	f04f 3aff 	mov.w	sl, #4294967295
 800c882:	e7d5      	b.n	800c830 <_strtod_l+0x8b8>
 800c884:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c886:	ea13 0f0a 	tst.w	r3, sl
 800c88a:	e7e1      	b.n	800c850 <_strtod_l+0x8d8>
 800c88c:	f7ff fb54 	bl	800bf38 <sulp>
 800c890:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c894:	ec53 2b10 	vmov	r2, r3, d0
 800c898:	f7f3 fd0e 	bl	80002b8 <__aeabi_dsub>
 800c89c:	2200      	movs	r2, #0
 800c89e:	2300      	movs	r3, #0
 800c8a0:	4682      	mov	sl, r0
 800c8a2:	468b      	mov	fp, r1
 800c8a4:	f7f4 f928 	bl	8000af8 <__aeabi_dcmpeq>
 800c8a8:	2800      	cmp	r0, #0
 800c8aa:	d0c1      	beq.n	800c830 <_strtod_l+0x8b8>
 800c8ac:	e61a      	b.n	800c4e4 <_strtod_l+0x56c>
 800c8ae:	4641      	mov	r1, r8
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	f001 fb21 	bl	800def8 <__ratio>
 800c8b6:	ec57 6b10 	vmov	r6, r7, d0
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c8c0:	4630      	mov	r0, r6
 800c8c2:	4639      	mov	r1, r7
 800c8c4:	f7f4 f92c 	bl	8000b20 <__aeabi_dcmple>
 800c8c8:	2800      	cmp	r0, #0
 800c8ca:	d06f      	beq.n	800c9ac <_strtod_l+0xa34>
 800c8cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d17a      	bne.n	800c9c8 <_strtod_l+0xa50>
 800c8d2:	f1ba 0f00 	cmp.w	sl, #0
 800c8d6:	d158      	bne.n	800c98a <_strtod_l+0xa12>
 800c8d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d15a      	bne.n	800c998 <_strtod_l+0xa20>
 800c8e2:	4b64      	ldr	r3, [pc, #400]	@ (800ca74 <_strtod_l+0xafc>)
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	4639      	mov	r1, r7
 800c8ea:	f7f4 f90f 	bl	8000b0c <__aeabi_dcmplt>
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	d159      	bne.n	800c9a6 <_strtod_l+0xa2e>
 800c8f2:	4630      	mov	r0, r6
 800c8f4:	4639      	mov	r1, r7
 800c8f6:	4b60      	ldr	r3, [pc, #384]	@ (800ca78 <_strtod_l+0xb00>)
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	f7f3 fe95 	bl	8000628 <__aeabi_dmul>
 800c8fe:	4606      	mov	r6, r0
 800c900:	460f      	mov	r7, r1
 800c902:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c906:	9606      	str	r6, [sp, #24]
 800c908:	9307      	str	r3, [sp, #28]
 800c90a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c90e:	4d57      	ldr	r5, [pc, #348]	@ (800ca6c <_strtod_l+0xaf4>)
 800c910:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c916:	401d      	ands	r5, r3
 800c918:	4b58      	ldr	r3, [pc, #352]	@ (800ca7c <_strtod_l+0xb04>)
 800c91a:	429d      	cmp	r5, r3
 800c91c:	f040 80b2 	bne.w	800ca84 <_strtod_l+0xb0c>
 800c920:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c922:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c926:	ec4b ab10 	vmov	d0, sl, fp
 800c92a:	f001 fa1d 	bl	800dd68 <__ulp>
 800c92e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c932:	ec51 0b10 	vmov	r0, r1, d0
 800c936:	f7f3 fe77 	bl	8000628 <__aeabi_dmul>
 800c93a:	4652      	mov	r2, sl
 800c93c:	465b      	mov	r3, fp
 800c93e:	f7f3 fcbd 	bl	80002bc <__adddf3>
 800c942:	460b      	mov	r3, r1
 800c944:	4949      	ldr	r1, [pc, #292]	@ (800ca6c <_strtod_l+0xaf4>)
 800c946:	4a4e      	ldr	r2, [pc, #312]	@ (800ca80 <_strtod_l+0xb08>)
 800c948:	4019      	ands	r1, r3
 800c94a:	4291      	cmp	r1, r2
 800c94c:	4682      	mov	sl, r0
 800c94e:	d942      	bls.n	800c9d6 <_strtod_l+0xa5e>
 800c950:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c952:	4b47      	ldr	r3, [pc, #284]	@ (800ca70 <_strtod_l+0xaf8>)
 800c954:	429a      	cmp	r2, r3
 800c956:	d103      	bne.n	800c960 <_strtod_l+0x9e8>
 800c958:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c95a:	3301      	adds	r3, #1
 800c95c:	f43f ad2f 	beq.w	800c3be <_strtod_l+0x446>
 800c960:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ca70 <_strtod_l+0xaf8>
 800c964:	f04f 3aff 	mov.w	sl, #4294967295
 800c968:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c96a:	9805      	ldr	r0, [sp, #20]
 800c96c:	f000 fed0 	bl	800d710 <_Bfree>
 800c970:	9805      	ldr	r0, [sp, #20]
 800c972:	4649      	mov	r1, r9
 800c974:	f000 fecc 	bl	800d710 <_Bfree>
 800c978:	9805      	ldr	r0, [sp, #20]
 800c97a:	4641      	mov	r1, r8
 800c97c:	f000 fec8 	bl	800d710 <_Bfree>
 800c980:	9805      	ldr	r0, [sp, #20]
 800c982:	4621      	mov	r1, r4
 800c984:	f000 fec4 	bl	800d710 <_Bfree>
 800c988:	e619      	b.n	800c5be <_strtod_l+0x646>
 800c98a:	f1ba 0f01 	cmp.w	sl, #1
 800c98e:	d103      	bne.n	800c998 <_strtod_l+0xa20>
 800c990:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c992:	2b00      	cmp	r3, #0
 800c994:	f43f ada6 	beq.w	800c4e4 <_strtod_l+0x56c>
 800c998:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ca48 <_strtod_l+0xad0>
 800c99c:	4f35      	ldr	r7, [pc, #212]	@ (800ca74 <_strtod_l+0xafc>)
 800c99e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c9a2:	2600      	movs	r6, #0
 800c9a4:	e7b1      	b.n	800c90a <_strtod_l+0x992>
 800c9a6:	4f34      	ldr	r7, [pc, #208]	@ (800ca78 <_strtod_l+0xb00>)
 800c9a8:	2600      	movs	r6, #0
 800c9aa:	e7aa      	b.n	800c902 <_strtod_l+0x98a>
 800c9ac:	4b32      	ldr	r3, [pc, #200]	@ (800ca78 <_strtod_l+0xb00>)
 800c9ae:	4630      	mov	r0, r6
 800c9b0:	4639      	mov	r1, r7
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	f7f3 fe38 	bl	8000628 <__aeabi_dmul>
 800c9b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9ba:	4606      	mov	r6, r0
 800c9bc:	460f      	mov	r7, r1
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d09f      	beq.n	800c902 <_strtod_l+0x98a>
 800c9c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c9c6:	e7a0      	b.n	800c90a <_strtod_l+0x992>
 800c9c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ca50 <_strtod_l+0xad8>
 800c9cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c9d0:	ec57 6b17 	vmov	r6, r7, d7
 800c9d4:	e799      	b.n	800c90a <_strtod_l+0x992>
 800c9d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c9da:	9b08      	ldr	r3, [sp, #32]
 800c9dc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d1c1      	bne.n	800c968 <_strtod_l+0x9f0>
 800c9e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c9e8:	0d1b      	lsrs	r3, r3, #20
 800c9ea:	051b      	lsls	r3, r3, #20
 800c9ec:	429d      	cmp	r5, r3
 800c9ee:	d1bb      	bne.n	800c968 <_strtod_l+0x9f0>
 800c9f0:	4630      	mov	r0, r6
 800c9f2:	4639      	mov	r1, r7
 800c9f4:	f7f4 f950 	bl	8000c98 <__aeabi_d2lz>
 800c9f8:	f7f3 fde8 	bl	80005cc <__aeabi_l2d>
 800c9fc:	4602      	mov	r2, r0
 800c9fe:	460b      	mov	r3, r1
 800ca00:	4630      	mov	r0, r6
 800ca02:	4639      	mov	r1, r7
 800ca04:	f7f3 fc58 	bl	80002b8 <__aeabi_dsub>
 800ca08:	460b      	mov	r3, r1
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ca10:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ca14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca16:	ea46 060a 	orr.w	r6, r6, sl
 800ca1a:	431e      	orrs	r6, r3
 800ca1c:	d06f      	beq.n	800cafe <_strtod_l+0xb86>
 800ca1e:	a30e      	add	r3, pc, #56	@ (adr r3, 800ca58 <_strtod_l+0xae0>)
 800ca20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca24:	f7f4 f872 	bl	8000b0c <__aeabi_dcmplt>
 800ca28:	2800      	cmp	r0, #0
 800ca2a:	f47f acd3 	bne.w	800c3d4 <_strtod_l+0x45c>
 800ca2e:	a30c      	add	r3, pc, #48	@ (adr r3, 800ca60 <_strtod_l+0xae8>)
 800ca30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca38:	f7f4 f886 	bl	8000b48 <__aeabi_dcmpgt>
 800ca3c:	2800      	cmp	r0, #0
 800ca3e:	d093      	beq.n	800c968 <_strtod_l+0x9f0>
 800ca40:	e4c8      	b.n	800c3d4 <_strtod_l+0x45c>
 800ca42:	bf00      	nop
 800ca44:	f3af 8000 	nop.w
 800ca48:	00000000 	.word	0x00000000
 800ca4c:	bff00000 	.word	0xbff00000
 800ca50:	00000000 	.word	0x00000000
 800ca54:	3ff00000 	.word	0x3ff00000
 800ca58:	94a03595 	.word	0x94a03595
 800ca5c:	3fdfffff 	.word	0x3fdfffff
 800ca60:	35afe535 	.word	0x35afe535
 800ca64:	3fe00000 	.word	0x3fe00000
 800ca68:	000fffff 	.word	0x000fffff
 800ca6c:	7ff00000 	.word	0x7ff00000
 800ca70:	7fefffff 	.word	0x7fefffff
 800ca74:	3ff00000 	.word	0x3ff00000
 800ca78:	3fe00000 	.word	0x3fe00000
 800ca7c:	7fe00000 	.word	0x7fe00000
 800ca80:	7c9fffff 	.word	0x7c9fffff
 800ca84:	9b08      	ldr	r3, [sp, #32]
 800ca86:	b323      	cbz	r3, 800cad2 <_strtod_l+0xb5a>
 800ca88:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ca8c:	d821      	bhi.n	800cad2 <_strtod_l+0xb5a>
 800ca8e:	a328      	add	r3, pc, #160	@ (adr r3, 800cb30 <_strtod_l+0xbb8>)
 800ca90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca94:	4630      	mov	r0, r6
 800ca96:	4639      	mov	r1, r7
 800ca98:	f7f4 f842 	bl	8000b20 <__aeabi_dcmple>
 800ca9c:	b1a0      	cbz	r0, 800cac8 <_strtod_l+0xb50>
 800ca9e:	4639      	mov	r1, r7
 800caa0:	4630      	mov	r0, r6
 800caa2:	f7f4 f871 	bl	8000b88 <__aeabi_d2uiz>
 800caa6:	2801      	cmp	r0, #1
 800caa8:	bf38      	it	cc
 800caaa:	2001      	movcc	r0, #1
 800caac:	f7f3 fd42 	bl	8000534 <__aeabi_ui2d>
 800cab0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cab2:	4606      	mov	r6, r0
 800cab4:	460f      	mov	r7, r1
 800cab6:	b9fb      	cbnz	r3, 800caf8 <_strtod_l+0xb80>
 800cab8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cabc:	9014      	str	r0, [sp, #80]	@ 0x50
 800cabe:	9315      	str	r3, [sp, #84]	@ 0x54
 800cac0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cac4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cac8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800caca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cace:	1b5b      	subs	r3, r3, r5
 800cad0:	9311      	str	r3, [sp, #68]	@ 0x44
 800cad2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cad6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cada:	f001 f945 	bl	800dd68 <__ulp>
 800cade:	4650      	mov	r0, sl
 800cae0:	ec53 2b10 	vmov	r2, r3, d0
 800cae4:	4659      	mov	r1, fp
 800cae6:	f7f3 fd9f 	bl	8000628 <__aeabi_dmul>
 800caea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800caee:	f7f3 fbe5 	bl	80002bc <__adddf3>
 800caf2:	4682      	mov	sl, r0
 800caf4:	468b      	mov	fp, r1
 800caf6:	e770      	b.n	800c9da <_strtod_l+0xa62>
 800caf8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cafc:	e7e0      	b.n	800cac0 <_strtod_l+0xb48>
 800cafe:	a30e      	add	r3, pc, #56	@ (adr r3, 800cb38 <_strtod_l+0xbc0>)
 800cb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb04:	f7f4 f802 	bl	8000b0c <__aeabi_dcmplt>
 800cb08:	e798      	b.n	800ca3c <_strtod_l+0xac4>
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	930e      	str	r3, [sp, #56]	@ 0x38
 800cb0e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cb10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb12:	6013      	str	r3, [r2, #0]
 800cb14:	f7ff ba6d 	b.w	800bff2 <_strtod_l+0x7a>
 800cb18:	2a65      	cmp	r2, #101	@ 0x65
 800cb1a:	f43f ab68 	beq.w	800c1ee <_strtod_l+0x276>
 800cb1e:	2a45      	cmp	r2, #69	@ 0x45
 800cb20:	f43f ab65 	beq.w	800c1ee <_strtod_l+0x276>
 800cb24:	2301      	movs	r3, #1
 800cb26:	f7ff bba0 	b.w	800c26a <_strtod_l+0x2f2>
 800cb2a:	bf00      	nop
 800cb2c:	f3af 8000 	nop.w
 800cb30:	ffc00000 	.word	0xffc00000
 800cb34:	41dfffff 	.word	0x41dfffff
 800cb38:	94a03595 	.word	0x94a03595
 800cb3c:	3fcfffff 	.word	0x3fcfffff

0800cb40 <strtod>:
 800cb40:	460a      	mov	r2, r1
 800cb42:	4601      	mov	r1, r0
 800cb44:	4802      	ldr	r0, [pc, #8]	@ (800cb50 <strtod+0x10>)
 800cb46:	4b03      	ldr	r3, [pc, #12]	@ (800cb54 <strtod+0x14>)
 800cb48:	6800      	ldr	r0, [r0, #0]
 800cb4a:	f7ff ba15 	b.w	800bf78 <_strtod_l>
 800cb4e:	bf00      	nop
 800cb50:	20000184 	.word	0x20000184
 800cb54:	20000018 	.word	0x20000018

0800cb58 <std>:
 800cb58:	2300      	movs	r3, #0
 800cb5a:	b510      	push	{r4, lr}
 800cb5c:	4604      	mov	r4, r0
 800cb5e:	e9c0 3300 	strd	r3, r3, [r0]
 800cb62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb66:	6083      	str	r3, [r0, #8]
 800cb68:	8181      	strh	r1, [r0, #12]
 800cb6a:	6643      	str	r3, [r0, #100]	@ 0x64
 800cb6c:	81c2      	strh	r2, [r0, #14]
 800cb6e:	6183      	str	r3, [r0, #24]
 800cb70:	4619      	mov	r1, r3
 800cb72:	2208      	movs	r2, #8
 800cb74:	305c      	adds	r0, #92	@ 0x5c
 800cb76:	f000 f904 	bl	800cd82 <memset>
 800cb7a:	4b0d      	ldr	r3, [pc, #52]	@ (800cbb0 <std+0x58>)
 800cb7c:	6263      	str	r3, [r4, #36]	@ 0x24
 800cb7e:	4b0d      	ldr	r3, [pc, #52]	@ (800cbb4 <std+0x5c>)
 800cb80:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cb82:	4b0d      	ldr	r3, [pc, #52]	@ (800cbb8 <std+0x60>)
 800cb84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cb86:	4b0d      	ldr	r3, [pc, #52]	@ (800cbbc <std+0x64>)
 800cb88:	6323      	str	r3, [r4, #48]	@ 0x30
 800cb8a:	4b0d      	ldr	r3, [pc, #52]	@ (800cbc0 <std+0x68>)
 800cb8c:	6224      	str	r4, [r4, #32]
 800cb8e:	429c      	cmp	r4, r3
 800cb90:	d006      	beq.n	800cba0 <std+0x48>
 800cb92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cb96:	4294      	cmp	r4, r2
 800cb98:	d002      	beq.n	800cba0 <std+0x48>
 800cb9a:	33d0      	adds	r3, #208	@ 0xd0
 800cb9c:	429c      	cmp	r4, r3
 800cb9e:	d105      	bne.n	800cbac <std+0x54>
 800cba0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cba8:	f000 b9ca 	b.w	800cf40 <__retarget_lock_init_recursive>
 800cbac:	bd10      	pop	{r4, pc}
 800cbae:	bf00      	nop
 800cbb0:	0800ccdd 	.word	0x0800ccdd
 800cbb4:	0800ccff 	.word	0x0800ccff
 800cbb8:	0800cd37 	.word	0x0800cd37
 800cbbc:	0800cd5b 	.word	0x0800cd5b
 800cbc0:	20001b34 	.word	0x20001b34

0800cbc4 <stdio_exit_handler>:
 800cbc4:	4a02      	ldr	r2, [pc, #8]	@ (800cbd0 <stdio_exit_handler+0xc>)
 800cbc6:	4903      	ldr	r1, [pc, #12]	@ (800cbd4 <stdio_exit_handler+0x10>)
 800cbc8:	4803      	ldr	r0, [pc, #12]	@ (800cbd8 <stdio_exit_handler+0x14>)
 800cbca:	f000 b869 	b.w	800cca0 <_fwalk_sglue>
 800cbce:	bf00      	nop
 800cbd0:	2000000c 	.word	0x2000000c
 800cbd4:	0800e41d 	.word	0x0800e41d
 800cbd8:	20000188 	.word	0x20000188

0800cbdc <cleanup_stdio>:
 800cbdc:	6841      	ldr	r1, [r0, #4]
 800cbde:	4b0c      	ldr	r3, [pc, #48]	@ (800cc10 <cleanup_stdio+0x34>)
 800cbe0:	4299      	cmp	r1, r3
 800cbe2:	b510      	push	{r4, lr}
 800cbe4:	4604      	mov	r4, r0
 800cbe6:	d001      	beq.n	800cbec <cleanup_stdio+0x10>
 800cbe8:	f001 fc18 	bl	800e41c <_fflush_r>
 800cbec:	68a1      	ldr	r1, [r4, #8]
 800cbee:	4b09      	ldr	r3, [pc, #36]	@ (800cc14 <cleanup_stdio+0x38>)
 800cbf0:	4299      	cmp	r1, r3
 800cbf2:	d002      	beq.n	800cbfa <cleanup_stdio+0x1e>
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	f001 fc11 	bl	800e41c <_fflush_r>
 800cbfa:	68e1      	ldr	r1, [r4, #12]
 800cbfc:	4b06      	ldr	r3, [pc, #24]	@ (800cc18 <cleanup_stdio+0x3c>)
 800cbfe:	4299      	cmp	r1, r3
 800cc00:	d004      	beq.n	800cc0c <cleanup_stdio+0x30>
 800cc02:	4620      	mov	r0, r4
 800cc04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc08:	f001 bc08 	b.w	800e41c <_fflush_r>
 800cc0c:	bd10      	pop	{r4, pc}
 800cc0e:	bf00      	nop
 800cc10:	20001b34 	.word	0x20001b34
 800cc14:	20001b9c 	.word	0x20001b9c
 800cc18:	20001c04 	.word	0x20001c04

0800cc1c <global_stdio_init.part.0>:
 800cc1c:	b510      	push	{r4, lr}
 800cc1e:	4b0b      	ldr	r3, [pc, #44]	@ (800cc4c <global_stdio_init.part.0+0x30>)
 800cc20:	4c0b      	ldr	r4, [pc, #44]	@ (800cc50 <global_stdio_init.part.0+0x34>)
 800cc22:	4a0c      	ldr	r2, [pc, #48]	@ (800cc54 <global_stdio_init.part.0+0x38>)
 800cc24:	601a      	str	r2, [r3, #0]
 800cc26:	4620      	mov	r0, r4
 800cc28:	2200      	movs	r2, #0
 800cc2a:	2104      	movs	r1, #4
 800cc2c:	f7ff ff94 	bl	800cb58 <std>
 800cc30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cc34:	2201      	movs	r2, #1
 800cc36:	2109      	movs	r1, #9
 800cc38:	f7ff ff8e 	bl	800cb58 <std>
 800cc3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cc40:	2202      	movs	r2, #2
 800cc42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc46:	2112      	movs	r1, #18
 800cc48:	f7ff bf86 	b.w	800cb58 <std>
 800cc4c:	20001c6c 	.word	0x20001c6c
 800cc50:	20001b34 	.word	0x20001b34
 800cc54:	0800cbc5 	.word	0x0800cbc5

0800cc58 <__sfp_lock_acquire>:
 800cc58:	4801      	ldr	r0, [pc, #4]	@ (800cc60 <__sfp_lock_acquire+0x8>)
 800cc5a:	f000 b972 	b.w	800cf42 <__retarget_lock_acquire_recursive>
 800cc5e:	bf00      	nop
 800cc60:	20001c75 	.word	0x20001c75

0800cc64 <__sfp_lock_release>:
 800cc64:	4801      	ldr	r0, [pc, #4]	@ (800cc6c <__sfp_lock_release+0x8>)
 800cc66:	f000 b96d 	b.w	800cf44 <__retarget_lock_release_recursive>
 800cc6a:	bf00      	nop
 800cc6c:	20001c75 	.word	0x20001c75

0800cc70 <__sinit>:
 800cc70:	b510      	push	{r4, lr}
 800cc72:	4604      	mov	r4, r0
 800cc74:	f7ff fff0 	bl	800cc58 <__sfp_lock_acquire>
 800cc78:	6a23      	ldr	r3, [r4, #32]
 800cc7a:	b11b      	cbz	r3, 800cc84 <__sinit+0x14>
 800cc7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc80:	f7ff bff0 	b.w	800cc64 <__sfp_lock_release>
 800cc84:	4b04      	ldr	r3, [pc, #16]	@ (800cc98 <__sinit+0x28>)
 800cc86:	6223      	str	r3, [r4, #32]
 800cc88:	4b04      	ldr	r3, [pc, #16]	@ (800cc9c <__sinit+0x2c>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d1f5      	bne.n	800cc7c <__sinit+0xc>
 800cc90:	f7ff ffc4 	bl	800cc1c <global_stdio_init.part.0>
 800cc94:	e7f2      	b.n	800cc7c <__sinit+0xc>
 800cc96:	bf00      	nop
 800cc98:	0800cbdd 	.word	0x0800cbdd
 800cc9c:	20001c6c 	.word	0x20001c6c

0800cca0 <_fwalk_sglue>:
 800cca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cca4:	4607      	mov	r7, r0
 800cca6:	4688      	mov	r8, r1
 800cca8:	4614      	mov	r4, r2
 800ccaa:	2600      	movs	r6, #0
 800ccac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ccb0:	f1b9 0901 	subs.w	r9, r9, #1
 800ccb4:	d505      	bpl.n	800ccc2 <_fwalk_sglue+0x22>
 800ccb6:	6824      	ldr	r4, [r4, #0]
 800ccb8:	2c00      	cmp	r4, #0
 800ccba:	d1f7      	bne.n	800ccac <_fwalk_sglue+0xc>
 800ccbc:	4630      	mov	r0, r6
 800ccbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccc2:	89ab      	ldrh	r3, [r5, #12]
 800ccc4:	2b01      	cmp	r3, #1
 800ccc6:	d907      	bls.n	800ccd8 <_fwalk_sglue+0x38>
 800ccc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cccc:	3301      	adds	r3, #1
 800ccce:	d003      	beq.n	800ccd8 <_fwalk_sglue+0x38>
 800ccd0:	4629      	mov	r1, r5
 800ccd2:	4638      	mov	r0, r7
 800ccd4:	47c0      	blx	r8
 800ccd6:	4306      	orrs	r6, r0
 800ccd8:	3568      	adds	r5, #104	@ 0x68
 800ccda:	e7e9      	b.n	800ccb0 <_fwalk_sglue+0x10>

0800ccdc <__sread>:
 800ccdc:	b510      	push	{r4, lr}
 800ccde:	460c      	mov	r4, r1
 800cce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cce4:	f000 f8ba 	bl	800ce5c <_read_r>
 800cce8:	2800      	cmp	r0, #0
 800ccea:	bfab      	itete	ge
 800ccec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ccee:	89a3      	ldrhlt	r3, [r4, #12]
 800ccf0:	181b      	addge	r3, r3, r0
 800ccf2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ccf6:	bfac      	ite	ge
 800ccf8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ccfa:	81a3      	strhlt	r3, [r4, #12]
 800ccfc:	bd10      	pop	{r4, pc}

0800ccfe <__swrite>:
 800ccfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd02:	461f      	mov	r7, r3
 800cd04:	898b      	ldrh	r3, [r1, #12]
 800cd06:	05db      	lsls	r3, r3, #23
 800cd08:	4605      	mov	r5, r0
 800cd0a:	460c      	mov	r4, r1
 800cd0c:	4616      	mov	r6, r2
 800cd0e:	d505      	bpl.n	800cd1c <__swrite+0x1e>
 800cd10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd14:	2302      	movs	r3, #2
 800cd16:	2200      	movs	r2, #0
 800cd18:	f000 f88e 	bl	800ce38 <_lseek_r>
 800cd1c:	89a3      	ldrh	r3, [r4, #12]
 800cd1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cd26:	81a3      	strh	r3, [r4, #12]
 800cd28:	4632      	mov	r2, r6
 800cd2a:	463b      	mov	r3, r7
 800cd2c:	4628      	mov	r0, r5
 800cd2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd32:	f000 b8c9 	b.w	800cec8 <_write_r>

0800cd36 <__sseek>:
 800cd36:	b510      	push	{r4, lr}
 800cd38:	460c      	mov	r4, r1
 800cd3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd3e:	f000 f87b 	bl	800ce38 <_lseek_r>
 800cd42:	1c43      	adds	r3, r0, #1
 800cd44:	89a3      	ldrh	r3, [r4, #12]
 800cd46:	bf15      	itete	ne
 800cd48:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cd4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cd4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cd52:	81a3      	strheq	r3, [r4, #12]
 800cd54:	bf18      	it	ne
 800cd56:	81a3      	strhne	r3, [r4, #12]
 800cd58:	bd10      	pop	{r4, pc}

0800cd5a <__sclose>:
 800cd5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd5e:	f000 b85b 	b.w	800ce18 <_close_r>

0800cd62 <memcmp>:
 800cd62:	b510      	push	{r4, lr}
 800cd64:	3901      	subs	r1, #1
 800cd66:	4402      	add	r2, r0
 800cd68:	4290      	cmp	r0, r2
 800cd6a:	d101      	bne.n	800cd70 <memcmp+0xe>
 800cd6c:	2000      	movs	r0, #0
 800cd6e:	e005      	b.n	800cd7c <memcmp+0x1a>
 800cd70:	7803      	ldrb	r3, [r0, #0]
 800cd72:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cd76:	42a3      	cmp	r3, r4
 800cd78:	d001      	beq.n	800cd7e <memcmp+0x1c>
 800cd7a:	1b18      	subs	r0, r3, r4
 800cd7c:	bd10      	pop	{r4, pc}
 800cd7e:	3001      	adds	r0, #1
 800cd80:	e7f2      	b.n	800cd68 <memcmp+0x6>

0800cd82 <memset>:
 800cd82:	4402      	add	r2, r0
 800cd84:	4603      	mov	r3, r0
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d100      	bne.n	800cd8c <memset+0xa>
 800cd8a:	4770      	bx	lr
 800cd8c:	f803 1b01 	strb.w	r1, [r3], #1
 800cd90:	e7f9      	b.n	800cd86 <memset+0x4>

0800cd92 <strncmp>:
 800cd92:	b510      	push	{r4, lr}
 800cd94:	b16a      	cbz	r2, 800cdb2 <strncmp+0x20>
 800cd96:	3901      	subs	r1, #1
 800cd98:	1884      	adds	r4, r0, r2
 800cd9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd9e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d103      	bne.n	800cdae <strncmp+0x1c>
 800cda6:	42a0      	cmp	r0, r4
 800cda8:	d001      	beq.n	800cdae <strncmp+0x1c>
 800cdaa:	2a00      	cmp	r2, #0
 800cdac:	d1f5      	bne.n	800cd9a <strncmp+0x8>
 800cdae:	1ad0      	subs	r0, r2, r3
 800cdb0:	bd10      	pop	{r4, pc}
 800cdb2:	4610      	mov	r0, r2
 800cdb4:	e7fc      	b.n	800cdb0 <strncmp+0x1e>

0800cdb6 <_raise_r>:
 800cdb6:	291f      	cmp	r1, #31
 800cdb8:	b538      	push	{r3, r4, r5, lr}
 800cdba:	4605      	mov	r5, r0
 800cdbc:	460c      	mov	r4, r1
 800cdbe:	d904      	bls.n	800cdca <_raise_r+0x14>
 800cdc0:	2316      	movs	r3, #22
 800cdc2:	6003      	str	r3, [r0, #0]
 800cdc4:	f04f 30ff 	mov.w	r0, #4294967295
 800cdc8:	bd38      	pop	{r3, r4, r5, pc}
 800cdca:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cdcc:	b112      	cbz	r2, 800cdd4 <_raise_r+0x1e>
 800cdce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cdd2:	b94b      	cbnz	r3, 800cde8 <_raise_r+0x32>
 800cdd4:	4628      	mov	r0, r5
 800cdd6:	f000 f865 	bl	800cea4 <_getpid_r>
 800cdda:	4622      	mov	r2, r4
 800cddc:	4601      	mov	r1, r0
 800cdde:	4628      	mov	r0, r5
 800cde0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cde4:	f000 b84c 	b.w	800ce80 <_kill_r>
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d00a      	beq.n	800ce02 <_raise_r+0x4c>
 800cdec:	1c59      	adds	r1, r3, #1
 800cdee:	d103      	bne.n	800cdf8 <_raise_r+0x42>
 800cdf0:	2316      	movs	r3, #22
 800cdf2:	6003      	str	r3, [r0, #0]
 800cdf4:	2001      	movs	r0, #1
 800cdf6:	e7e7      	b.n	800cdc8 <_raise_r+0x12>
 800cdf8:	2100      	movs	r1, #0
 800cdfa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cdfe:	4620      	mov	r0, r4
 800ce00:	4798      	blx	r3
 800ce02:	2000      	movs	r0, #0
 800ce04:	e7e0      	b.n	800cdc8 <_raise_r+0x12>
	...

0800ce08 <raise>:
 800ce08:	4b02      	ldr	r3, [pc, #8]	@ (800ce14 <raise+0xc>)
 800ce0a:	4601      	mov	r1, r0
 800ce0c:	6818      	ldr	r0, [r3, #0]
 800ce0e:	f7ff bfd2 	b.w	800cdb6 <_raise_r>
 800ce12:	bf00      	nop
 800ce14:	20000184 	.word	0x20000184

0800ce18 <_close_r>:
 800ce18:	b538      	push	{r3, r4, r5, lr}
 800ce1a:	4d06      	ldr	r5, [pc, #24]	@ (800ce34 <_close_r+0x1c>)
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	4604      	mov	r4, r0
 800ce20:	4608      	mov	r0, r1
 800ce22:	602b      	str	r3, [r5, #0]
 800ce24:	f7f6 f8b2 	bl	8002f8c <_close>
 800ce28:	1c43      	adds	r3, r0, #1
 800ce2a:	d102      	bne.n	800ce32 <_close_r+0x1a>
 800ce2c:	682b      	ldr	r3, [r5, #0]
 800ce2e:	b103      	cbz	r3, 800ce32 <_close_r+0x1a>
 800ce30:	6023      	str	r3, [r4, #0]
 800ce32:	bd38      	pop	{r3, r4, r5, pc}
 800ce34:	20001c70 	.word	0x20001c70

0800ce38 <_lseek_r>:
 800ce38:	b538      	push	{r3, r4, r5, lr}
 800ce3a:	4d07      	ldr	r5, [pc, #28]	@ (800ce58 <_lseek_r+0x20>)
 800ce3c:	4604      	mov	r4, r0
 800ce3e:	4608      	mov	r0, r1
 800ce40:	4611      	mov	r1, r2
 800ce42:	2200      	movs	r2, #0
 800ce44:	602a      	str	r2, [r5, #0]
 800ce46:	461a      	mov	r2, r3
 800ce48:	f7f6 f8c7 	bl	8002fda <_lseek>
 800ce4c:	1c43      	adds	r3, r0, #1
 800ce4e:	d102      	bne.n	800ce56 <_lseek_r+0x1e>
 800ce50:	682b      	ldr	r3, [r5, #0]
 800ce52:	b103      	cbz	r3, 800ce56 <_lseek_r+0x1e>
 800ce54:	6023      	str	r3, [r4, #0]
 800ce56:	bd38      	pop	{r3, r4, r5, pc}
 800ce58:	20001c70 	.word	0x20001c70

0800ce5c <_read_r>:
 800ce5c:	b538      	push	{r3, r4, r5, lr}
 800ce5e:	4d07      	ldr	r5, [pc, #28]	@ (800ce7c <_read_r+0x20>)
 800ce60:	4604      	mov	r4, r0
 800ce62:	4608      	mov	r0, r1
 800ce64:	4611      	mov	r1, r2
 800ce66:	2200      	movs	r2, #0
 800ce68:	602a      	str	r2, [r5, #0]
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	f7f6 f855 	bl	8002f1a <_read>
 800ce70:	1c43      	adds	r3, r0, #1
 800ce72:	d102      	bne.n	800ce7a <_read_r+0x1e>
 800ce74:	682b      	ldr	r3, [r5, #0]
 800ce76:	b103      	cbz	r3, 800ce7a <_read_r+0x1e>
 800ce78:	6023      	str	r3, [r4, #0]
 800ce7a:	bd38      	pop	{r3, r4, r5, pc}
 800ce7c:	20001c70 	.word	0x20001c70

0800ce80 <_kill_r>:
 800ce80:	b538      	push	{r3, r4, r5, lr}
 800ce82:	4d07      	ldr	r5, [pc, #28]	@ (800cea0 <_kill_r+0x20>)
 800ce84:	2300      	movs	r3, #0
 800ce86:	4604      	mov	r4, r0
 800ce88:	4608      	mov	r0, r1
 800ce8a:	4611      	mov	r1, r2
 800ce8c:	602b      	str	r3, [r5, #0]
 800ce8e:	f7f6 f829 	bl	8002ee4 <_kill>
 800ce92:	1c43      	adds	r3, r0, #1
 800ce94:	d102      	bne.n	800ce9c <_kill_r+0x1c>
 800ce96:	682b      	ldr	r3, [r5, #0]
 800ce98:	b103      	cbz	r3, 800ce9c <_kill_r+0x1c>
 800ce9a:	6023      	str	r3, [r4, #0]
 800ce9c:	bd38      	pop	{r3, r4, r5, pc}
 800ce9e:	bf00      	nop
 800cea0:	20001c70 	.word	0x20001c70

0800cea4 <_getpid_r>:
 800cea4:	f7f6 b816 	b.w	8002ed4 <_getpid>

0800cea8 <_sbrk_r>:
 800cea8:	b538      	push	{r3, r4, r5, lr}
 800ceaa:	4d06      	ldr	r5, [pc, #24]	@ (800cec4 <_sbrk_r+0x1c>)
 800ceac:	2300      	movs	r3, #0
 800ceae:	4604      	mov	r4, r0
 800ceb0:	4608      	mov	r0, r1
 800ceb2:	602b      	str	r3, [r5, #0]
 800ceb4:	f7f6 f89e 	bl	8002ff4 <_sbrk>
 800ceb8:	1c43      	adds	r3, r0, #1
 800ceba:	d102      	bne.n	800cec2 <_sbrk_r+0x1a>
 800cebc:	682b      	ldr	r3, [r5, #0]
 800cebe:	b103      	cbz	r3, 800cec2 <_sbrk_r+0x1a>
 800cec0:	6023      	str	r3, [r4, #0]
 800cec2:	bd38      	pop	{r3, r4, r5, pc}
 800cec4:	20001c70 	.word	0x20001c70

0800cec8 <_write_r>:
 800cec8:	b538      	push	{r3, r4, r5, lr}
 800ceca:	4d07      	ldr	r5, [pc, #28]	@ (800cee8 <_write_r+0x20>)
 800cecc:	4604      	mov	r4, r0
 800cece:	4608      	mov	r0, r1
 800ced0:	4611      	mov	r1, r2
 800ced2:	2200      	movs	r2, #0
 800ced4:	602a      	str	r2, [r5, #0]
 800ced6:	461a      	mov	r2, r3
 800ced8:	f7f6 f83c 	bl	8002f54 <_write>
 800cedc:	1c43      	adds	r3, r0, #1
 800cede:	d102      	bne.n	800cee6 <_write_r+0x1e>
 800cee0:	682b      	ldr	r3, [r5, #0]
 800cee2:	b103      	cbz	r3, 800cee6 <_write_r+0x1e>
 800cee4:	6023      	str	r3, [r4, #0]
 800cee6:	bd38      	pop	{r3, r4, r5, pc}
 800cee8:	20001c70 	.word	0x20001c70

0800ceec <__errno>:
 800ceec:	4b01      	ldr	r3, [pc, #4]	@ (800cef4 <__errno+0x8>)
 800ceee:	6818      	ldr	r0, [r3, #0]
 800cef0:	4770      	bx	lr
 800cef2:	bf00      	nop
 800cef4:	20000184 	.word	0x20000184

0800cef8 <__libc_init_array>:
 800cef8:	b570      	push	{r4, r5, r6, lr}
 800cefa:	4d0d      	ldr	r5, [pc, #52]	@ (800cf30 <__libc_init_array+0x38>)
 800cefc:	4c0d      	ldr	r4, [pc, #52]	@ (800cf34 <__libc_init_array+0x3c>)
 800cefe:	1b64      	subs	r4, r4, r5
 800cf00:	10a4      	asrs	r4, r4, #2
 800cf02:	2600      	movs	r6, #0
 800cf04:	42a6      	cmp	r6, r4
 800cf06:	d109      	bne.n	800cf1c <__libc_init_array+0x24>
 800cf08:	4d0b      	ldr	r5, [pc, #44]	@ (800cf38 <__libc_init_array+0x40>)
 800cf0a:	4c0c      	ldr	r4, [pc, #48]	@ (800cf3c <__libc_init_array+0x44>)
 800cf0c:	f001 fd4c 	bl	800e9a8 <_init>
 800cf10:	1b64      	subs	r4, r4, r5
 800cf12:	10a4      	asrs	r4, r4, #2
 800cf14:	2600      	movs	r6, #0
 800cf16:	42a6      	cmp	r6, r4
 800cf18:	d105      	bne.n	800cf26 <__libc_init_array+0x2e>
 800cf1a:	bd70      	pop	{r4, r5, r6, pc}
 800cf1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf20:	4798      	blx	r3
 800cf22:	3601      	adds	r6, #1
 800cf24:	e7ee      	b.n	800cf04 <__libc_init_array+0xc>
 800cf26:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf2a:	4798      	blx	r3
 800cf2c:	3601      	adds	r6, #1
 800cf2e:	e7f2      	b.n	800cf16 <__libc_init_array+0x1e>
 800cf30:	0800f304 	.word	0x0800f304
 800cf34:	0800f304 	.word	0x0800f304
 800cf38:	0800f304 	.word	0x0800f304
 800cf3c:	0800f30c 	.word	0x0800f30c

0800cf40 <__retarget_lock_init_recursive>:
 800cf40:	4770      	bx	lr

0800cf42 <__retarget_lock_acquire_recursive>:
 800cf42:	4770      	bx	lr

0800cf44 <__retarget_lock_release_recursive>:
 800cf44:	4770      	bx	lr

0800cf46 <memcpy>:
 800cf46:	440a      	add	r2, r1
 800cf48:	4291      	cmp	r1, r2
 800cf4a:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf4e:	d100      	bne.n	800cf52 <memcpy+0xc>
 800cf50:	4770      	bx	lr
 800cf52:	b510      	push	{r4, lr}
 800cf54:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf58:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf5c:	4291      	cmp	r1, r2
 800cf5e:	d1f9      	bne.n	800cf54 <memcpy+0xe>
 800cf60:	bd10      	pop	{r4, pc}
	...

0800cf64 <_free_r>:
 800cf64:	b538      	push	{r3, r4, r5, lr}
 800cf66:	4605      	mov	r5, r0
 800cf68:	2900      	cmp	r1, #0
 800cf6a:	d041      	beq.n	800cff0 <_free_r+0x8c>
 800cf6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf70:	1f0c      	subs	r4, r1, #4
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	bfb8      	it	lt
 800cf76:	18e4      	addlt	r4, r4, r3
 800cf78:	f7fe ffd2 	bl	800bf20 <__malloc_lock>
 800cf7c:	4a1d      	ldr	r2, [pc, #116]	@ (800cff4 <_free_r+0x90>)
 800cf7e:	6813      	ldr	r3, [r2, #0]
 800cf80:	b933      	cbnz	r3, 800cf90 <_free_r+0x2c>
 800cf82:	6063      	str	r3, [r4, #4]
 800cf84:	6014      	str	r4, [r2, #0]
 800cf86:	4628      	mov	r0, r5
 800cf88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf8c:	f7fe bfce 	b.w	800bf2c <__malloc_unlock>
 800cf90:	42a3      	cmp	r3, r4
 800cf92:	d908      	bls.n	800cfa6 <_free_r+0x42>
 800cf94:	6820      	ldr	r0, [r4, #0]
 800cf96:	1821      	adds	r1, r4, r0
 800cf98:	428b      	cmp	r3, r1
 800cf9a:	bf01      	itttt	eq
 800cf9c:	6819      	ldreq	r1, [r3, #0]
 800cf9e:	685b      	ldreq	r3, [r3, #4]
 800cfa0:	1809      	addeq	r1, r1, r0
 800cfa2:	6021      	streq	r1, [r4, #0]
 800cfa4:	e7ed      	b.n	800cf82 <_free_r+0x1e>
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	685b      	ldr	r3, [r3, #4]
 800cfaa:	b10b      	cbz	r3, 800cfb0 <_free_r+0x4c>
 800cfac:	42a3      	cmp	r3, r4
 800cfae:	d9fa      	bls.n	800cfa6 <_free_r+0x42>
 800cfb0:	6811      	ldr	r1, [r2, #0]
 800cfb2:	1850      	adds	r0, r2, r1
 800cfb4:	42a0      	cmp	r0, r4
 800cfb6:	d10b      	bne.n	800cfd0 <_free_r+0x6c>
 800cfb8:	6820      	ldr	r0, [r4, #0]
 800cfba:	4401      	add	r1, r0
 800cfbc:	1850      	adds	r0, r2, r1
 800cfbe:	4283      	cmp	r3, r0
 800cfc0:	6011      	str	r1, [r2, #0]
 800cfc2:	d1e0      	bne.n	800cf86 <_free_r+0x22>
 800cfc4:	6818      	ldr	r0, [r3, #0]
 800cfc6:	685b      	ldr	r3, [r3, #4]
 800cfc8:	6053      	str	r3, [r2, #4]
 800cfca:	4408      	add	r0, r1
 800cfcc:	6010      	str	r0, [r2, #0]
 800cfce:	e7da      	b.n	800cf86 <_free_r+0x22>
 800cfd0:	d902      	bls.n	800cfd8 <_free_r+0x74>
 800cfd2:	230c      	movs	r3, #12
 800cfd4:	602b      	str	r3, [r5, #0]
 800cfd6:	e7d6      	b.n	800cf86 <_free_r+0x22>
 800cfd8:	6820      	ldr	r0, [r4, #0]
 800cfda:	1821      	adds	r1, r4, r0
 800cfdc:	428b      	cmp	r3, r1
 800cfde:	bf04      	itt	eq
 800cfe0:	6819      	ldreq	r1, [r3, #0]
 800cfe2:	685b      	ldreq	r3, [r3, #4]
 800cfe4:	6063      	str	r3, [r4, #4]
 800cfe6:	bf04      	itt	eq
 800cfe8:	1809      	addeq	r1, r1, r0
 800cfea:	6021      	streq	r1, [r4, #0]
 800cfec:	6054      	str	r4, [r2, #4]
 800cfee:	e7ca      	b.n	800cf86 <_free_r+0x22>
 800cff0:	bd38      	pop	{r3, r4, r5, pc}
 800cff2:	bf00      	nop
 800cff4:	20001b30 	.word	0x20001b30

0800cff8 <rshift>:
 800cff8:	6903      	ldr	r3, [r0, #16]
 800cffa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cffe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d002:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d006:	f100 0414 	add.w	r4, r0, #20
 800d00a:	dd45      	ble.n	800d098 <rshift+0xa0>
 800d00c:	f011 011f 	ands.w	r1, r1, #31
 800d010:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d014:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d018:	d10c      	bne.n	800d034 <rshift+0x3c>
 800d01a:	f100 0710 	add.w	r7, r0, #16
 800d01e:	4629      	mov	r1, r5
 800d020:	42b1      	cmp	r1, r6
 800d022:	d334      	bcc.n	800d08e <rshift+0x96>
 800d024:	1a9b      	subs	r3, r3, r2
 800d026:	009b      	lsls	r3, r3, #2
 800d028:	1eea      	subs	r2, r5, #3
 800d02a:	4296      	cmp	r6, r2
 800d02c:	bf38      	it	cc
 800d02e:	2300      	movcc	r3, #0
 800d030:	4423      	add	r3, r4
 800d032:	e015      	b.n	800d060 <rshift+0x68>
 800d034:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d038:	f1c1 0820 	rsb	r8, r1, #32
 800d03c:	40cf      	lsrs	r7, r1
 800d03e:	f105 0e04 	add.w	lr, r5, #4
 800d042:	46a1      	mov	r9, r4
 800d044:	4576      	cmp	r6, lr
 800d046:	46f4      	mov	ip, lr
 800d048:	d815      	bhi.n	800d076 <rshift+0x7e>
 800d04a:	1a9a      	subs	r2, r3, r2
 800d04c:	0092      	lsls	r2, r2, #2
 800d04e:	3a04      	subs	r2, #4
 800d050:	3501      	adds	r5, #1
 800d052:	42ae      	cmp	r6, r5
 800d054:	bf38      	it	cc
 800d056:	2200      	movcc	r2, #0
 800d058:	18a3      	adds	r3, r4, r2
 800d05a:	50a7      	str	r7, [r4, r2]
 800d05c:	b107      	cbz	r7, 800d060 <rshift+0x68>
 800d05e:	3304      	adds	r3, #4
 800d060:	1b1a      	subs	r2, r3, r4
 800d062:	42a3      	cmp	r3, r4
 800d064:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d068:	bf08      	it	eq
 800d06a:	2300      	moveq	r3, #0
 800d06c:	6102      	str	r2, [r0, #16]
 800d06e:	bf08      	it	eq
 800d070:	6143      	streq	r3, [r0, #20]
 800d072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d076:	f8dc c000 	ldr.w	ip, [ip]
 800d07a:	fa0c fc08 	lsl.w	ip, ip, r8
 800d07e:	ea4c 0707 	orr.w	r7, ip, r7
 800d082:	f849 7b04 	str.w	r7, [r9], #4
 800d086:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d08a:	40cf      	lsrs	r7, r1
 800d08c:	e7da      	b.n	800d044 <rshift+0x4c>
 800d08e:	f851 cb04 	ldr.w	ip, [r1], #4
 800d092:	f847 cf04 	str.w	ip, [r7, #4]!
 800d096:	e7c3      	b.n	800d020 <rshift+0x28>
 800d098:	4623      	mov	r3, r4
 800d09a:	e7e1      	b.n	800d060 <rshift+0x68>

0800d09c <__hexdig_fun>:
 800d09c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d0a0:	2b09      	cmp	r3, #9
 800d0a2:	d802      	bhi.n	800d0aa <__hexdig_fun+0xe>
 800d0a4:	3820      	subs	r0, #32
 800d0a6:	b2c0      	uxtb	r0, r0
 800d0a8:	4770      	bx	lr
 800d0aa:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d0ae:	2b05      	cmp	r3, #5
 800d0b0:	d801      	bhi.n	800d0b6 <__hexdig_fun+0x1a>
 800d0b2:	3847      	subs	r0, #71	@ 0x47
 800d0b4:	e7f7      	b.n	800d0a6 <__hexdig_fun+0xa>
 800d0b6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d0ba:	2b05      	cmp	r3, #5
 800d0bc:	d801      	bhi.n	800d0c2 <__hexdig_fun+0x26>
 800d0be:	3827      	subs	r0, #39	@ 0x27
 800d0c0:	e7f1      	b.n	800d0a6 <__hexdig_fun+0xa>
 800d0c2:	2000      	movs	r0, #0
 800d0c4:	4770      	bx	lr
	...

0800d0c8 <__gethex>:
 800d0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0cc:	b085      	sub	sp, #20
 800d0ce:	468a      	mov	sl, r1
 800d0d0:	9302      	str	r3, [sp, #8]
 800d0d2:	680b      	ldr	r3, [r1, #0]
 800d0d4:	9001      	str	r0, [sp, #4]
 800d0d6:	4690      	mov	r8, r2
 800d0d8:	1c9c      	adds	r4, r3, #2
 800d0da:	46a1      	mov	r9, r4
 800d0dc:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d0e0:	2830      	cmp	r0, #48	@ 0x30
 800d0e2:	d0fa      	beq.n	800d0da <__gethex+0x12>
 800d0e4:	eba9 0303 	sub.w	r3, r9, r3
 800d0e8:	f1a3 0b02 	sub.w	fp, r3, #2
 800d0ec:	f7ff ffd6 	bl	800d09c <__hexdig_fun>
 800d0f0:	4605      	mov	r5, r0
 800d0f2:	2800      	cmp	r0, #0
 800d0f4:	d168      	bne.n	800d1c8 <__gethex+0x100>
 800d0f6:	49a0      	ldr	r1, [pc, #640]	@ (800d378 <__gethex+0x2b0>)
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	4648      	mov	r0, r9
 800d0fc:	f7ff fe49 	bl	800cd92 <strncmp>
 800d100:	4607      	mov	r7, r0
 800d102:	2800      	cmp	r0, #0
 800d104:	d167      	bne.n	800d1d6 <__gethex+0x10e>
 800d106:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d10a:	4626      	mov	r6, r4
 800d10c:	f7ff ffc6 	bl	800d09c <__hexdig_fun>
 800d110:	2800      	cmp	r0, #0
 800d112:	d062      	beq.n	800d1da <__gethex+0x112>
 800d114:	4623      	mov	r3, r4
 800d116:	7818      	ldrb	r0, [r3, #0]
 800d118:	2830      	cmp	r0, #48	@ 0x30
 800d11a:	4699      	mov	r9, r3
 800d11c:	f103 0301 	add.w	r3, r3, #1
 800d120:	d0f9      	beq.n	800d116 <__gethex+0x4e>
 800d122:	f7ff ffbb 	bl	800d09c <__hexdig_fun>
 800d126:	fab0 f580 	clz	r5, r0
 800d12a:	096d      	lsrs	r5, r5, #5
 800d12c:	f04f 0b01 	mov.w	fp, #1
 800d130:	464a      	mov	r2, r9
 800d132:	4616      	mov	r6, r2
 800d134:	3201      	adds	r2, #1
 800d136:	7830      	ldrb	r0, [r6, #0]
 800d138:	f7ff ffb0 	bl	800d09c <__hexdig_fun>
 800d13c:	2800      	cmp	r0, #0
 800d13e:	d1f8      	bne.n	800d132 <__gethex+0x6a>
 800d140:	498d      	ldr	r1, [pc, #564]	@ (800d378 <__gethex+0x2b0>)
 800d142:	2201      	movs	r2, #1
 800d144:	4630      	mov	r0, r6
 800d146:	f7ff fe24 	bl	800cd92 <strncmp>
 800d14a:	2800      	cmp	r0, #0
 800d14c:	d13f      	bne.n	800d1ce <__gethex+0x106>
 800d14e:	b944      	cbnz	r4, 800d162 <__gethex+0x9a>
 800d150:	1c74      	adds	r4, r6, #1
 800d152:	4622      	mov	r2, r4
 800d154:	4616      	mov	r6, r2
 800d156:	3201      	adds	r2, #1
 800d158:	7830      	ldrb	r0, [r6, #0]
 800d15a:	f7ff ff9f 	bl	800d09c <__hexdig_fun>
 800d15e:	2800      	cmp	r0, #0
 800d160:	d1f8      	bne.n	800d154 <__gethex+0x8c>
 800d162:	1ba4      	subs	r4, r4, r6
 800d164:	00a7      	lsls	r7, r4, #2
 800d166:	7833      	ldrb	r3, [r6, #0]
 800d168:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d16c:	2b50      	cmp	r3, #80	@ 0x50
 800d16e:	d13e      	bne.n	800d1ee <__gethex+0x126>
 800d170:	7873      	ldrb	r3, [r6, #1]
 800d172:	2b2b      	cmp	r3, #43	@ 0x2b
 800d174:	d033      	beq.n	800d1de <__gethex+0x116>
 800d176:	2b2d      	cmp	r3, #45	@ 0x2d
 800d178:	d034      	beq.n	800d1e4 <__gethex+0x11c>
 800d17a:	1c71      	adds	r1, r6, #1
 800d17c:	2400      	movs	r4, #0
 800d17e:	7808      	ldrb	r0, [r1, #0]
 800d180:	f7ff ff8c 	bl	800d09c <__hexdig_fun>
 800d184:	1e43      	subs	r3, r0, #1
 800d186:	b2db      	uxtb	r3, r3
 800d188:	2b18      	cmp	r3, #24
 800d18a:	d830      	bhi.n	800d1ee <__gethex+0x126>
 800d18c:	f1a0 0210 	sub.w	r2, r0, #16
 800d190:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d194:	f7ff ff82 	bl	800d09c <__hexdig_fun>
 800d198:	f100 3cff 	add.w	ip, r0, #4294967295
 800d19c:	fa5f fc8c 	uxtb.w	ip, ip
 800d1a0:	f1bc 0f18 	cmp.w	ip, #24
 800d1a4:	f04f 030a 	mov.w	r3, #10
 800d1a8:	d91e      	bls.n	800d1e8 <__gethex+0x120>
 800d1aa:	b104      	cbz	r4, 800d1ae <__gethex+0xe6>
 800d1ac:	4252      	negs	r2, r2
 800d1ae:	4417      	add	r7, r2
 800d1b0:	f8ca 1000 	str.w	r1, [sl]
 800d1b4:	b1ed      	cbz	r5, 800d1f2 <__gethex+0x12a>
 800d1b6:	f1bb 0f00 	cmp.w	fp, #0
 800d1ba:	bf0c      	ite	eq
 800d1bc:	2506      	moveq	r5, #6
 800d1be:	2500      	movne	r5, #0
 800d1c0:	4628      	mov	r0, r5
 800d1c2:	b005      	add	sp, #20
 800d1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1c8:	2500      	movs	r5, #0
 800d1ca:	462c      	mov	r4, r5
 800d1cc:	e7b0      	b.n	800d130 <__gethex+0x68>
 800d1ce:	2c00      	cmp	r4, #0
 800d1d0:	d1c7      	bne.n	800d162 <__gethex+0x9a>
 800d1d2:	4627      	mov	r7, r4
 800d1d4:	e7c7      	b.n	800d166 <__gethex+0x9e>
 800d1d6:	464e      	mov	r6, r9
 800d1d8:	462f      	mov	r7, r5
 800d1da:	2501      	movs	r5, #1
 800d1dc:	e7c3      	b.n	800d166 <__gethex+0x9e>
 800d1de:	2400      	movs	r4, #0
 800d1e0:	1cb1      	adds	r1, r6, #2
 800d1e2:	e7cc      	b.n	800d17e <__gethex+0xb6>
 800d1e4:	2401      	movs	r4, #1
 800d1e6:	e7fb      	b.n	800d1e0 <__gethex+0x118>
 800d1e8:	fb03 0002 	mla	r0, r3, r2, r0
 800d1ec:	e7ce      	b.n	800d18c <__gethex+0xc4>
 800d1ee:	4631      	mov	r1, r6
 800d1f0:	e7de      	b.n	800d1b0 <__gethex+0xe8>
 800d1f2:	eba6 0309 	sub.w	r3, r6, r9
 800d1f6:	3b01      	subs	r3, #1
 800d1f8:	4629      	mov	r1, r5
 800d1fa:	2b07      	cmp	r3, #7
 800d1fc:	dc0a      	bgt.n	800d214 <__gethex+0x14c>
 800d1fe:	9801      	ldr	r0, [sp, #4]
 800d200:	f000 fa46 	bl	800d690 <_Balloc>
 800d204:	4604      	mov	r4, r0
 800d206:	b940      	cbnz	r0, 800d21a <__gethex+0x152>
 800d208:	4b5c      	ldr	r3, [pc, #368]	@ (800d37c <__gethex+0x2b4>)
 800d20a:	4602      	mov	r2, r0
 800d20c:	21e4      	movs	r1, #228	@ 0xe4
 800d20e:	485c      	ldr	r0, [pc, #368]	@ (800d380 <__gethex+0x2b8>)
 800d210:	f001 f92c 	bl	800e46c <__assert_func>
 800d214:	3101      	adds	r1, #1
 800d216:	105b      	asrs	r3, r3, #1
 800d218:	e7ef      	b.n	800d1fa <__gethex+0x132>
 800d21a:	f100 0a14 	add.w	sl, r0, #20
 800d21e:	2300      	movs	r3, #0
 800d220:	4655      	mov	r5, sl
 800d222:	469b      	mov	fp, r3
 800d224:	45b1      	cmp	r9, r6
 800d226:	d337      	bcc.n	800d298 <__gethex+0x1d0>
 800d228:	f845 bb04 	str.w	fp, [r5], #4
 800d22c:	eba5 050a 	sub.w	r5, r5, sl
 800d230:	10ad      	asrs	r5, r5, #2
 800d232:	6125      	str	r5, [r4, #16]
 800d234:	4658      	mov	r0, fp
 800d236:	f000 fb1d 	bl	800d874 <__hi0bits>
 800d23a:	016d      	lsls	r5, r5, #5
 800d23c:	f8d8 6000 	ldr.w	r6, [r8]
 800d240:	1a2d      	subs	r5, r5, r0
 800d242:	42b5      	cmp	r5, r6
 800d244:	dd54      	ble.n	800d2f0 <__gethex+0x228>
 800d246:	1bad      	subs	r5, r5, r6
 800d248:	4629      	mov	r1, r5
 800d24a:	4620      	mov	r0, r4
 800d24c:	f000 fea9 	bl	800dfa2 <__any_on>
 800d250:	4681      	mov	r9, r0
 800d252:	b178      	cbz	r0, 800d274 <__gethex+0x1ac>
 800d254:	1e6b      	subs	r3, r5, #1
 800d256:	1159      	asrs	r1, r3, #5
 800d258:	f003 021f 	and.w	r2, r3, #31
 800d25c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d260:	f04f 0901 	mov.w	r9, #1
 800d264:	fa09 f202 	lsl.w	r2, r9, r2
 800d268:	420a      	tst	r2, r1
 800d26a:	d003      	beq.n	800d274 <__gethex+0x1ac>
 800d26c:	454b      	cmp	r3, r9
 800d26e:	dc36      	bgt.n	800d2de <__gethex+0x216>
 800d270:	f04f 0902 	mov.w	r9, #2
 800d274:	4629      	mov	r1, r5
 800d276:	4620      	mov	r0, r4
 800d278:	f7ff febe 	bl	800cff8 <rshift>
 800d27c:	442f      	add	r7, r5
 800d27e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d282:	42bb      	cmp	r3, r7
 800d284:	da42      	bge.n	800d30c <__gethex+0x244>
 800d286:	9801      	ldr	r0, [sp, #4]
 800d288:	4621      	mov	r1, r4
 800d28a:	f000 fa41 	bl	800d710 <_Bfree>
 800d28e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d290:	2300      	movs	r3, #0
 800d292:	6013      	str	r3, [r2, #0]
 800d294:	25a3      	movs	r5, #163	@ 0xa3
 800d296:	e793      	b.n	800d1c0 <__gethex+0xf8>
 800d298:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d29c:	2a2e      	cmp	r2, #46	@ 0x2e
 800d29e:	d012      	beq.n	800d2c6 <__gethex+0x1fe>
 800d2a0:	2b20      	cmp	r3, #32
 800d2a2:	d104      	bne.n	800d2ae <__gethex+0x1e6>
 800d2a4:	f845 bb04 	str.w	fp, [r5], #4
 800d2a8:	f04f 0b00 	mov.w	fp, #0
 800d2ac:	465b      	mov	r3, fp
 800d2ae:	7830      	ldrb	r0, [r6, #0]
 800d2b0:	9303      	str	r3, [sp, #12]
 800d2b2:	f7ff fef3 	bl	800d09c <__hexdig_fun>
 800d2b6:	9b03      	ldr	r3, [sp, #12]
 800d2b8:	f000 000f 	and.w	r0, r0, #15
 800d2bc:	4098      	lsls	r0, r3
 800d2be:	ea4b 0b00 	orr.w	fp, fp, r0
 800d2c2:	3304      	adds	r3, #4
 800d2c4:	e7ae      	b.n	800d224 <__gethex+0x15c>
 800d2c6:	45b1      	cmp	r9, r6
 800d2c8:	d8ea      	bhi.n	800d2a0 <__gethex+0x1d8>
 800d2ca:	492b      	ldr	r1, [pc, #172]	@ (800d378 <__gethex+0x2b0>)
 800d2cc:	9303      	str	r3, [sp, #12]
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	4630      	mov	r0, r6
 800d2d2:	f7ff fd5e 	bl	800cd92 <strncmp>
 800d2d6:	9b03      	ldr	r3, [sp, #12]
 800d2d8:	2800      	cmp	r0, #0
 800d2da:	d1e1      	bne.n	800d2a0 <__gethex+0x1d8>
 800d2dc:	e7a2      	b.n	800d224 <__gethex+0x15c>
 800d2de:	1ea9      	subs	r1, r5, #2
 800d2e0:	4620      	mov	r0, r4
 800d2e2:	f000 fe5e 	bl	800dfa2 <__any_on>
 800d2e6:	2800      	cmp	r0, #0
 800d2e8:	d0c2      	beq.n	800d270 <__gethex+0x1a8>
 800d2ea:	f04f 0903 	mov.w	r9, #3
 800d2ee:	e7c1      	b.n	800d274 <__gethex+0x1ac>
 800d2f0:	da09      	bge.n	800d306 <__gethex+0x23e>
 800d2f2:	1b75      	subs	r5, r6, r5
 800d2f4:	4621      	mov	r1, r4
 800d2f6:	9801      	ldr	r0, [sp, #4]
 800d2f8:	462a      	mov	r2, r5
 800d2fa:	f000 fc19 	bl	800db30 <__lshift>
 800d2fe:	1b7f      	subs	r7, r7, r5
 800d300:	4604      	mov	r4, r0
 800d302:	f100 0a14 	add.w	sl, r0, #20
 800d306:	f04f 0900 	mov.w	r9, #0
 800d30a:	e7b8      	b.n	800d27e <__gethex+0x1b6>
 800d30c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d310:	42bd      	cmp	r5, r7
 800d312:	dd6f      	ble.n	800d3f4 <__gethex+0x32c>
 800d314:	1bed      	subs	r5, r5, r7
 800d316:	42ae      	cmp	r6, r5
 800d318:	dc34      	bgt.n	800d384 <__gethex+0x2bc>
 800d31a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d31e:	2b02      	cmp	r3, #2
 800d320:	d022      	beq.n	800d368 <__gethex+0x2a0>
 800d322:	2b03      	cmp	r3, #3
 800d324:	d024      	beq.n	800d370 <__gethex+0x2a8>
 800d326:	2b01      	cmp	r3, #1
 800d328:	d115      	bne.n	800d356 <__gethex+0x28e>
 800d32a:	42ae      	cmp	r6, r5
 800d32c:	d113      	bne.n	800d356 <__gethex+0x28e>
 800d32e:	2e01      	cmp	r6, #1
 800d330:	d10b      	bne.n	800d34a <__gethex+0x282>
 800d332:	9a02      	ldr	r2, [sp, #8]
 800d334:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d338:	6013      	str	r3, [r2, #0]
 800d33a:	2301      	movs	r3, #1
 800d33c:	6123      	str	r3, [r4, #16]
 800d33e:	f8ca 3000 	str.w	r3, [sl]
 800d342:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d344:	2562      	movs	r5, #98	@ 0x62
 800d346:	601c      	str	r4, [r3, #0]
 800d348:	e73a      	b.n	800d1c0 <__gethex+0xf8>
 800d34a:	1e71      	subs	r1, r6, #1
 800d34c:	4620      	mov	r0, r4
 800d34e:	f000 fe28 	bl	800dfa2 <__any_on>
 800d352:	2800      	cmp	r0, #0
 800d354:	d1ed      	bne.n	800d332 <__gethex+0x26a>
 800d356:	9801      	ldr	r0, [sp, #4]
 800d358:	4621      	mov	r1, r4
 800d35a:	f000 f9d9 	bl	800d710 <_Bfree>
 800d35e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d360:	2300      	movs	r3, #0
 800d362:	6013      	str	r3, [r2, #0]
 800d364:	2550      	movs	r5, #80	@ 0x50
 800d366:	e72b      	b.n	800d1c0 <__gethex+0xf8>
 800d368:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d1f3      	bne.n	800d356 <__gethex+0x28e>
 800d36e:	e7e0      	b.n	800d332 <__gethex+0x26a>
 800d370:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d372:	2b00      	cmp	r3, #0
 800d374:	d1dd      	bne.n	800d332 <__gethex+0x26a>
 800d376:	e7ee      	b.n	800d356 <__gethex+0x28e>
 800d378:	0800eb16 	.word	0x0800eb16
 800d37c:	0800eb2c 	.word	0x0800eb2c
 800d380:	0800eb3d 	.word	0x0800eb3d
 800d384:	1e6f      	subs	r7, r5, #1
 800d386:	f1b9 0f00 	cmp.w	r9, #0
 800d38a:	d130      	bne.n	800d3ee <__gethex+0x326>
 800d38c:	b127      	cbz	r7, 800d398 <__gethex+0x2d0>
 800d38e:	4639      	mov	r1, r7
 800d390:	4620      	mov	r0, r4
 800d392:	f000 fe06 	bl	800dfa2 <__any_on>
 800d396:	4681      	mov	r9, r0
 800d398:	117a      	asrs	r2, r7, #5
 800d39a:	2301      	movs	r3, #1
 800d39c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d3a0:	f007 071f 	and.w	r7, r7, #31
 800d3a4:	40bb      	lsls	r3, r7
 800d3a6:	4213      	tst	r3, r2
 800d3a8:	4629      	mov	r1, r5
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	bf18      	it	ne
 800d3ae:	f049 0902 	orrne.w	r9, r9, #2
 800d3b2:	f7ff fe21 	bl	800cff8 <rshift>
 800d3b6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d3ba:	1b76      	subs	r6, r6, r5
 800d3bc:	2502      	movs	r5, #2
 800d3be:	f1b9 0f00 	cmp.w	r9, #0
 800d3c2:	d047      	beq.n	800d454 <__gethex+0x38c>
 800d3c4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d3c8:	2b02      	cmp	r3, #2
 800d3ca:	d015      	beq.n	800d3f8 <__gethex+0x330>
 800d3cc:	2b03      	cmp	r3, #3
 800d3ce:	d017      	beq.n	800d400 <__gethex+0x338>
 800d3d0:	2b01      	cmp	r3, #1
 800d3d2:	d109      	bne.n	800d3e8 <__gethex+0x320>
 800d3d4:	f019 0f02 	tst.w	r9, #2
 800d3d8:	d006      	beq.n	800d3e8 <__gethex+0x320>
 800d3da:	f8da 3000 	ldr.w	r3, [sl]
 800d3de:	ea49 0903 	orr.w	r9, r9, r3
 800d3e2:	f019 0f01 	tst.w	r9, #1
 800d3e6:	d10e      	bne.n	800d406 <__gethex+0x33e>
 800d3e8:	f045 0510 	orr.w	r5, r5, #16
 800d3ec:	e032      	b.n	800d454 <__gethex+0x38c>
 800d3ee:	f04f 0901 	mov.w	r9, #1
 800d3f2:	e7d1      	b.n	800d398 <__gethex+0x2d0>
 800d3f4:	2501      	movs	r5, #1
 800d3f6:	e7e2      	b.n	800d3be <__gethex+0x2f6>
 800d3f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3fa:	f1c3 0301 	rsb	r3, r3, #1
 800d3fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d400:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d402:	2b00      	cmp	r3, #0
 800d404:	d0f0      	beq.n	800d3e8 <__gethex+0x320>
 800d406:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d40a:	f104 0314 	add.w	r3, r4, #20
 800d40e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d412:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d416:	f04f 0c00 	mov.w	ip, #0
 800d41a:	4618      	mov	r0, r3
 800d41c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d420:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d424:	d01b      	beq.n	800d45e <__gethex+0x396>
 800d426:	3201      	adds	r2, #1
 800d428:	6002      	str	r2, [r0, #0]
 800d42a:	2d02      	cmp	r5, #2
 800d42c:	f104 0314 	add.w	r3, r4, #20
 800d430:	d13c      	bne.n	800d4ac <__gethex+0x3e4>
 800d432:	f8d8 2000 	ldr.w	r2, [r8]
 800d436:	3a01      	subs	r2, #1
 800d438:	42b2      	cmp	r2, r6
 800d43a:	d109      	bne.n	800d450 <__gethex+0x388>
 800d43c:	1171      	asrs	r1, r6, #5
 800d43e:	2201      	movs	r2, #1
 800d440:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d444:	f006 061f 	and.w	r6, r6, #31
 800d448:	fa02 f606 	lsl.w	r6, r2, r6
 800d44c:	421e      	tst	r6, r3
 800d44e:	d13a      	bne.n	800d4c6 <__gethex+0x3fe>
 800d450:	f045 0520 	orr.w	r5, r5, #32
 800d454:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d456:	601c      	str	r4, [r3, #0]
 800d458:	9b02      	ldr	r3, [sp, #8]
 800d45a:	601f      	str	r7, [r3, #0]
 800d45c:	e6b0      	b.n	800d1c0 <__gethex+0xf8>
 800d45e:	4299      	cmp	r1, r3
 800d460:	f843 cc04 	str.w	ip, [r3, #-4]
 800d464:	d8d9      	bhi.n	800d41a <__gethex+0x352>
 800d466:	68a3      	ldr	r3, [r4, #8]
 800d468:	459b      	cmp	fp, r3
 800d46a:	db17      	blt.n	800d49c <__gethex+0x3d4>
 800d46c:	6861      	ldr	r1, [r4, #4]
 800d46e:	9801      	ldr	r0, [sp, #4]
 800d470:	3101      	adds	r1, #1
 800d472:	f000 f90d 	bl	800d690 <_Balloc>
 800d476:	4681      	mov	r9, r0
 800d478:	b918      	cbnz	r0, 800d482 <__gethex+0x3ba>
 800d47a:	4b1a      	ldr	r3, [pc, #104]	@ (800d4e4 <__gethex+0x41c>)
 800d47c:	4602      	mov	r2, r0
 800d47e:	2184      	movs	r1, #132	@ 0x84
 800d480:	e6c5      	b.n	800d20e <__gethex+0x146>
 800d482:	6922      	ldr	r2, [r4, #16]
 800d484:	3202      	adds	r2, #2
 800d486:	f104 010c 	add.w	r1, r4, #12
 800d48a:	0092      	lsls	r2, r2, #2
 800d48c:	300c      	adds	r0, #12
 800d48e:	f7ff fd5a 	bl	800cf46 <memcpy>
 800d492:	4621      	mov	r1, r4
 800d494:	9801      	ldr	r0, [sp, #4]
 800d496:	f000 f93b 	bl	800d710 <_Bfree>
 800d49a:	464c      	mov	r4, r9
 800d49c:	6923      	ldr	r3, [r4, #16]
 800d49e:	1c5a      	adds	r2, r3, #1
 800d4a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d4a4:	6122      	str	r2, [r4, #16]
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	615a      	str	r2, [r3, #20]
 800d4aa:	e7be      	b.n	800d42a <__gethex+0x362>
 800d4ac:	6922      	ldr	r2, [r4, #16]
 800d4ae:	455a      	cmp	r2, fp
 800d4b0:	dd0b      	ble.n	800d4ca <__gethex+0x402>
 800d4b2:	2101      	movs	r1, #1
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	f7ff fd9f 	bl	800cff8 <rshift>
 800d4ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d4be:	3701      	adds	r7, #1
 800d4c0:	42bb      	cmp	r3, r7
 800d4c2:	f6ff aee0 	blt.w	800d286 <__gethex+0x1be>
 800d4c6:	2501      	movs	r5, #1
 800d4c8:	e7c2      	b.n	800d450 <__gethex+0x388>
 800d4ca:	f016 061f 	ands.w	r6, r6, #31
 800d4ce:	d0fa      	beq.n	800d4c6 <__gethex+0x3fe>
 800d4d0:	4453      	add	r3, sl
 800d4d2:	f1c6 0620 	rsb	r6, r6, #32
 800d4d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d4da:	f000 f9cb 	bl	800d874 <__hi0bits>
 800d4de:	42b0      	cmp	r0, r6
 800d4e0:	dbe7      	blt.n	800d4b2 <__gethex+0x3ea>
 800d4e2:	e7f0      	b.n	800d4c6 <__gethex+0x3fe>
 800d4e4:	0800eb2c 	.word	0x0800eb2c

0800d4e8 <L_shift>:
 800d4e8:	f1c2 0208 	rsb	r2, r2, #8
 800d4ec:	0092      	lsls	r2, r2, #2
 800d4ee:	b570      	push	{r4, r5, r6, lr}
 800d4f0:	f1c2 0620 	rsb	r6, r2, #32
 800d4f4:	6843      	ldr	r3, [r0, #4]
 800d4f6:	6804      	ldr	r4, [r0, #0]
 800d4f8:	fa03 f506 	lsl.w	r5, r3, r6
 800d4fc:	432c      	orrs	r4, r5
 800d4fe:	40d3      	lsrs	r3, r2
 800d500:	6004      	str	r4, [r0, #0]
 800d502:	f840 3f04 	str.w	r3, [r0, #4]!
 800d506:	4288      	cmp	r0, r1
 800d508:	d3f4      	bcc.n	800d4f4 <L_shift+0xc>
 800d50a:	bd70      	pop	{r4, r5, r6, pc}

0800d50c <__match>:
 800d50c:	b530      	push	{r4, r5, lr}
 800d50e:	6803      	ldr	r3, [r0, #0]
 800d510:	3301      	adds	r3, #1
 800d512:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d516:	b914      	cbnz	r4, 800d51e <__match+0x12>
 800d518:	6003      	str	r3, [r0, #0]
 800d51a:	2001      	movs	r0, #1
 800d51c:	bd30      	pop	{r4, r5, pc}
 800d51e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d522:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d526:	2d19      	cmp	r5, #25
 800d528:	bf98      	it	ls
 800d52a:	3220      	addls	r2, #32
 800d52c:	42a2      	cmp	r2, r4
 800d52e:	d0f0      	beq.n	800d512 <__match+0x6>
 800d530:	2000      	movs	r0, #0
 800d532:	e7f3      	b.n	800d51c <__match+0x10>

0800d534 <__hexnan>:
 800d534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d538:	680b      	ldr	r3, [r1, #0]
 800d53a:	6801      	ldr	r1, [r0, #0]
 800d53c:	115e      	asrs	r6, r3, #5
 800d53e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d542:	f013 031f 	ands.w	r3, r3, #31
 800d546:	b087      	sub	sp, #28
 800d548:	bf18      	it	ne
 800d54a:	3604      	addne	r6, #4
 800d54c:	2500      	movs	r5, #0
 800d54e:	1f37      	subs	r7, r6, #4
 800d550:	4682      	mov	sl, r0
 800d552:	4690      	mov	r8, r2
 800d554:	9301      	str	r3, [sp, #4]
 800d556:	f846 5c04 	str.w	r5, [r6, #-4]
 800d55a:	46b9      	mov	r9, r7
 800d55c:	463c      	mov	r4, r7
 800d55e:	9502      	str	r5, [sp, #8]
 800d560:	46ab      	mov	fp, r5
 800d562:	784a      	ldrb	r2, [r1, #1]
 800d564:	1c4b      	adds	r3, r1, #1
 800d566:	9303      	str	r3, [sp, #12]
 800d568:	b342      	cbz	r2, 800d5bc <__hexnan+0x88>
 800d56a:	4610      	mov	r0, r2
 800d56c:	9105      	str	r1, [sp, #20]
 800d56e:	9204      	str	r2, [sp, #16]
 800d570:	f7ff fd94 	bl	800d09c <__hexdig_fun>
 800d574:	2800      	cmp	r0, #0
 800d576:	d151      	bne.n	800d61c <__hexnan+0xe8>
 800d578:	9a04      	ldr	r2, [sp, #16]
 800d57a:	9905      	ldr	r1, [sp, #20]
 800d57c:	2a20      	cmp	r2, #32
 800d57e:	d818      	bhi.n	800d5b2 <__hexnan+0x7e>
 800d580:	9b02      	ldr	r3, [sp, #8]
 800d582:	459b      	cmp	fp, r3
 800d584:	dd13      	ble.n	800d5ae <__hexnan+0x7a>
 800d586:	454c      	cmp	r4, r9
 800d588:	d206      	bcs.n	800d598 <__hexnan+0x64>
 800d58a:	2d07      	cmp	r5, #7
 800d58c:	dc04      	bgt.n	800d598 <__hexnan+0x64>
 800d58e:	462a      	mov	r2, r5
 800d590:	4649      	mov	r1, r9
 800d592:	4620      	mov	r0, r4
 800d594:	f7ff ffa8 	bl	800d4e8 <L_shift>
 800d598:	4544      	cmp	r4, r8
 800d59a:	d952      	bls.n	800d642 <__hexnan+0x10e>
 800d59c:	2300      	movs	r3, #0
 800d59e:	f1a4 0904 	sub.w	r9, r4, #4
 800d5a2:	f844 3c04 	str.w	r3, [r4, #-4]
 800d5a6:	f8cd b008 	str.w	fp, [sp, #8]
 800d5aa:	464c      	mov	r4, r9
 800d5ac:	461d      	mov	r5, r3
 800d5ae:	9903      	ldr	r1, [sp, #12]
 800d5b0:	e7d7      	b.n	800d562 <__hexnan+0x2e>
 800d5b2:	2a29      	cmp	r2, #41	@ 0x29
 800d5b4:	d157      	bne.n	800d666 <__hexnan+0x132>
 800d5b6:	3102      	adds	r1, #2
 800d5b8:	f8ca 1000 	str.w	r1, [sl]
 800d5bc:	f1bb 0f00 	cmp.w	fp, #0
 800d5c0:	d051      	beq.n	800d666 <__hexnan+0x132>
 800d5c2:	454c      	cmp	r4, r9
 800d5c4:	d206      	bcs.n	800d5d4 <__hexnan+0xa0>
 800d5c6:	2d07      	cmp	r5, #7
 800d5c8:	dc04      	bgt.n	800d5d4 <__hexnan+0xa0>
 800d5ca:	462a      	mov	r2, r5
 800d5cc:	4649      	mov	r1, r9
 800d5ce:	4620      	mov	r0, r4
 800d5d0:	f7ff ff8a 	bl	800d4e8 <L_shift>
 800d5d4:	4544      	cmp	r4, r8
 800d5d6:	d936      	bls.n	800d646 <__hexnan+0x112>
 800d5d8:	f1a8 0204 	sub.w	r2, r8, #4
 800d5dc:	4623      	mov	r3, r4
 800d5de:	f853 1b04 	ldr.w	r1, [r3], #4
 800d5e2:	f842 1f04 	str.w	r1, [r2, #4]!
 800d5e6:	429f      	cmp	r7, r3
 800d5e8:	d2f9      	bcs.n	800d5de <__hexnan+0xaa>
 800d5ea:	1b3b      	subs	r3, r7, r4
 800d5ec:	f023 0303 	bic.w	r3, r3, #3
 800d5f0:	3304      	adds	r3, #4
 800d5f2:	3401      	adds	r4, #1
 800d5f4:	3e03      	subs	r6, #3
 800d5f6:	42b4      	cmp	r4, r6
 800d5f8:	bf88      	it	hi
 800d5fa:	2304      	movhi	r3, #4
 800d5fc:	4443      	add	r3, r8
 800d5fe:	2200      	movs	r2, #0
 800d600:	f843 2b04 	str.w	r2, [r3], #4
 800d604:	429f      	cmp	r7, r3
 800d606:	d2fb      	bcs.n	800d600 <__hexnan+0xcc>
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	b91b      	cbnz	r3, 800d614 <__hexnan+0xe0>
 800d60c:	4547      	cmp	r7, r8
 800d60e:	d128      	bne.n	800d662 <__hexnan+0x12e>
 800d610:	2301      	movs	r3, #1
 800d612:	603b      	str	r3, [r7, #0]
 800d614:	2005      	movs	r0, #5
 800d616:	b007      	add	sp, #28
 800d618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d61c:	3501      	adds	r5, #1
 800d61e:	2d08      	cmp	r5, #8
 800d620:	f10b 0b01 	add.w	fp, fp, #1
 800d624:	dd06      	ble.n	800d634 <__hexnan+0x100>
 800d626:	4544      	cmp	r4, r8
 800d628:	d9c1      	bls.n	800d5ae <__hexnan+0x7a>
 800d62a:	2300      	movs	r3, #0
 800d62c:	f844 3c04 	str.w	r3, [r4, #-4]
 800d630:	2501      	movs	r5, #1
 800d632:	3c04      	subs	r4, #4
 800d634:	6822      	ldr	r2, [r4, #0]
 800d636:	f000 000f 	and.w	r0, r0, #15
 800d63a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d63e:	6020      	str	r0, [r4, #0]
 800d640:	e7b5      	b.n	800d5ae <__hexnan+0x7a>
 800d642:	2508      	movs	r5, #8
 800d644:	e7b3      	b.n	800d5ae <__hexnan+0x7a>
 800d646:	9b01      	ldr	r3, [sp, #4]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d0dd      	beq.n	800d608 <__hexnan+0xd4>
 800d64c:	f1c3 0320 	rsb	r3, r3, #32
 800d650:	f04f 32ff 	mov.w	r2, #4294967295
 800d654:	40da      	lsrs	r2, r3
 800d656:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d65a:	4013      	ands	r3, r2
 800d65c:	f846 3c04 	str.w	r3, [r6, #-4]
 800d660:	e7d2      	b.n	800d608 <__hexnan+0xd4>
 800d662:	3f04      	subs	r7, #4
 800d664:	e7d0      	b.n	800d608 <__hexnan+0xd4>
 800d666:	2004      	movs	r0, #4
 800d668:	e7d5      	b.n	800d616 <__hexnan+0xe2>

0800d66a <__ascii_mbtowc>:
 800d66a:	b082      	sub	sp, #8
 800d66c:	b901      	cbnz	r1, 800d670 <__ascii_mbtowc+0x6>
 800d66e:	a901      	add	r1, sp, #4
 800d670:	b142      	cbz	r2, 800d684 <__ascii_mbtowc+0x1a>
 800d672:	b14b      	cbz	r3, 800d688 <__ascii_mbtowc+0x1e>
 800d674:	7813      	ldrb	r3, [r2, #0]
 800d676:	600b      	str	r3, [r1, #0]
 800d678:	7812      	ldrb	r2, [r2, #0]
 800d67a:	1e10      	subs	r0, r2, #0
 800d67c:	bf18      	it	ne
 800d67e:	2001      	movne	r0, #1
 800d680:	b002      	add	sp, #8
 800d682:	4770      	bx	lr
 800d684:	4610      	mov	r0, r2
 800d686:	e7fb      	b.n	800d680 <__ascii_mbtowc+0x16>
 800d688:	f06f 0001 	mvn.w	r0, #1
 800d68c:	e7f8      	b.n	800d680 <__ascii_mbtowc+0x16>
	...

0800d690 <_Balloc>:
 800d690:	b570      	push	{r4, r5, r6, lr}
 800d692:	69c6      	ldr	r6, [r0, #28]
 800d694:	4604      	mov	r4, r0
 800d696:	460d      	mov	r5, r1
 800d698:	b976      	cbnz	r6, 800d6b8 <_Balloc+0x28>
 800d69a:	2010      	movs	r0, #16
 800d69c:	f7fe fb8e 	bl	800bdbc <malloc>
 800d6a0:	4602      	mov	r2, r0
 800d6a2:	61e0      	str	r0, [r4, #28]
 800d6a4:	b920      	cbnz	r0, 800d6b0 <_Balloc+0x20>
 800d6a6:	4b18      	ldr	r3, [pc, #96]	@ (800d708 <_Balloc+0x78>)
 800d6a8:	4818      	ldr	r0, [pc, #96]	@ (800d70c <_Balloc+0x7c>)
 800d6aa:	216b      	movs	r1, #107	@ 0x6b
 800d6ac:	f000 fede 	bl	800e46c <__assert_func>
 800d6b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6b4:	6006      	str	r6, [r0, #0]
 800d6b6:	60c6      	str	r6, [r0, #12]
 800d6b8:	69e6      	ldr	r6, [r4, #28]
 800d6ba:	68f3      	ldr	r3, [r6, #12]
 800d6bc:	b183      	cbz	r3, 800d6e0 <_Balloc+0x50>
 800d6be:	69e3      	ldr	r3, [r4, #28]
 800d6c0:	68db      	ldr	r3, [r3, #12]
 800d6c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d6c6:	b9b8      	cbnz	r0, 800d6f8 <_Balloc+0x68>
 800d6c8:	2101      	movs	r1, #1
 800d6ca:	fa01 f605 	lsl.w	r6, r1, r5
 800d6ce:	1d72      	adds	r2, r6, #5
 800d6d0:	0092      	lsls	r2, r2, #2
 800d6d2:	4620      	mov	r0, r4
 800d6d4:	f000 fee8 	bl	800e4a8 <_calloc_r>
 800d6d8:	b160      	cbz	r0, 800d6f4 <_Balloc+0x64>
 800d6da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d6de:	e00e      	b.n	800d6fe <_Balloc+0x6e>
 800d6e0:	2221      	movs	r2, #33	@ 0x21
 800d6e2:	2104      	movs	r1, #4
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	f000 fedf 	bl	800e4a8 <_calloc_r>
 800d6ea:	69e3      	ldr	r3, [r4, #28]
 800d6ec:	60f0      	str	r0, [r6, #12]
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d1e4      	bne.n	800d6be <_Balloc+0x2e>
 800d6f4:	2000      	movs	r0, #0
 800d6f6:	bd70      	pop	{r4, r5, r6, pc}
 800d6f8:	6802      	ldr	r2, [r0, #0]
 800d6fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d6fe:	2300      	movs	r3, #0
 800d700:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d704:	e7f7      	b.n	800d6f6 <_Balloc+0x66>
 800d706:	bf00      	nop
 800d708:	0800eb9d 	.word	0x0800eb9d
 800d70c:	0800ebb4 	.word	0x0800ebb4

0800d710 <_Bfree>:
 800d710:	b570      	push	{r4, r5, r6, lr}
 800d712:	69c6      	ldr	r6, [r0, #28]
 800d714:	4605      	mov	r5, r0
 800d716:	460c      	mov	r4, r1
 800d718:	b976      	cbnz	r6, 800d738 <_Bfree+0x28>
 800d71a:	2010      	movs	r0, #16
 800d71c:	f7fe fb4e 	bl	800bdbc <malloc>
 800d720:	4602      	mov	r2, r0
 800d722:	61e8      	str	r0, [r5, #28]
 800d724:	b920      	cbnz	r0, 800d730 <_Bfree+0x20>
 800d726:	4b09      	ldr	r3, [pc, #36]	@ (800d74c <_Bfree+0x3c>)
 800d728:	4809      	ldr	r0, [pc, #36]	@ (800d750 <_Bfree+0x40>)
 800d72a:	218f      	movs	r1, #143	@ 0x8f
 800d72c:	f000 fe9e 	bl	800e46c <__assert_func>
 800d730:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d734:	6006      	str	r6, [r0, #0]
 800d736:	60c6      	str	r6, [r0, #12]
 800d738:	b13c      	cbz	r4, 800d74a <_Bfree+0x3a>
 800d73a:	69eb      	ldr	r3, [r5, #28]
 800d73c:	6862      	ldr	r2, [r4, #4]
 800d73e:	68db      	ldr	r3, [r3, #12]
 800d740:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d744:	6021      	str	r1, [r4, #0]
 800d746:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d74a:	bd70      	pop	{r4, r5, r6, pc}
 800d74c:	0800eb9d 	.word	0x0800eb9d
 800d750:	0800ebb4 	.word	0x0800ebb4

0800d754 <__multadd>:
 800d754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d758:	690d      	ldr	r5, [r1, #16]
 800d75a:	4607      	mov	r7, r0
 800d75c:	460c      	mov	r4, r1
 800d75e:	461e      	mov	r6, r3
 800d760:	f101 0c14 	add.w	ip, r1, #20
 800d764:	2000      	movs	r0, #0
 800d766:	f8dc 3000 	ldr.w	r3, [ip]
 800d76a:	b299      	uxth	r1, r3
 800d76c:	fb02 6101 	mla	r1, r2, r1, r6
 800d770:	0c1e      	lsrs	r6, r3, #16
 800d772:	0c0b      	lsrs	r3, r1, #16
 800d774:	fb02 3306 	mla	r3, r2, r6, r3
 800d778:	b289      	uxth	r1, r1
 800d77a:	3001      	adds	r0, #1
 800d77c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d780:	4285      	cmp	r5, r0
 800d782:	f84c 1b04 	str.w	r1, [ip], #4
 800d786:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d78a:	dcec      	bgt.n	800d766 <__multadd+0x12>
 800d78c:	b30e      	cbz	r6, 800d7d2 <__multadd+0x7e>
 800d78e:	68a3      	ldr	r3, [r4, #8]
 800d790:	42ab      	cmp	r3, r5
 800d792:	dc19      	bgt.n	800d7c8 <__multadd+0x74>
 800d794:	6861      	ldr	r1, [r4, #4]
 800d796:	4638      	mov	r0, r7
 800d798:	3101      	adds	r1, #1
 800d79a:	f7ff ff79 	bl	800d690 <_Balloc>
 800d79e:	4680      	mov	r8, r0
 800d7a0:	b928      	cbnz	r0, 800d7ae <__multadd+0x5a>
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	4b0c      	ldr	r3, [pc, #48]	@ (800d7d8 <__multadd+0x84>)
 800d7a6:	480d      	ldr	r0, [pc, #52]	@ (800d7dc <__multadd+0x88>)
 800d7a8:	21ba      	movs	r1, #186	@ 0xba
 800d7aa:	f000 fe5f 	bl	800e46c <__assert_func>
 800d7ae:	6922      	ldr	r2, [r4, #16]
 800d7b0:	3202      	adds	r2, #2
 800d7b2:	f104 010c 	add.w	r1, r4, #12
 800d7b6:	0092      	lsls	r2, r2, #2
 800d7b8:	300c      	adds	r0, #12
 800d7ba:	f7ff fbc4 	bl	800cf46 <memcpy>
 800d7be:	4621      	mov	r1, r4
 800d7c0:	4638      	mov	r0, r7
 800d7c2:	f7ff ffa5 	bl	800d710 <_Bfree>
 800d7c6:	4644      	mov	r4, r8
 800d7c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d7cc:	3501      	adds	r5, #1
 800d7ce:	615e      	str	r6, [r3, #20]
 800d7d0:	6125      	str	r5, [r4, #16]
 800d7d2:	4620      	mov	r0, r4
 800d7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7d8:	0800eb2c 	.word	0x0800eb2c
 800d7dc:	0800ebb4 	.word	0x0800ebb4

0800d7e0 <__s2b>:
 800d7e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7e4:	460c      	mov	r4, r1
 800d7e6:	4615      	mov	r5, r2
 800d7e8:	461f      	mov	r7, r3
 800d7ea:	2209      	movs	r2, #9
 800d7ec:	3308      	adds	r3, #8
 800d7ee:	4606      	mov	r6, r0
 800d7f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800d7f4:	2100      	movs	r1, #0
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	db09      	blt.n	800d810 <__s2b+0x30>
 800d7fc:	4630      	mov	r0, r6
 800d7fe:	f7ff ff47 	bl	800d690 <_Balloc>
 800d802:	b940      	cbnz	r0, 800d816 <__s2b+0x36>
 800d804:	4602      	mov	r2, r0
 800d806:	4b19      	ldr	r3, [pc, #100]	@ (800d86c <__s2b+0x8c>)
 800d808:	4819      	ldr	r0, [pc, #100]	@ (800d870 <__s2b+0x90>)
 800d80a:	21d3      	movs	r1, #211	@ 0xd3
 800d80c:	f000 fe2e 	bl	800e46c <__assert_func>
 800d810:	0052      	lsls	r2, r2, #1
 800d812:	3101      	adds	r1, #1
 800d814:	e7f0      	b.n	800d7f8 <__s2b+0x18>
 800d816:	9b08      	ldr	r3, [sp, #32]
 800d818:	6143      	str	r3, [r0, #20]
 800d81a:	2d09      	cmp	r5, #9
 800d81c:	f04f 0301 	mov.w	r3, #1
 800d820:	6103      	str	r3, [r0, #16]
 800d822:	dd16      	ble.n	800d852 <__s2b+0x72>
 800d824:	f104 0909 	add.w	r9, r4, #9
 800d828:	46c8      	mov	r8, r9
 800d82a:	442c      	add	r4, r5
 800d82c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d830:	4601      	mov	r1, r0
 800d832:	3b30      	subs	r3, #48	@ 0x30
 800d834:	220a      	movs	r2, #10
 800d836:	4630      	mov	r0, r6
 800d838:	f7ff ff8c 	bl	800d754 <__multadd>
 800d83c:	45a0      	cmp	r8, r4
 800d83e:	d1f5      	bne.n	800d82c <__s2b+0x4c>
 800d840:	f1a5 0408 	sub.w	r4, r5, #8
 800d844:	444c      	add	r4, r9
 800d846:	1b2d      	subs	r5, r5, r4
 800d848:	1963      	adds	r3, r4, r5
 800d84a:	42bb      	cmp	r3, r7
 800d84c:	db04      	blt.n	800d858 <__s2b+0x78>
 800d84e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d852:	340a      	adds	r4, #10
 800d854:	2509      	movs	r5, #9
 800d856:	e7f6      	b.n	800d846 <__s2b+0x66>
 800d858:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d85c:	4601      	mov	r1, r0
 800d85e:	3b30      	subs	r3, #48	@ 0x30
 800d860:	220a      	movs	r2, #10
 800d862:	4630      	mov	r0, r6
 800d864:	f7ff ff76 	bl	800d754 <__multadd>
 800d868:	e7ee      	b.n	800d848 <__s2b+0x68>
 800d86a:	bf00      	nop
 800d86c:	0800eb2c 	.word	0x0800eb2c
 800d870:	0800ebb4 	.word	0x0800ebb4

0800d874 <__hi0bits>:
 800d874:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d878:	4603      	mov	r3, r0
 800d87a:	bf36      	itet	cc
 800d87c:	0403      	lslcc	r3, r0, #16
 800d87e:	2000      	movcs	r0, #0
 800d880:	2010      	movcc	r0, #16
 800d882:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d886:	bf3c      	itt	cc
 800d888:	021b      	lslcc	r3, r3, #8
 800d88a:	3008      	addcc	r0, #8
 800d88c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d890:	bf3c      	itt	cc
 800d892:	011b      	lslcc	r3, r3, #4
 800d894:	3004      	addcc	r0, #4
 800d896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d89a:	bf3c      	itt	cc
 800d89c:	009b      	lslcc	r3, r3, #2
 800d89e:	3002      	addcc	r0, #2
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	db05      	blt.n	800d8b0 <__hi0bits+0x3c>
 800d8a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d8a8:	f100 0001 	add.w	r0, r0, #1
 800d8ac:	bf08      	it	eq
 800d8ae:	2020      	moveq	r0, #32
 800d8b0:	4770      	bx	lr

0800d8b2 <__lo0bits>:
 800d8b2:	6803      	ldr	r3, [r0, #0]
 800d8b4:	4602      	mov	r2, r0
 800d8b6:	f013 0007 	ands.w	r0, r3, #7
 800d8ba:	d00b      	beq.n	800d8d4 <__lo0bits+0x22>
 800d8bc:	07d9      	lsls	r1, r3, #31
 800d8be:	d421      	bmi.n	800d904 <__lo0bits+0x52>
 800d8c0:	0798      	lsls	r0, r3, #30
 800d8c2:	bf49      	itett	mi
 800d8c4:	085b      	lsrmi	r3, r3, #1
 800d8c6:	089b      	lsrpl	r3, r3, #2
 800d8c8:	2001      	movmi	r0, #1
 800d8ca:	6013      	strmi	r3, [r2, #0]
 800d8cc:	bf5c      	itt	pl
 800d8ce:	6013      	strpl	r3, [r2, #0]
 800d8d0:	2002      	movpl	r0, #2
 800d8d2:	4770      	bx	lr
 800d8d4:	b299      	uxth	r1, r3
 800d8d6:	b909      	cbnz	r1, 800d8dc <__lo0bits+0x2a>
 800d8d8:	0c1b      	lsrs	r3, r3, #16
 800d8da:	2010      	movs	r0, #16
 800d8dc:	b2d9      	uxtb	r1, r3
 800d8de:	b909      	cbnz	r1, 800d8e4 <__lo0bits+0x32>
 800d8e0:	3008      	adds	r0, #8
 800d8e2:	0a1b      	lsrs	r3, r3, #8
 800d8e4:	0719      	lsls	r1, r3, #28
 800d8e6:	bf04      	itt	eq
 800d8e8:	091b      	lsreq	r3, r3, #4
 800d8ea:	3004      	addeq	r0, #4
 800d8ec:	0799      	lsls	r1, r3, #30
 800d8ee:	bf04      	itt	eq
 800d8f0:	089b      	lsreq	r3, r3, #2
 800d8f2:	3002      	addeq	r0, #2
 800d8f4:	07d9      	lsls	r1, r3, #31
 800d8f6:	d403      	bmi.n	800d900 <__lo0bits+0x4e>
 800d8f8:	085b      	lsrs	r3, r3, #1
 800d8fa:	f100 0001 	add.w	r0, r0, #1
 800d8fe:	d003      	beq.n	800d908 <__lo0bits+0x56>
 800d900:	6013      	str	r3, [r2, #0]
 800d902:	4770      	bx	lr
 800d904:	2000      	movs	r0, #0
 800d906:	4770      	bx	lr
 800d908:	2020      	movs	r0, #32
 800d90a:	4770      	bx	lr

0800d90c <__i2b>:
 800d90c:	b510      	push	{r4, lr}
 800d90e:	460c      	mov	r4, r1
 800d910:	2101      	movs	r1, #1
 800d912:	f7ff febd 	bl	800d690 <_Balloc>
 800d916:	4602      	mov	r2, r0
 800d918:	b928      	cbnz	r0, 800d926 <__i2b+0x1a>
 800d91a:	4b05      	ldr	r3, [pc, #20]	@ (800d930 <__i2b+0x24>)
 800d91c:	4805      	ldr	r0, [pc, #20]	@ (800d934 <__i2b+0x28>)
 800d91e:	f240 1145 	movw	r1, #325	@ 0x145
 800d922:	f000 fda3 	bl	800e46c <__assert_func>
 800d926:	2301      	movs	r3, #1
 800d928:	6144      	str	r4, [r0, #20]
 800d92a:	6103      	str	r3, [r0, #16]
 800d92c:	bd10      	pop	{r4, pc}
 800d92e:	bf00      	nop
 800d930:	0800eb2c 	.word	0x0800eb2c
 800d934:	0800ebb4 	.word	0x0800ebb4

0800d938 <__multiply>:
 800d938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d93c:	4617      	mov	r7, r2
 800d93e:	690a      	ldr	r2, [r1, #16]
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	429a      	cmp	r2, r3
 800d944:	bfa8      	it	ge
 800d946:	463b      	movge	r3, r7
 800d948:	4689      	mov	r9, r1
 800d94a:	bfa4      	itt	ge
 800d94c:	460f      	movge	r7, r1
 800d94e:	4699      	movge	r9, r3
 800d950:	693d      	ldr	r5, [r7, #16]
 800d952:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	6879      	ldr	r1, [r7, #4]
 800d95a:	eb05 060a 	add.w	r6, r5, sl
 800d95e:	42b3      	cmp	r3, r6
 800d960:	b085      	sub	sp, #20
 800d962:	bfb8      	it	lt
 800d964:	3101      	addlt	r1, #1
 800d966:	f7ff fe93 	bl	800d690 <_Balloc>
 800d96a:	b930      	cbnz	r0, 800d97a <__multiply+0x42>
 800d96c:	4602      	mov	r2, r0
 800d96e:	4b41      	ldr	r3, [pc, #260]	@ (800da74 <__multiply+0x13c>)
 800d970:	4841      	ldr	r0, [pc, #260]	@ (800da78 <__multiply+0x140>)
 800d972:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d976:	f000 fd79 	bl	800e46c <__assert_func>
 800d97a:	f100 0414 	add.w	r4, r0, #20
 800d97e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d982:	4623      	mov	r3, r4
 800d984:	2200      	movs	r2, #0
 800d986:	4573      	cmp	r3, lr
 800d988:	d320      	bcc.n	800d9cc <__multiply+0x94>
 800d98a:	f107 0814 	add.w	r8, r7, #20
 800d98e:	f109 0114 	add.w	r1, r9, #20
 800d992:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d996:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d99a:	9302      	str	r3, [sp, #8]
 800d99c:	1beb      	subs	r3, r5, r7
 800d99e:	3b15      	subs	r3, #21
 800d9a0:	f023 0303 	bic.w	r3, r3, #3
 800d9a4:	3304      	adds	r3, #4
 800d9a6:	3715      	adds	r7, #21
 800d9a8:	42bd      	cmp	r5, r7
 800d9aa:	bf38      	it	cc
 800d9ac:	2304      	movcc	r3, #4
 800d9ae:	9301      	str	r3, [sp, #4]
 800d9b0:	9b02      	ldr	r3, [sp, #8]
 800d9b2:	9103      	str	r1, [sp, #12]
 800d9b4:	428b      	cmp	r3, r1
 800d9b6:	d80c      	bhi.n	800d9d2 <__multiply+0x9a>
 800d9b8:	2e00      	cmp	r6, #0
 800d9ba:	dd03      	ble.n	800d9c4 <__multiply+0x8c>
 800d9bc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d055      	beq.n	800da70 <__multiply+0x138>
 800d9c4:	6106      	str	r6, [r0, #16]
 800d9c6:	b005      	add	sp, #20
 800d9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9cc:	f843 2b04 	str.w	r2, [r3], #4
 800d9d0:	e7d9      	b.n	800d986 <__multiply+0x4e>
 800d9d2:	f8b1 a000 	ldrh.w	sl, [r1]
 800d9d6:	f1ba 0f00 	cmp.w	sl, #0
 800d9da:	d01f      	beq.n	800da1c <__multiply+0xe4>
 800d9dc:	46c4      	mov	ip, r8
 800d9de:	46a1      	mov	r9, r4
 800d9e0:	2700      	movs	r7, #0
 800d9e2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d9e6:	f8d9 3000 	ldr.w	r3, [r9]
 800d9ea:	fa1f fb82 	uxth.w	fp, r2
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	fb0a 330b 	mla	r3, sl, fp, r3
 800d9f4:	443b      	add	r3, r7
 800d9f6:	f8d9 7000 	ldr.w	r7, [r9]
 800d9fa:	0c12      	lsrs	r2, r2, #16
 800d9fc:	0c3f      	lsrs	r7, r7, #16
 800d9fe:	fb0a 7202 	mla	r2, sl, r2, r7
 800da02:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800da06:	b29b      	uxth	r3, r3
 800da08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da0c:	4565      	cmp	r5, ip
 800da0e:	f849 3b04 	str.w	r3, [r9], #4
 800da12:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800da16:	d8e4      	bhi.n	800d9e2 <__multiply+0xaa>
 800da18:	9b01      	ldr	r3, [sp, #4]
 800da1a:	50e7      	str	r7, [r4, r3]
 800da1c:	9b03      	ldr	r3, [sp, #12]
 800da1e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800da22:	3104      	adds	r1, #4
 800da24:	f1b9 0f00 	cmp.w	r9, #0
 800da28:	d020      	beq.n	800da6c <__multiply+0x134>
 800da2a:	6823      	ldr	r3, [r4, #0]
 800da2c:	4647      	mov	r7, r8
 800da2e:	46a4      	mov	ip, r4
 800da30:	f04f 0a00 	mov.w	sl, #0
 800da34:	f8b7 b000 	ldrh.w	fp, [r7]
 800da38:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800da3c:	fb09 220b 	mla	r2, r9, fp, r2
 800da40:	4452      	add	r2, sl
 800da42:	b29b      	uxth	r3, r3
 800da44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da48:	f84c 3b04 	str.w	r3, [ip], #4
 800da4c:	f857 3b04 	ldr.w	r3, [r7], #4
 800da50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da54:	f8bc 3000 	ldrh.w	r3, [ip]
 800da58:	fb09 330a 	mla	r3, r9, sl, r3
 800da5c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800da60:	42bd      	cmp	r5, r7
 800da62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da66:	d8e5      	bhi.n	800da34 <__multiply+0xfc>
 800da68:	9a01      	ldr	r2, [sp, #4]
 800da6a:	50a3      	str	r3, [r4, r2]
 800da6c:	3404      	adds	r4, #4
 800da6e:	e79f      	b.n	800d9b0 <__multiply+0x78>
 800da70:	3e01      	subs	r6, #1
 800da72:	e7a1      	b.n	800d9b8 <__multiply+0x80>
 800da74:	0800eb2c 	.word	0x0800eb2c
 800da78:	0800ebb4 	.word	0x0800ebb4

0800da7c <__pow5mult>:
 800da7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da80:	4615      	mov	r5, r2
 800da82:	f012 0203 	ands.w	r2, r2, #3
 800da86:	4607      	mov	r7, r0
 800da88:	460e      	mov	r6, r1
 800da8a:	d007      	beq.n	800da9c <__pow5mult+0x20>
 800da8c:	4c25      	ldr	r4, [pc, #148]	@ (800db24 <__pow5mult+0xa8>)
 800da8e:	3a01      	subs	r2, #1
 800da90:	2300      	movs	r3, #0
 800da92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da96:	f7ff fe5d 	bl	800d754 <__multadd>
 800da9a:	4606      	mov	r6, r0
 800da9c:	10ad      	asrs	r5, r5, #2
 800da9e:	d03d      	beq.n	800db1c <__pow5mult+0xa0>
 800daa0:	69fc      	ldr	r4, [r7, #28]
 800daa2:	b97c      	cbnz	r4, 800dac4 <__pow5mult+0x48>
 800daa4:	2010      	movs	r0, #16
 800daa6:	f7fe f989 	bl	800bdbc <malloc>
 800daaa:	4602      	mov	r2, r0
 800daac:	61f8      	str	r0, [r7, #28]
 800daae:	b928      	cbnz	r0, 800dabc <__pow5mult+0x40>
 800dab0:	4b1d      	ldr	r3, [pc, #116]	@ (800db28 <__pow5mult+0xac>)
 800dab2:	481e      	ldr	r0, [pc, #120]	@ (800db2c <__pow5mult+0xb0>)
 800dab4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dab8:	f000 fcd8 	bl	800e46c <__assert_func>
 800dabc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dac0:	6004      	str	r4, [r0, #0]
 800dac2:	60c4      	str	r4, [r0, #12]
 800dac4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dac8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dacc:	b94c      	cbnz	r4, 800dae2 <__pow5mult+0x66>
 800dace:	f240 2171 	movw	r1, #625	@ 0x271
 800dad2:	4638      	mov	r0, r7
 800dad4:	f7ff ff1a 	bl	800d90c <__i2b>
 800dad8:	2300      	movs	r3, #0
 800dada:	f8c8 0008 	str.w	r0, [r8, #8]
 800dade:	4604      	mov	r4, r0
 800dae0:	6003      	str	r3, [r0, #0]
 800dae2:	f04f 0900 	mov.w	r9, #0
 800dae6:	07eb      	lsls	r3, r5, #31
 800dae8:	d50a      	bpl.n	800db00 <__pow5mult+0x84>
 800daea:	4631      	mov	r1, r6
 800daec:	4622      	mov	r2, r4
 800daee:	4638      	mov	r0, r7
 800daf0:	f7ff ff22 	bl	800d938 <__multiply>
 800daf4:	4631      	mov	r1, r6
 800daf6:	4680      	mov	r8, r0
 800daf8:	4638      	mov	r0, r7
 800dafa:	f7ff fe09 	bl	800d710 <_Bfree>
 800dafe:	4646      	mov	r6, r8
 800db00:	106d      	asrs	r5, r5, #1
 800db02:	d00b      	beq.n	800db1c <__pow5mult+0xa0>
 800db04:	6820      	ldr	r0, [r4, #0]
 800db06:	b938      	cbnz	r0, 800db18 <__pow5mult+0x9c>
 800db08:	4622      	mov	r2, r4
 800db0a:	4621      	mov	r1, r4
 800db0c:	4638      	mov	r0, r7
 800db0e:	f7ff ff13 	bl	800d938 <__multiply>
 800db12:	6020      	str	r0, [r4, #0]
 800db14:	f8c0 9000 	str.w	r9, [r0]
 800db18:	4604      	mov	r4, r0
 800db1a:	e7e4      	b.n	800dae6 <__pow5mult+0x6a>
 800db1c:	4630      	mov	r0, r6
 800db1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db22:	bf00      	nop
 800db24:	0800f0f8 	.word	0x0800f0f8
 800db28:	0800eb9d 	.word	0x0800eb9d
 800db2c:	0800ebb4 	.word	0x0800ebb4

0800db30 <__lshift>:
 800db30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db34:	460c      	mov	r4, r1
 800db36:	6849      	ldr	r1, [r1, #4]
 800db38:	6923      	ldr	r3, [r4, #16]
 800db3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800db3e:	68a3      	ldr	r3, [r4, #8]
 800db40:	4607      	mov	r7, r0
 800db42:	4691      	mov	r9, r2
 800db44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800db48:	f108 0601 	add.w	r6, r8, #1
 800db4c:	42b3      	cmp	r3, r6
 800db4e:	db0b      	blt.n	800db68 <__lshift+0x38>
 800db50:	4638      	mov	r0, r7
 800db52:	f7ff fd9d 	bl	800d690 <_Balloc>
 800db56:	4605      	mov	r5, r0
 800db58:	b948      	cbnz	r0, 800db6e <__lshift+0x3e>
 800db5a:	4602      	mov	r2, r0
 800db5c:	4b28      	ldr	r3, [pc, #160]	@ (800dc00 <__lshift+0xd0>)
 800db5e:	4829      	ldr	r0, [pc, #164]	@ (800dc04 <__lshift+0xd4>)
 800db60:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800db64:	f000 fc82 	bl	800e46c <__assert_func>
 800db68:	3101      	adds	r1, #1
 800db6a:	005b      	lsls	r3, r3, #1
 800db6c:	e7ee      	b.n	800db4c <__lshift+0x1c>
 800db6e:	2300      	movs	r3, #0
 800db70:	f100 0114 	add.w	r1, r0, #20
 800db74:	f100 0210 	add.w	r2, r0, #16
 800db78:	4618      	mov	r0, r3
 800db7a:	4553      	cmp	r3, sl
 800db7c:	db33      	blt.n	800dbe6 <__lshift+0xb6>
 800db7e:	6920      	ldr	r0, [r4, #16]
 800db80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db84:	f104 0314 	add.w	r3, r4, #20
 800db88:	f019 091f 	ands.w	r9, r9, #31
 800db8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800db94:	d02b      	beq.n	800dbee <__lshift+0xbe>
 800db96:	f1c9 0e20 	rsb	lr, r9, #32
 800db9a:	468a      	mov	sl, r1
 800db9c:	2200      	movs	r2, #0
 800db9e:	6818      	ldr	r0, [r3, #0]
 800dba0:	fa00 f009 	lsl.w	r0, r0, r9
 800dba4:	4310      	orrs	r0, r2
 800dba6:	f84a 0b04 	str.w	r0, [sl], #4
 800dbaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbae:	459c      	cmp	ip, r3
 800dbb0:	fa22 f20e 	lsr.w	r2, r2, lr
 800dbb4:	d8f3      	bhi.n	800db9e <__lshift+0x6e>
 800dbb6:	ebac 0304 	sub.w	r3, ip, r4
 800dbba:	3b15      	subs	r3, #21
 800dbbc:	f023 0303 	bic.w	r3, r3, #3
 800dbc0:	3304      	adds	r3, #4
 800dbc2:	f104 0015 	add.w	r0, r4, #21
 800dbc6:	4560      	cmp	r0, ip
 800dbc8:	bf88      	it	hi
 800dbca:	2304      	movhi	r3, #4
 800dbcc:	50ca      	str	r2, [r1, r3]
 800dbce:	b10a      	cbz	r2, 800dbd4 <__lshift+0xa4>
 800dbd0:	f108 0602 	add.w	r6, r8, #2
 800dbd4:	3e01      	subs	r6, #1
 800dbd6:	4638      	mov	r0, r7
 800dbd8:	612e      	str	r6, [r5, #16]
 800dbda:	4621      	mov	r1, r4
 800dbdc:	f7ff fd98 	bl	800d710 <_Bfree>
 800dbe0:	4628      	mov	r0, r5
 800dbe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbe6:	f842 0f04 	str.w	r0, [r2, #4]!
 800dbea:	3301      	adds	r3, #1
 800dbec:	e7c5      	b.n	800db7a <__lshift+0x4a>
 800dbee:	3904      	subs	r1, #4
 800dbf0:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbf4:	f841 2f04 	str.w	r2, [r1, #4]!
 800dbf8:	459c      	cmp	ip, r3
 800dbfa:	d8f9      	bhi.n	800dbf0 <__lshift+0xc0>
 800dbfc:	e7ea      	b.n	800dbd4 <__lshift+0xa4>
 800dbfe:	bf00      	nop
 800dc00:	0800eb2c 	.word	0x0800eb2c
 800dc04:	0800ebb4 	.word	0x0800ebb4

0800dc08 <__mcmp>:
 800dc08:	690a      	ldr	r2, [r1, #16]
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	6900      	ldr	r0, [r0, #16]
 800dc0e:	1a80      	subs	r0, r0, r2
 800dc10:	b530      	push	{r4, r5, lr}
 800dc12:	d10e      	bne.n	800dc32 <__mcmp+0x2a>
 800dc14:	3314      	adds	r3, #20
 800dc16:	3114      	adds	r1, #20
 800dc18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dc1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dc20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dc24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dc28:	4295      	cmp	r5, r2
 800dc2a:	d003      	beq.n	800dc34 <__mcmp+0x2c>
 800dc2c:	d205      	bcs.n	800dc3a <__mcmp+0x32>
 800dc2e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc32:	bd30      	pop	{r4, r5, pc}
 800dc34:	42a3      	cmp	r3, r4
 800dc36:	d3f3      	bcc.n	800dc20 <__mcmp+0x18>
 800dc38:	e7fb      	b.n	800dc32 <__mcmp+0x2a>
 800dc3a:	2001      	movs	r0, #1
 800dc3c:	e7f9      	b.n	800dc32 <__mcmp+0x2a>
	...

0800dc40 <__mdiff>:
 800dc40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc44:	4689      	mov	r9, r1
 800dc46:	4606      	mov	r6, r0
 800dc48:	4611      	mov	r1, r2
 800dc4a:	4648      	mov	r0, r9
 800dc4c:	4614      	mov	r4, r2
 800dc4e:	f7ff ffdb 	bl	800dc08 <__mcmp>
 800dc52:	1e05      	subs	r5, r0, #0
 800dc54:	d112      	bne.n	800dc7c <__mdiff+0x3c>
 800dc56:	4629      	mov	r1, r5
 800dc58:	4630      	mov	r0, r6
 800dc5a:	f7ff fd19 	bl	800d690 <_Balloc>
 800dc5e:	4602      	mov	r2, r0
 800dc60:	b928      	cbnz	r0, 800dc6e <__mdiff+0x2e>
 800dc62:	4b3f      	ldr	r3, [pc, #252]	@ (800dd60 <__mdiff+0x120>)
 800dc64:	f240 2137 	movw	r1, #567	@ 0x237
 800dc68:	483e      	ldr	r0, [pc, #248]	@ (800dd64 <__mdiff+0x124>)
 800dc6a:	f000 fbff 	bl	800e46c <__assert_func>
 800dc6e:	2301      	movs	r3, #1
 800dc70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dc74:	4610      	mov	r0, r2
 800dc76:	b003      	add	sp, #12
 800dc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc7c:	bfbc      	itt	lt
 800dc7e:	464b      	movlt	r3, r9
 800dc80:	46a1      	movlt	r9, r4
 800dc82:	4630      	mov	r0, r6
 800dc84:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dc88:	bfba      	itte	lt
 800dc8a:	461c      	movlt	r4, r3
 800dc8c:	2501      	movlt	r5, #1
 800dc8e:	2500      	movge	r5, #0
 800dc90:	f7ff fcfe 	bl	800d690 <_Balloc>
 800dc94:	4602      	mov	r2, r0
 800dc96:	b918      	cbnz	r0, 800dca0 <__mdiff+0x60>
 800dc98:	4b31      	ldr	r3, [pc, #196]	@ (800dd60 <__mdiff+0x120>)
 800dc9a:	f240 2145 	movw	r1, #581	@ 0x245
 800dc9e:	e7e3      	b.n	800dc68 <__mdiff+0x28>
 800dca0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dca4:	6926      	ldr	r6, [r4, #16]
 800dca6:	60c5      	str	r5, [r0, #12]
 800dca8:	f109 0310 	add.w	r3, r9, #16
 800dcac:	f109 0514 	add.w	r5, r9, #20
 800dcb0:	f104 0e14 	add.w	lr, r4, #20
 800dcb4:	f100 0b14 	add.w	fp, r0, #20
 800dcb8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dcbc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dcc0:	9301      	str	r3, [sp, #4]
 800dcc2:	46d9      	mov	r9, fp
 800dcc4:	f04f 0c00 	mov.w	ip, #0
 800dcc8:	9b01      	ldr	r3, [sp, #4]
 800dcca:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dcce:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dcd2:	9301      	str	r3, [sp, #4]
 800dcd4:	fa1f f38a 	uxth.w	r3, sl
 800dcd8:	4619      	mov	r1, r3
 800dcda:	b283      	uxth	r3, r0
 800dcdc:	1acb      	subs	r3, r1, r3
 800dcde:	0c00      	lsrs	r0, r0, #16
 800dce0:	4463      	add	r3, ip
 800dce2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dce6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dcf0:	4576      	cmp	r6, lr
 800dcf2:	f849 3b04 	str.w	r3, [r9], #4
 800dcf6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dcfa:	d8e5      	bhi.n	800dcc8 <__mdiff+0x88>
 800dcfc:	1b33      	subs	r3, r6, r4
 800dcfe:	3b15      	subs	r3, #21
 800dd00:	f023 0303 	bic.w	r3, r3, #3
 800dd04:	3415      	adds	r4, #21
 800dd06:	3304      	adds	r3, #4
 800dd08:	42a6      	cmp	r6, r4
 800dd0a:	bf38      	it	cc
 800dd0c:	2304      	movcc	r3, #4
 800dd0e:	441d      	add	r5, r3
 800dd10:	445b      	add	r3, fp
 800dd12:	461e      	mov	r6, r3
 800dd14:	462c      	mov	r4, r5
 800dd16:	4544      	cmp	r4, r8
 800dd18:	d30e      	bcc.n	800dd38 <__mdiff+0xf8>
 800dd1a:	f108 0103 	add.w	r1, r8, #3
 800dd1e:	1b49      	subs	r1, r1, r5
 800dd20:	f021 0103 	bic.w	r1, r1, #3
 800dd24:	3d03      	subs	r5, #3
 800dd26:	45a8      	cmp	r8, r5
 800dd28:	bf38      	it	cc
 800dd2a:	2100      	movcc	r1, #0
 800dd2c:	440b      	add	r3, r1
 800dd2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dd32:	b191      	cbz	r1, 800dd5a <__mdiff+0x11a>
 800dd34:	6117      	str	r7, [r2, #16]
 800dd36:	e79d      	b.n	800dc74 <__mdiff+0x34>
 800dd38:	f854 1b04 	ldr.w	r1, [r4], #4
 800dd3c:	46e6      	mov	lr, ip
 800dd3e:	0c08      	lsrs	r0, r1, #16
 800dd40:	fa1c fc81 	uxtah	ip, ip, r1
 800dd44:	4471      	add	r1, lr
 800dd46:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dd4a:	b289      	uxth	r1, r1
 800dd4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dd50:	f846 1b04 	str.w	r1, [r6], #4
 800dd54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dd58:	e7dd      	b.n	800dd16 <__mdiff+0xd6>
 800dd5a:	3f01      	subs	r7, #1
 800dd5c:	e7e7      	b.n	800dd2e <__mdiff+0xee>
 800dd5e:	bf00      	nop
 800dd60:	0800eb2c 	.word	0x0800eb2c
 800dd64:	0800ebb4 	.word	0x0800ebb4

0800dd68 <__ulp>:
 800dd68:	b082      	sub	sp, #8
 800dd6a:	ed8d 0b00 	vstr	d0, [sp]
 800dd6e:	9a01      	ldr	r2, [sp, #4]
 800dd70:	4b0f      	ldr	r3, [pc, #60]	@ (800ddb0 <__ulp+0x48>)
 800dd72:	4013      	ands	r3, r2
 800dd74:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	dc08      	bgt.n	800dd8e <__ulp+0x26>
 800dd7c:	425b      	negs	r3, r3
 800dd7e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800dd82:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dd86:	da04      	bge.n	800dd92 <__ulp+0x2a>
 800dd88:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800dd8c:	4113      	asrs	r3, r2
 800dd8e:	2200      	movs	r2, #0
 800dd90:	e008      	b.n	800dda4 <__ulp+0x3c>
 800dd92:	f1a2 0314 	sub.w	r3, r2, #20
 800dd96:	2b1e      	cmp	r3, #30
 800dd98:	bfda      	itte	le
 800dd9a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800dd9e:	40da      	lsrle	r2, r3
 800dda0:	2201      	movgt	r2, #1
 800dda2:	2300      	movs	r3, #0
 800dda4:	4619      	mov	r1, r3
 800dda6:	4610      	mov	r0, r2
 800dda8:	ec41 0b10 	vmov	d0, r0, r1
 800ddac:	b002      	add	sp, #8
 800ddae:	4770      	bx	lr
 800ddb0:	7ff00000 	.word	0x7ff00000

0800ddb4 <__b2d>:
 800ddb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddb8:	6906      	ldr	r6, [r0, #16]
 800ddba:	f100 0814 	add.w	r8, r0, #20
 800ddbe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ddc2:	1f37      	subs	r7, r6, #4
 800ddc4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ddc8:	4610      	mov	r0, r2
 800ddca:	f7ff fd53 	bl	800d874 <__hi0bits>
 800ddce:	f1c0 0320 	rsb	r3, r0, #32
 800ddd2:	280a      	cmp	r0, #10
 800ddd4:	600b      	str	r3, [r1, #0]
 800ddd6:	491b      	ldr	r1, [pc, #108]	@ (800de44 <__b2d+0x90>)
 800ddd8:	dc15      	bgt.n	800de06 <__b2d+0x52>
 800ddda:	f1c0 0c0b 	rsb	ip, r0, #11
 800ddde:	fa22 f30c 	lsr.w	r3, r2, ip
 800dde2:	45b8      	cmp	r8, r7
 800dde4:	ea43 0501 	orr.w	r5, r3, r1
 800dde8:	bf34      	ite	cc
 800ddea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ddee:	2300      	movcs	r3, #0
 800ddf0:	3015      	adds	r0, #21
 800ddf2:	fa02 f000 	lsl.w	r0, r2, r0
 800ddf6:	fa23 f30c 	lsr.w	r3, r3, ip
 800ddfa:	4303      	orrs	r3, r0
 800ddfc:	461c      	mov	r4, r3
 800ddfe:	ec45 4b10 	vmov	d0, r4, r5
 800de02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de06:	45b8      	cmp	r8, r7
 800de08:	bf3a      	itte	cc
 800de0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800de0e:	f1a6 0708 	subcc.w	r7, r6, #8
 800de12:	2300      	movcs	r3, #0
 800de14:	380b      	subs	r0, #11
 800de16:	d012      	beq.n	800de3e <__b2d+0x8a>
 800de18:	f1c0 0120 	rsb	r1, r0, #32
 800de1c:	fa23 f401 	lsr.w	r4, r3, r1
 800de20:	4082      	lsls	r2, r0
 800de22:	4322      	orrs	r2, r4
 800de24:	4547      	cmp	r7, r8
 800de26:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800de2a:	bf8c      	ite	hi
 800de2c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800de30:	2200      	movls	r2, #0
 800de32:	4083      	lsls	r3, r0
 800de34:	40ca      	lsrs	r2, r1
 800de36:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800de3a:	4313      	orrs	r3, r2
 800de3c:	e7de      	b.n	800ddfc <__b2d+0x48>
 800de3e:	ea42 0501 	orr.w	r5, r2, r1
 800de42:	e7db      	b.n	800ddfc <__b2d+0x48>
 800de44:	3ff00000 	.word	0x3ff00000

0800de48 <__d2b>:
 800de48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800de4c:	460f      	mov	r7, r1
 800de4e:	2101      	movs	r1, #1
 800de50:	ec59 8b10 	vmov	r8, r9, d0
 800de54:	4616      	mov	r6, r2
 800de56:	f7ff fc1b 	bl	800d690 <_Balloc>
 800de5a:	4604      	mov	r4, r0
 800de5c:	b930      	cbnz	r0, 800de6c <__d2b+0x24>
 800de5e:	4602      	mov	r2, r0
 800de60:	4b23      	ldr	r3, [pc, #140]	@ (800def0 <__d2b+0xa8>)
 800de62:	4824      	ldr	r0, [pc, #144]	@ (800def4 <__d2b+0xac>)
 800de64:	f240 310f 	movw	r1, #783	@ 0x30f
 800de68:	f000 fb00 	bl	800e46c <__assert_func>
 800de6c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800de70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800de74:	b10d      	cbz	r5, 800de7a <__d2b+0x32>
 800de76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800de7a:	9301      	str	r3, [sp, #4]
 800de7c:	f1b8 0300 	subs.w	r3, r8, #0
 800de80:	d023      	beq.n	800deca <__d2b+0x82>
 800de82:	4668      	mov	r0, sp
 800de84:	9300      	str	r3, [sp, #0]
 800de86:	f7ff fd14 	bl	800d8b2 <__lo0bits>
 800de8a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800de8e:	b1d0      	cbz	r0, 800dec6 <__d2b+0x7e>
 800de90:	f1c0 0320 	rsb	r3, r0, #32
 800de94:	fa02 f303 	lsl.w	r3, r2, r3
 800de98:	430b      	orrs	r3, r1
 800de9a:	40c2      	lsrs	r2, r0
 800de9c:	6163      	str	r3, [r4, #20]
 800de9e:	9201      	str	r2, [sp, #4]
 800dea0:	9b01      	ldr	r3, [sp, #4]
 800dea2:	61a3      	str	r3, [r4, #24]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	bf0c      	ite	eq
 800dea8:	2201      	moveq	r2, #1
 800deaa:	2202      	movne	r2, #2
 800deac:	6122      	str	r2, [r4, #16]
 800deae:	b1a5      	cbz	r5, 800deda <__d2b+0x92>
 800deb0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800deb4:	4405      	add	r5, r0
 800deb6:	603d      	str	r5, [r7, #0]
 800deb8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800debc:	6030      	str	r0, [r6, #0]
 800debe:	4620      	mov	r0, r4
 800dec0:	b003      	add	sp, #12
 800dec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dec6:	6161      	str	r1, [r4, #20]
 800dec8:	e7ea      	b.n	800dea0 <__d2b+0x58>
 800deca:	a801      	add	r0, sp, #4
 800decc:	f7ff fcf1 	bl	800d8b2 <__lo0bits>
 800ded0:	9b01      	ldr	r3, [sp, #4]
 800ded2:	6163      	str	r3, [r4, #20]
 800ded4:	3020      	adds	r0, #32
 800ded6:	2201      	movs	r2, #1
 800ded8:	e7e8      	b.n	800deac <__d2b+0x64>
 800deda:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dede:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dee2:	6038      	str	r0, [r7, #0]
 800dee4:	6918      	ldr	r0, [r3, #16]
 800dee6:	f7ff fcc5 	bl	800d874 <__hi0bits>
 800deea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800deee:	e7e5      	b.n	800debc <__d2b+0x74>
 800def0:	0800eb2c 	.word	0x0800eb2c
 800def4:	0800ebb4 	.word	0x0800ebb4

0800def8 <__ratio>:
 800def8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800defc:	b085      	sub	sp, #20
 800defe:	e9cd 1000 	strd	r1, r0, [sp]
 800df02:	a902      	add	r1, sp, #8
 800df04:	f7ff ff56 	bl	800ddb4 <__b2d>
 800df08:	9800      	ldr	r0, [sp, #0]
 800df0a:	a903      	add	r1, sp, #12
 800df0c:	ec55 4b10 	vmov	r4, r5, d0
 800df10:	f7ff ff50 	bl	800ddb4 <__b2d>
 800df14:	9b01      	ldr	r3, [sp, #4]
 800df16:	6919      	ldr	r1, [r3, #16]
 800df18:	9b00      	ldr	r3, [sp, #0]
 800df1a:	691b      	ldr	r3, [r3, #16]
 800df1c:	1ac9      	subs	r1, r1, r3
 800df1e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800df22:	1a9b      	subs	r3, r3, r2
 800df24:	ec5b ab10 	vmov	sl, fp, d0
 800df28:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	bfce      	itee	gt
 800df30:	462a      	movgt	r2, r5
 800df32:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800df36:	465a      	movle	r2, fp
 800df38:	462f      	mov	r7, r5
 800df3a:	46d9      	mov	r9, fp
 800df3c:	bfcc      	ite	gt
 800df3e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800df42:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800df46:	464b      	mov	r3, r9
 800df48:	4652      	mov	r2, sl
 800df4a:	4620      	mov	r0, r4
 800df4c:	4639      	mov	r1, r7
 800df4e:	f7f2 fc95 	bl	800087c <__aeabi_ddiv>
 800df52:	ec41 0b10 	vmov	d0, r0, r1
 800df56:	b005      	add	sp, #20
 800df58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800df5c <__copybits>:
 800df5c:	3901      	subs	r1, #1
 800df5e:	b570      	push	{r4, r5, r6, lr}
 800df60:	1149      	asrs	r1, r1, #5
 800df62:	6914      	ldr	r4, [r2, #16]
 800df64:	3101      	adds	r1, #1
 800df66:	f102 0314 	add.w	r3, r2, #20
 800df6a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800df6e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800df72:	1f05      	subs	r5, r0, #4
 800df74:	42a3      	cmp	r3, r4
 800df76:	d30c      	bcc.n	800df92 <__copybits+0x36>
 800df78:	1aa3      	subs	r3, r4, r2
 800df7a:	3b11      	subs	r3, #17
 800df7c:	f023 0303 	bic.w	r3, r3, #3
 800df80:	3211      	adds	r2, #17
 800df82:	42a2      	cmp	r2, r4
 800df84:	bf88      	it	hi
 800df86:	2300      	movhi	r3, #0
 800df88:	4418      	add	r0, r3
 800df8a:	2300      	movs	r3, #0
 800df8c:	4288      	cmp	r0, r1
 800df8e:	d305      	bcc.n	800df9c <__copybits+0x40>
 800df90:	bd70      	pop	{r4, r5, r6, pc}
 800df92:	f853 6b04 	ldr.w	r6, [r3], #4
 800df96:	f845 6f04 	str.w	r6, [r5, #4]!
 800df9a:	e7eb      	b.n	800df74 <__copybits+0x18>
 800df9c:	f840 3b04 	str.w	r3, [r0], #4
 800dfa0:	e7f4      	b.n	800df8c <__copybits+0x30>

0800dfa2 <__any_on>:
 800dfa2:	f100 0214 	add.w	r2, r0, #20
 800dfa6:	6900      	ldr	r0, [r0, #16]
 800dfa8:	114b      	asrs	r3, r1, #5
 800dfaa:	4298      	cmp	r0, r3
 800dfac:	b510      	push	{r4, lr}
 800dfae:	db11      	blt.n	800dfd4 <__any_on+0x32>
 800dfb0:	dd0a      	ble.n	800dfc8 <__any_on+0x26>
 800dfb2:	f011 011f 	ands.w	r1, r1, #31
 800dfb6:	d007      	beq.n	800dfc8 <__any_on+0x26>
 800dfb8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dfbc:	fa24 f001 	lsr.w	r0, r4, r1
 800dfc0:	fa00 f101 	lsl.w	r1, r0, r1
 800dfc4:	428c      	cmp	r4, r1
 800dfc6:	d10b      	bne.n	800dfe0 <__any_on+0x3e>
 800dfc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d803      	bhi.n	800dfd8 <__any_on+0x36>
 800dfd0:	2000      	movs	r0, #0
 800dfd2:	bd10      	pop	{r4, pc}
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	e7f7      	b.n	800dfc8 <__any_on+0x26>
 800dfd8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dfdc:	2900      	cmp	r1, #0
 800dfde:	d0f5      	beq.n	800dfcc <__any_on+0x2a>
 800dfe0:	2001      	movs	r0, #1
 800dfe2:	e7f6      	b.n	800dfd2 <__any_on+0x30>

0800dfe4 <__ascii_wctomb>:
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	4608      	mov	r0, r1
 800dfe8:	b141      	cbz	r1, 800dffc <__ascii_wctomb+0x18>
 800dfea:	2aff      	cmp	r2, #255	@ 0xff
 800dfec:	d904      	bls.n	800dff8 <__ascii_wctomb+0x14>
 800dfee:	228a      	movs	r2, #138	@ 0x8a
 800dff0:	601a      	str	r2, [r3, #0]
 800dff2:	f04f 30ff 	mov.w	r0, #4294967295
 800dff6:	4770      	bx	lr
 800dff8:	700a      	strb	r2, [r1, #0]
 800dffa:	2001      	movs	r0, #1
 800dffc:	4770      	bx	lr

0800dffe <_printf_common>:
 800dffe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e002:	4616      	mov	r6, r2
 800e004:	4698      	mov	r8, r3
 800e006:	688a      	ldr	r2, [r1, #8]
 800e008:	690b      	ldr	r3, [r1, #16]
 800e00a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e00e:	4293      	cmp	r3, r2
 800e010:	bfb8      	it	lt
 800e012:	4613      	movlt	r3, r2
 800e014:	6033      	str	r3, [r6, #0]
 800e016:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e01a:	4607      	mov	r7, r0
 800e01c:	460c      	mov	r4, r1
 800e01e:	b10a      	cbz	r2, 800e024 <_printf_common+0x26>
 800e020:	3301      	adds	r3, #1
 800e022:	6033      	str	r3, [r6, #0]
 800e024:	6823      	ldr	r3, [r4, #0]
 800e026:	0699      	lsls	r1, r3, #26
 800e028:	bf42      	ittt	mi
 800e02a:	6833      	ldrmi	r3, [r6, #0]
 800e02c:	3302      	addmi	r3, #2
 800e02e:	6033      	strmi	r3, [r6, #0]
 800e030:	6825      	ldr	r5, [r4, #0]
 800e032:	f015 0506 	ands.w	r5, r5, #6
 800e036:	d106      	bne.n	800e046 <_printf_common+0x48>
 800e038:	f104 0a19 	add.w	sl, r4, #25
 800e03c:	68e3      	ldr	r3, [r4, #12]
 800e03e:	6832      	ldr	r2, [r6, #0]
 800e040:	1a9b      	subs	r3, r3, r2
 800e042:	42ab      	cmp	r3, r5
 800e044:	dc26      	bgt.n	800e094 <_printf_common+0x96>
 800e046:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e04a:	6822      	ldr	r2, [r4, #0]
 800e04c:	3b00      	subs	r3, #0
 800e04e:	bf18      	it	ne
 800e050:	2301      	movne	r3, #1
 800e052:	0692      	lsls	r2, r2, #26
 800e054:	d42b      	bmi.n	800e0ae <_printf_common+0xb0>
 800e056:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e05a:	4641      	mov	r1, r8
 800e05c:	4638      	mov	r0, r7
 800e05e:	47c8      	blx	r9
 800e060:	3001      	adds	r0, #1
 800e062:	d01e      	beq.n	800e0a2 <_printf_common+0xa4>
 800e064:	6823      	ldr	r3, [r4, #0]
 800e066:	6922      	ldr	r2, [r4, #16]
 800e068:	f003 0306 	and.w	r3, r3, #6
 800e06c:	2b04      	cmp	r3, #4
 800e06e:	bf02      	ittt	eq
 800e070:	68e5      	ldreq	r5, [r4, #12]
 800e072:	6833      	ldreq	r3, [r6, #0]
 800e074:	1aed      	subeq	r5, r5, r3
 800e076:	68a3      	ldr	r3, [r4, #8]
 800e078:	bf0c      	ite	eq
 800e07a:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e07e:	2500      	movne	r5, #0
 800e080:	4293      	cmp	r3, r2
 800e082:	bfc4      	itt	gt
 800e084:	1a9b      	subgt	r3, r3, r2
 800e086:	18ed      	addgt	r5, r5, r3
 800e088:	2600      	movs	r6, #0
 800e08a:	341a      	adds	r4, #26
 800e08c:	42b5      	cmp	r5, r6
 800e08e:	d11a      	bne.n	800e0c6 <_printf_common+0xc8>
 800e090:	2000      	movs	r0, #0
 800e092:	e008      	b.n	800e0a6 <_printf_common+0xa8>
 800e094:	2301      	movs	r3, #1
 800e096:	4652      	mov	r2, sl
 800e098:	4641      	mov	r1, r8
 800e09a:	4638      	mov	r0, r7
 800e09c:	47c8      	blx	r9
 800e09e:	3001      	adds	r0, #1
 800e0a0:	d103      	bne.n	800e0aa <_printf_common+0xac>
 800e0a2:	f04f 30ff 	mov.w	r0, #4294967295
 800e0a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0aa:	3501      	adds	r5, #1
 800e0ac:	e7c6      	b.n	800e03c <_printf_common+0x3e>
 800e0ae:	18e1      	adds	r1, r4, r3
 800e0b0:	1c5a      	adds	r2, r3, #1
 800e0b2:	2030      	movs	r0, #48	@ 0x30
 800e0b4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e0b8:	4422      	add	r2, r4
 800e0ba:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e0be:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e0c2:	3302      	adds	r3, #2
 800e0c4:	e7c7      	b.n	800e056 <_printf_common+0x58>
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	4622      	mov	r2, r4
 800e0ca:	4641      	mov	r1, r8
 800e0cc:	4638      	mov	r0, r7
 800e0ce:	47c8      	blx	r9
 800e0d0:	3001      	adds	r0, #1
 800e0d2:	d0e6      	beq.n	800e0a2 <_printf_common+0xa4>
 800e0d4:	3601      	adds	r6, #1
 800e0d6:	e7d9      	b.n	800e08c <_printf_common+0x8e>

0800e0d8 <_printf_i>:
 800e0d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e0dc:	7e0f      	ldrb	r7, [r1, #24]
 800e0de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e0e0:	2f78      	cmp	r7, #120	@ 0x78
 800e0e2:	4691      	mov	r9, r2
 800e0e4:	4680      	mov	r8, r0
 800e0e6:	460c      	mov	r4, r1
 800e0e8:	469a      	mov	sl, r3
 800e0ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e0ee:	d807      	bhi.n	800e100 <_printf_i+0x28>
 800e0f0:	2f62      	cmp	r7, #98	@ 0x62
 800e0f2:	d80a      	bhi.n	800e10a <_printf_i+0x32>
 800e0f4:	2f00      	cmp	r7, #0
 800e0f6:	f000 80d1 	beq.w	800e29c <_printf_i+0x1c4>
 800e0fa:	2f58      	cmp	r7, #88	@ 0x58
 800e0fc:	f000 80b8 	beq.w	800e270 <_printf_i+0x198>
 800e100:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e104:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e108:	e03a      	b.n	800e180 <_printf_i+0xa8>
 800e10a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e10e:	2b15      	cmp	r3, #21
 800e110:	d8f6      	bhi.n	800e100 <_printf_i+0x28>
 800e112:	a101      	add	r1, pc, #4	@ (adr r1, 800e118 <_printf_i+0x40>)
 800e114:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e118:	0800e171 	.word	0x0800e171
 800e11c:	0800e185 	.word	0x0800e185
 800e120:	0800e101 	.word	0x0800e101
 800e124:	0800e101 	.word	0x0800e101
 800e128:	0800e101 	.word	0x0800e101
 800e12c:	0800e101 	.word	0x0800e101
 800e130:	0800e185 	.word	0x0800e185
 800e134:	0800e101 	.word	0x0800e101
 800e138:	0800e101 	.word	0x0800e101
 800e13c:	0800e101 	.word	0x0800e101
 800e140:	0800e101 	.word	0x0800e101
 800e144:	0800e283 	.word	0x0800e283
 800e148:	0800e1af 	.word	0x0800e1af
 800e14c:	0800e23d 	.word	0x0800e23d
 800e150:	0800e101 	.word	0x0800e101
 800e154:	0800e101 	.word	0x0800e101
 800e158:	0800e2a5 	.word	0x0800e2a5
 800e15c:	0800e101 	.word	0x0800e101
 800e160:	0800e1af 	.word	0x0800e1af
 800e164:	0800e101 	.word	0x0800e101
 800e168:	0800e101 	.word	0x0800e101
 800e16c:	0800e245 	.word	0x0800e245
 800e170:	6833      	ldr	r3, [r6, #0]
 800e172:	1d1a      	adds	r2, r3, #4
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	6032      	str	r2, [r6, #0]
 800e178:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e17c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e180:	2301      	movs	r3, #1
 800e182:	e09c      	b.n	800e2be <_printf_i+0x1e6>
 800e184:	6833      	ldr	r3, [r6, #0]
 800e186:	6820      	ldr	r0, [r4, #0]
 800e188:	1d19      	adds	r1, r3, #4
 800e18a:	6031      	str	r1, [r6, #0]
 800e18c:	0606      	lsls	r6, r0, #24
 800e18e:	d501      	bpl.n	800e194 <_printf_i+0xbc>
 800e190:	681d      	ldr	r5, [r3, #0]
 800e192:	e003      	b.n	800e19c <_printf_i+0xc4>
 800e194:	0645      	lsls	r5, r0, #25
 800e196:	d5fb      	bpl.n	800e190 <_printf_i+0xb8>
 800e198:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e19c:	2d00      	cmp	r5, #0
 800e19e:	da03      	bge.n	800e1a8 <_printf_i+0xd0>
 800e1a0:	232d      	movs	r3, #45	@ 0x2d
 800e1a2:	426d      	negs	r5, r5
 800e1a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e1a8:	4858      	ldr	r0, [pc, #352]	@ (800e30c <_printf_i+0x234>)
 800e1aa:	230a      	movs	r3, #10
 800e1ac:	e011      	b.n	800e1d2 <_printf_i+0xfa>
 800e1ae:	6821      	ldr	r1, [r4, #0]
 800e1b0:	6833      	ldr	r3, [r6, #0]
 800e1b2:	0608      	lsls	r0, r1, #24
 800e1b4:	f853 5b04 	ldr.w	r5, [r3], #4
 800e1b8:	d402      	bmi.n	800e1c0 <_printf_i+0xe8>
 800e1ba:	0649      	lsls	r1, r1, #25
 800e1bc:	bf48      	it	mi
 800e1be:	b2ad      	uxthmi	r5, r5
 800e1c0:	2f6f      	cmp	r7, #111	@ 0x6f
 800e1c2:	4852      	ldr	r0, [pc, #328]	@ (800e30c <_printf_i+0x234>)
 800e1c4:	6033      	str	r3, [r6, #0]
 800e1c6:	bf14      	ite	ne
 800e1c8:	230a      	movne	r3, #10
 800e1ca:	2308      	moveq	r3, #8
 800e1cc:	2100      	movs	r1, #0
 800e1ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e1d2:	6866      	ldr	r6, [r4, #4]
 800e1d4:	60a6      	str	r6, [r4, #8]
 800e1d6:	2e00      	cmp	r6, #0
 800e1d8:	db05      	blt.n	800e1e6 <_printf_i+0x10e>
 800e1da:	6821      	ldr	r1, [r4, #0]
 800e1dc:	432e      	orrs	r6, r5
 800e1de:	f021 0104 	bic.w	r1, r1, #4
 800e1e2:	6021      	str	r1, [r4, #0]
 800e1e4:	d04b      	beq.n	800e27e <_printf_i+0x1a6>
 800e1e6:	4616      	mov	r6, r2
 800e1e8:	fbb5 f1f3 	udiv	r1, r5, r3
 800e1ec:	fb03 5711 	mls	r7, r3, r1, r5
 800e1f0:	5dc7      	ldrb	r7, [r0, r7]
 800e1f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e1f6:	462f      	mov	r7, r5
 800e1f8:	42bb      	cmp	r3, r7
 800e1fa:	460d      	mov	r5, r1
 800e1fc:	d9f4      	bls.n	800e1e8 <_printf_i+0x110>
 800e1fe:	2b08      	cmp	r3, #8
 800e200:	d10b      	bne.n	800e21a <_printf_i+0x142>
 800e202:	6823      	ldr	r3, [r4, #0]
 800e204:	07df      	lsls	r7, r3, #31
 800e206:	d508      	bpl.n	800e21a <_printf_i+0x142>
 800e208:	6923      	ldr	r3, [r4, #16]
 800e20a:	6861      	ldr	r1, [r4, #4]
 800e20c:	4299      	cmp	r1, r3
 800e20e:	bfde      	ittt	le
 800e210:	2330      	movle	r3, #48	@ 0x30
 800e212:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e216:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e21a:	1b92      	subs	r2, r2, r6
 800e21c:	6122      	str	r2, [r4, #16]
 800e21e:	f8cd a000 	str.w	sl, [sp]
 800e222:	464b      	mov	r3, r9
 800e224:	aa03      	add	r2, sp, #12
 800e226:	4621      	mov	r1, r4
 800e228:	4640      	mov	r0, r8
 800e22a:	f7ff fee8 	bl	800dffe <_printf_common>
 800e22e:	3001      	adds	r0, #1
 800e230:	d14a      	bne.n	800e2c8 <_printf_i+0x1f0>
 800e232:	f04f 30ff 	mov.w	r0, #4294967295
 800e236:	b004      	add	sp, #16
 800e238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e23c:	6823      	ldr	r3, [r4, #0]
 800e23e:	f043 0320 	orr.w	r3, r3, #32
 800e242:	6023      	str	r3, [r4, #0]
 800e244:	4832      	ldr	r0, [pc, #200]	@ (800e310 <_printf_i+0x238>)
 800e246:	2778      	movs	r7, #120	@ 0x78
 800e248:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e24c:	6823      	ldr	r3, [r4, #0]
 800e24e:	6831      	ldr	r1, [r6, #0]
 800e250:	061f      	lsls	r7, r3, #24
 800e252:	f851 5b04 	ldr.w	r5, [r1], #4
 800e256:	d402      	bmi.n	800e25e <_printf_i+0x186>
 800e258:	065f      	lsls	r7, r3, #25
 800e25a:	bf48      	it	mi
 800e25c:	b2ad      	uxthmi	r5, r5
 800e25e:	6031      	str	r1, [r6, #0]
 800e260:	07d9      	lsls	r1, r3, #31
 800e262:	bf44      	itt	mi
 800e264:	f043 0320 	orrmi.w	r3, r3, #32
 800e268:	6023      	strmi	r3, [r4, #0]
 800e26a:	b11d      	cbz	r5, 800e274 <_printf_i+0x19c>
 800e26c:	2310      	movs	r3, #16
 800e26e:	e7ad      	b.n	800e1cc <_printf_i+0xf4>
 800e270:	4826      	ldr	r0, [pc, #152]	@ (800e30c <_printf_i+0x234>)
 800e272:	e7e9      	b.n	800e248 <_printf_i+0x170>
 800e274:	6823      	ldr	r3, [r4, #0]
 800e276:	f023 0320 	bic.w	r3, r3, #32
 800e27a:	6023      	str	r3, [r4, #0]
 800e27c:	e7f6      	b.n	800e26c <_printf_i+0x194>
 800e27e:	4616      	mov	r6, r2
 800e280:	e7bd      	b.n	800e1fe <_printf_i+0x126>
 800e282:	6833      	ldr	r3, [r6, #0]
 800e284:	6825      	ldr	r5, [r4, #0]
 800e286:	6961      	ldr	r1, [r4, #20]
 800e288:	1d18      	adds	r0, r3, #4
 800e28a:	6030      	str	r0, [r6, #0]
 800e28c:	062e      	lsls	r6, r5, #24
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	d501      	bpl.n	800e296 <_printf_i+0x1be>
 800e292:	6019      	str	r1, [r3, #0]
 800e294:	e002      	b.n	800e29c <_printf_i+0x1c4>
 800e296:	0668      	lsls	r0, r5, #25
 800e298:	d5fb      	bpl.n	800e292 <_printf_i+0x1ba>
 800e29a:	8019      	strh	r1, [r3, #0]
 800e29c:	2300      	movs	r3, #0
 800e29e:	6123      	str	r3, [r4, #16]
 800e2a0:	4616      	mov	r6, r2
 800e2a2:	e7bc      	b.n	800e21e <_printf_i+0x146>
 800e2a4:	6833      	ldr	r3, [r6, #0]
 800e2a6:	1d1a      	adds	r2, r3, #4
 800e2a8:	6032      	str	r2, [r6, #0]
 800e2aa:	681e      	ldr	r6, [r3, #0]
 800e2ac:	6862      	ldr	r2, [r4, #4]
 800e2ae:	2100      	movs	r1, #0
 800e2b0:	4630      	mov	r0, r6
 800e2b2:	f7f1 ffa5 	bl	8000200 <memchr>
 800e2b6:	b108      	cbz	r0, 800e2bc <_printf_i+0x1e4>
 800e2b8:	1b80      	subs	r0, r0, r6
 800e2ba:	6060      	str	r0, [r4, #4]
 800e2bc:	6863      	ldr	r3, [r4, #4]
 800e2be:	6123      	str	r3, [r4, #16]
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e2c6:	e7aa      	b.n	800e21e <_printf_i+0x146>
 800e2c8:	6923      	ldr	r3, [r4, #16]
 800e2ca:	4632      	mov	r2, r6
 800e2cc:	4649      	mov	r1, r9
 800e2ce:	4640      	mov	r0, r8
 800e2d0:	47d0      	blx	sl
 800e2d2:	3001      	adds	r0, #1
 800e2d4:	d0ad      	beq.n	800e232 <_printf_i+0x15a>
 800e2d6:	6823      	ldr	r3, [r4, #0]
 800e2d8:	079b      	lsls	r3, r3, #30
 800e2da:	d413      	bmi.n	800e304 <_printf_i+0x22c>
 800e2dc:	68e0      	ldr	r0, [r4, #12]
 800e2de:	9b03      	ldr	r3, [sp, #12]
 800e2e0:	4298      	cmp	r0, r3
 800e2e2:	bfb8      	it	lt
 800e2e4:	4618      	movlt	r0, r3
 800e2e6:	e7a6      	b.n	800e236 <_printf_i+0x15e>
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	4632      	mov	r2, r6
 800e2ec:	4649      	mov	r1, r9
 800e2ee:	4640      	mov	r0, r8
 800e2f0:	47d0      	blx	sl
 800e2f2:	3001      	adds	r0, #1
 800e2f4:	d09d      	beq.n	800e232 <_printf_i+0x15a>
 800e2f6:	3501      	adds	r5, #1
 800e2f8:	68e3      	ldr	r3, [r4, #12]
 800e2fa:	9903      	ldr	r1, [sp, #12]
 800e2fc:	1a5b      	subs	r3, r3, r1
 800e2fe:	42ab      	cmp	r3, r5
 800e300:	dcf2      	bgt.n	800e2e8 <_printf_i+0x210>
 800e302:	e7eb      	b.n	800e2dc <_printf_i+0x204>
 800e304:	2500      	movs	r5, #0
 800e306:	f104 0619 	add.w	r6, r4, #25
 800e30a:	e7f5      	b.n	800e2f8 <_printf_i+0x220>
 800e30c:	0800ec0d 	.word	0x0800ec0d
 800e310:	0800ec1e 	.word	0x0800ec1e

0800e314 <__sflush_r>:
 800e314:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e31c:	0716      	lsls	r6, r2, #28
 800e31e:	4605      	mov	r5, r0
 800e320:	460c      	mov	r4, r1
 800e322:	d454      	bmi.n	800e3ce <__sflush_r+0xba>
 800e324:	684b      	ldr	r3, [r1, #4]
 800e326:	2b00      	cmp	r3, #0
 800e328:	dc02      	bgt.n	800e330 <__sflush_r+0x1c>
 800e32a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	dd48      	ble.n	800e3c2 <__sflush_r+0xae>
 800e330:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e332:	2e00      	cmp	r6, #0
 800e334:	d045      	beq.n	800e3c2 <__sflush_r+0xae>
 800e336:	2300      	movs	r3, #0
 800e338:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e33c:	682f      	ldr	r7, [r5, #0]
 800e33e:	6a21      	ldr	r1, [r4, #32]
 800e340:	602b      	str	r3, [r5, #0]
 800e342:	d030      	beq.n	800e3a6 <__sflush_r+0x92>
 800e344:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e346:	89a3      	ldrh	r3, [r4, #12]
 800e348:	0759      	lsls	r1, r3, #29
 800e34a:	d505      	bpl.n	800e358 <__sflush_r+0x44>
 800e34c:	6863      	ldr	r3, [r4, #4]
 800e34e:	1ad2      	subs	r2, r2, r3
 800e350:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e352:	b10b      	cbz	r3, 800e358 <__sflush_r+0x44>
 800e354:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e356:	1ad2      	subs	r2, r2, r3
 800e358:	2300      	movs	r3, #0
 800e35a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e35c:	6a21      	ldr	r1, [r4, #32]
 800e35e:	4628      	mov	r0, r5
 800e360:	47b0      	blx	r6
 800e362:	1c43      	adds	r3, r0, #1
 800e364:	89a3      	ldrh	r3, [r4, #12]
 800e366:	d106      	bne.n	800e376 <__sflush_r+0x62>
 800e368:	6829      	ldr	r1, [r5, #0]
 800e36a:	291d      	cmp	r1, #29
 800e36c:	d82b      	bhi.n	800e3c6 <__sflush_r+0xb2>
 800e36e:	4a2a      	ldr	r2, [pc, #168]	@ (800e418 <__sflush_r+0x104>)
 800e370:	40ca      	lsrs	r2, r1
 800e372:	07d6      	lsls	r6, r2, #31
 800e374:	d527      	bpl.n	800e3c6 <__sflush_r+0xb2>
 800e376:	2200      	movs	r2, #0
 800e378:	6062      	str	r2, [r4, #4]
 800e37a:	04d9      	lsls	r1, r3, #19
 800e37c:	6922      	ldr	r2, [r4, #16]
 800e37e:	6022      	str	r2, [r4, #0]
 800e380:	d504      	bpl.n	800e38c <__sflush_r+0x78>
 800e382:	1c42      	adds	r2, r0, #1
 800e384:	d101      	bne.n	800e38a <__sflush_r+0x76>
 800e386:	682b      	ldr	r3, [r5, #0]
 800e388:	b903      	cbnz	r3, 800e38c <__sflush_r+0x78>
 800e38a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e38c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e38e:	602f      	str	r7, [r5, #0]
 800e390:	b1b9      	cbz	r1, 800e3c2 <__sflush_r+0xae>
 800e392:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e396:	4299      	cmp	r1, r3
 800e398:	d002      	beq.n	800e3a0 <__sflush_r+0x8c>
 800e39a:	4628      	mov	r0, r5
 800e39c:	f7fe fde2 	bl	800cf64 <_free_r>
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	6363      	str	r3, [r4, #52]	@ 0x34
 800e3a4:	e00d      	b.n	800e3c2 <__sflush_r+0xae>
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	4628      	mov	r0, r5
 800e3aa:	47b0      	blx	r6
 800e3ac:	4602      	mov	r2, r0
 800e3ae:	1c50      	adds	r0, r2, #1
 800e3b0:	d1c9      	bne.n	800e346 <__sflush_r+0x32>
 800e3b2:	682b      	ldr	r3, [r5, #0]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d0c6      	beq.n	800e346 <__sflush_r+0x32>
 800e3b8:	2b1d      	cmp	r3, #29
 800e3ba:	d001      	beq.n	800e3c0 <__sflush_r+0xac>
 800e3bc:	2b16      	cmp	r3, #22
 800e3be:	d11e      	bne.n	800e3fe <__sflush_r+0xea>
 800e3c0:	602f      	str	r7, [r5, #0]
 800e3c2:	2000      	movs	r0, #0
 800e3c4:	e022      	b.n	800e40c <__sflush_r+0xf8>
 800e3c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3ca:	b21b      	sxth	r3, r3
 800e3cc:	e01b      	b.n	800e406 <__sflush_r+0xf2>
 800e3ce:	690f      	ldr	r7, [r1, #16]
 800e3d0:	2f00      	cmp	r7, #0
 800e3d2:	d0f6      	beq.n	800e3c2 <__sflush_r+0xae>
 800e3d4:	0793      	lsls	r3, r2, #30
 800e3d6:	680e      	ldr	r6, [r1, #0]
 800e3d8:	bf08      	it	eq
 800e3da:	694b      	ldreq	r3, [r1, #20]
 800e3dc:	600f      	str	r7, [r1, #0]
 800e3de:	bf18      	it	ne
 800e3e0:	2300      	movne	r3, #0
 800e3e2:	eba6 0807 	sub.w	r8, r6, r7
 800e3e6:	608b      	str	r3, [r1, #8]
 800e3e8:	f1b8 0f00 	cmp.w	r8, #0
 800e3ec:	dde9      	ble.n	800e3c2 <__sflush_r+0xae>
 800e3ee:	6a21      	ldr	r1, [r4, #32]
 800e3f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e3f2:	4643      	mov	r3, r8
 800e3f4:	463a      	mov	r2, r7
 800e3f6:	4628      	mov	r0, r5
 800e3f8:	47b0      	blx	r6
 800e3fa:	2800      	cmp	r0, #0
 800e3fc:	dc08      	bgt.n	800e410 <__sflush_r+0xfc>
 800e3fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e406:	81a3      	strh	r3, [r4, #12]
 800e408:	f04f 30ff 	mov.w	r0, #4294967295
 800e40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e410:	4407      	add	r7, r0
 800e412:	eba8 0800 	sub.w	r8, r8, r0
 800e416:	e7e7      	b.n	800e3e8 <__sflush_r+0xd4>
 800e418:	20400001 	.word	0x20400001

0800e41c <_fflush_r>:
 800e41c:	b538      	push	{r3, r4, r5, lr}
 800e41e:	690b      	ldr	r3, [r1, #16]
 800e420:	4605      	mov	r5, r0
 800e422:	460c      	mov	r4, r1
 800e424:	b913      	cbnz	r3, 800e42c <_fflush_r+0x10>
 800e426:	2500      	movs	r5, #0
 800e428:	4628      	mov	r0, r5
 800e42a:	bd38      	pop	{r3, r4, r5, pc}
 800e42c:	b118      	cbz	r0, 800e436 <_fflush_r+0x1a>
 800e42e:	6a03      	ldr	r3, [r0, #32]
 800e430:	b90b      	cbnz	r3, 800e436 <_fflush_r+0x1a>
 800e432:	f7fe fc1d 	bl	800cc70 <__sinit>
 800e436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d0f3      	beq.n	800e426 <_fflush_r+0xa>
 800e43e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e440:	07d0      	lsls	r0, r2, #31
 800e442:	d404      	bmi.n	800e44e <_fflush_r+0x32>
 800e444:	0599      	lsls	r1, r3, #22
 800e446:	d402      	bmi.n	800e44e <_fflush_r+0x32>
 800e448:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e44a:	f7fe fd7a 	bl	800cf42 <__retarget_lock_acquire_recursive>
 800e44e:	4628      	mov	r0, r5
 800e450:	4621      	mov	r1, r4
 800e452:	f7ff ff5f 	bl	800e314 <__sflush_r>
 800e456:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e458:	07da      	lsls	r2, r3, #31
 800e45a:	4605      	mov	r5, r0
 800e45c:	d4e4      	bmi.n	800e428 <_fflush_r+0xc>
 800e45e:	89a3      	ldrh	r3, [r4, #12]
 800e460:	059b      	lsls	r3, r3, #22
 800e462:	d4e1      	bmi.n	800e428 <_fflush_r+0xc>
 800e464:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e466:	f7fe fd6d 	bl	800cf44 <__retarget_lock_release_recursive>
 800e46a:	e7dd      	b.n	800e428 <_fflush_r+0xc>

0800e46c <__assert_func>:
 800e46c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e46e:	4614      	mov	r4, r2
 800e470:	461a      	mov	r2, r3
 800e472:	4b09      	ldr	r3, [pc, #36]	@ (800e498 <__assert_func+0x2c>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	4605      	mov	r5, r0
 800e478:	68d8      	ldr	r0, [r3, #12]
 800e47a:	b14c      	cbz	r4, 800e490 <__assert_func+0x24>
 800e47c:	4b07      	ldr	r3, [pc, #28]	@ (800e49c <__assert_func+0x30>)
 800e47e:	9100      	str	r1, [sp, #0]
 800e480:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e484:	4906      	ldr	r1, [pc, #24]	@ (800e4a0 <__assert_func+0x34>)
 800e486:	462b      	mov	r3, r5
 800e488:	f000 f822 	bl	800e4d0 <fiprintf>
 800e48c:	f7fd fc8c 	bl	800bda8 <abort>
 800e490:	4b04      	ldr	r3, [pc, #16]	@ (800e4a4 <__assert_func+0x38>)
 800e492:	461c      	mov	r4, r3
 800e494:	e7f3      	b.n	800e47e <__assert_func+0x12>
 800e496:	bf00      	nop
 800e498:	20000184 	.word	0x20000184
 800e49c:	0800ec2f 	.word	0x0800ec2f
 800e4a0:	0800ec3c 	.word	0x0800ec3c
 800e4a4:	0800ec6a 	.word	0x0800ec6a

0800e4a8 <_calloc_r>:
 800e4a8:	b570      	push	{r4, r5, r6, lr}
 800e4aa:	fba1 5402 	umull	r5, r4, r1, r2
 800e4ae:	b934      	cbnz	r4, 800e4be <_calloc_r+0x16>
 800e4b0:	4629      	mov	r1, r5
 800e4b2:	f7fd fcb5 	bl	800be20 <_malloc_r>
 800e4b6:	4606      	mov	r6, r0
 800e4b8:	b928      	cbnz	r0, 800e4c6 <_calloc_r+0x1e>
 800e4ba:	4630      	mov	r0, r6
 800e4bc:	bd70      	pop	{r4, r5, r6, pc}
 800e4be:	220c      	movs	r2, #12
 800e4c0:	6002      	str	r2, [r0, #0]
 800e4c2:	2600      	movs	r6, #0
 800e4c4:	e7f9      	b.n	800e4ba <_calloc_r+0x12>
 800e4c6:	462a      	mov	r2, r5
 800e4c8:	4621      	mov	r1, r4
 800e4ca:	f7fe fc5a 	bl	800cd82 <memset>
 800e4ce:	e7f4      	b.n	800e4ba <_calloc_r+0x12>

0800e4d0 <fiprintf>:
 800e4d0:	b40e      	push	{r1, r2, r3}
 800e4d2:	b503      	push	{r0, r1, lr}
 800e4d4:	4601      	mov	r1, r0
 800e4d6:	ab03      	add	r3, sp, #12
 800e4d8:	4805      	ldr	r0, [pc, #20]	@ (800e4f0 <fiprintf+0x20>)
 800e4da:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4de:	6800      	ldr	r0, [r0, #0]
 800e4e0:	9301      	str	r3, [sp, #4]
 800e4e2:	f000 f831 	bl	800e548 <_vfiprintf_r>
 800e4e6:	b002      	add	sp, #8
 800e4e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e4ec:	b003      	add	sp, #12
 800e4ee:	4770      	bx	lr
 800e4f0:	20000184 	.word	0x20000184

0800e4f4 <__sfputc_r>:
 800e4f4:	6893      	ldr	r3, [r2, #8]
 800e4f6:	3b01      	subs	r3, #1
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	b410      	push	{r4}
 800e4fc:	6093      	str	r3, [r2, #8]
 800e4fe:	da08      	bge.n	800e512 <__sfputc_r+0x1e>
 800e500:	6994      	ldr	r4, [r2, #24]
 800e502:	42a3      	cmp	r3, r4
 800e504:	db01      	blt.n	800e50a <__sfputc_r+0x16>
 800e506:	290a      	cmp	r1, #10
 800e508:	d103      	bne.n	800e512 <__sfputc_r+0x1e>
 800e50a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e50e:	f000 b933 	b.w	800e778 <__swbuf_r>
 800e512:	6813      	ldr	r3, [r2, #0]
 800e514:	1c58      	adds	r0, r3, #1
 800e516:	6010      	str	r0, [r2, #0]
 800e518:	7019      	strb	r1, [r3, #0]
 800e51a:	4608      	mov	r0, r1
 800e51c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e520:	4770      	bx	lr

0800e522 <__sfputs_r>:
 800e522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e524:	4606      	mov	r6, r0
 800e526:	460f      	mov	r7, r1
 800e528:	4614      	mov	r4, r2
 800e52a:	18d5      	adds	r5, r2, r3
 800e52c:	42ac      	cmp	r4, r5
 800e52e:	d101      	bne.n	800e534 <__sfputs_r+0x12>
 800e530:	2000      	movs	r0, #0
 800e532:	e007      	b.n	800e544 <__sfputs_r+0x22>
 800e534:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e538:	463a      	mov	r2, r7
 800e53a:	4630      	mov	r0, r6
 800e53c:	f7ff ffda 	bl	800e4f4 <__sfputc_r>
 800e540:	1c43      	adds	r3, r0, #1
 800e542:	d1f3      	bne.n	800e52c <__sfputs_r+0xa>
 800e544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e548 <_vfiprintf_r>:
 800e548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e54c:	460d      	mov	r5, r1
 800e54e:	b09d      	sub	sp, #116	@ 0x74
 800e550:	4614      	mov	r4, r2
 800e552:	4698      	mov	r8, r3
 800e554:	4606      	mov	r6, r0
 800e556:	b118      	cbz	r0, 800e560 <_vfiprintf_r+0x18>
 800e558:	6a03      	ldr	r3, [r0, #32]
 800e55a:	b90b      	cbnz	r3, 800e560 <_vfiprintf_r+0x18>
 800e55c:	f7fe fb88 	bl	800cc70 <__sinit>
 800e560:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e562:	07d9      	lsls	r1, r3, #31
 800e564:	d405      	bmi.n	800e572 <_vfiprintf_r+0x2a>
 800e566:	89ab      	ldrh	r3, [r5, #12]
 800e568:	059a      	lsls	r2, r3, #22
 800e56a:	d402      	bmi.n	800e572 <_vfiprintf_r+0x2a>
 800e56c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e56e:	f7fe fce8 	bl	800cf42 <__retarget_lock_acquire_recursive>
 800e572:	89ab      	ldrh	r3, [r5, #12]
 800e574:	071b      	lsls	r3, r3, #28
 800e576:	d501      	bpl.n	800e57c <_vfiprintf_r+0x34>
 800e578:	692b      	ldr	r3, [r5, #16]
 800e57a:	b99b      	cbnz	r3, 800e5a4 <_vfiprintf_r+0x5c>
 800e57c:	4629      	mov	r1, r5
 800e57e:	4630      	mov	r0, r6
 800e580:	f000 f938 	bl	800e7f4 <__swsetup_r>
 800e584:	b170      	cbz	r0, 800e5a4 <_vfiprintf_r+0x5c>
 800e586:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e588:	07dc      	lsls	r4, r3, #31
 800e58a:	d504      	bpl.n	800e596 <_vfiprintf_r+0x4e>
 800e58c:	f04f 30ff 	mov.w	r0, #4294967295
 800e590:	b01d      	add	sp, #116	@ 0x74
 800e592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e596:	89ab      	ldrh	r3, [r5, #12]
 800e598:	0598      	lsls	r0, r3, #22
 800e59a:	d4f7      	bmi.n	800e58c <_vfiprintf_r+0x44>
 800e59c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e59e:	f7fe fcd1 	bl	800cf44 <__retarget_lock_release_recursive>
 800e5a2:	e7f3      	b.n	800e58c <_vfiprintf_r+0x44>
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5a8:	2320      	movs	r3, #32
 800e5aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e5ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5b2:	2330      	movs	r3, #48	@ 0x30
 800e5b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e764 <_vfiprintf_r+0x21c>
 800e5b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e5bc:	f04f 0901 	mov.w	r9, #1
 800e5c0:	4623      	mov	r3, r4
 800e5c2:	469a      	mov	sl, r3
 800e5c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e5c8:	b10a      	cbz	r2, 800e5ce <_vfiprintf_r+0x86>
 800e5ca:	2a25      	cmp	r2, #37	@ 0x25
 800e5cc:	d1f9      	bne.n	800e5c2 <_vfiprintf_r+0x7a>
 800e5ce:	ebba 0b04 	subs.w	fp, sl, r4
 800e5d2:	d00b      	beq.n	800e5ec <_vfiprintf_r+0xa4>
 800e5d4:	465b      	mov	r3, fp
 800e5d6:	4622      	mov	r2, r4
 800e5d8:	4629      	mov	r1, r5
 800e5da:	4630      	mov	r0, r6
 800e5dc:	f7ff ffa1 	bl	800e522 <__sfputs_r>
 800e5e0:	3001      	adds	r0, #1
 800e5e2:	f000 80a7 	beq.w	800e734 <_vfiprintf_r+0x1ec>
 800e5e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e5e8:	445a      	add	r2, fp
 800e5ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800e5ec:	f89a 3000 	ldrb.w	r3, [sl]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	f000 809f 	beq.w	800e734 <_vfiprintf_r+0x1ec>
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	f04f 32ff 	mov.w	r2, #4294967295
 800e5fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e600:	f10a 0a01 	add.w	sl, sl, #1
 800e604:	9304      	str	r3, [sp, #16]
 800e606:	9307      	str	r3, [sp, #28]
 800e608:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e60c:	931a      	str	r3, [sp, #104]	@ 0x68
 800e60e:	4654      	mov	r4, sl
 800e610:	2205      	movs	r2, #5
 800e612:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e616:	4853      	ldr	r0, [pc, #332]	@ (800e764 <_vfiprintf_r+0x21c>)
 800e618:	f7f1 fdf2 	bl	8000200 <memchr>
 800e61c:	9a04      	ldr	r2, [sp, #16]
 800e61e:	b9d8      	cbnz	r0, 800e658 <_vfiprintf_r+0x110>
 800e620:	06d1      	lsls	r1, r2, #27
 800e622:	bf44      	itt	mi
 800e624:	2320      	movmi	r3, #32
 800e626:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e62a:	0713      	lsls	r3, r2, #28
 800e62c:	bf44      	itt	mi
 800e62e:	232b      	movmi	r3, #43	@ 0x2b
 800e630:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e634:	f89a 3000 	ldrb.w	r3, [sl]
 800e638:	2b2a      	cmp	r3, #42	@ 0x2a
 800e63a:	d015      	beq.n	800e668 <_vfiprintf_r+0x120>
 800e63c:	9a07      	ldr	r2, [sp, #28]
 800e63e:	4654      	mov	r4, sl
 800e640:	2000      	movs	r0, #0
 800e642:	f04f 0c0a 	mov.w	ip, #10
 800e646:	4621      	mov	r1, r4
 800e648:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e64c:	3b30      	subs	r3, #48	@ 0x30
 800e64e:	2b09      	cmp	r3, #9
 800e650:	d94b      	bls.n	800e6ea <_vfiprintf_r+0x1a2>
 800e652:	b1b0      	cbz	r0, 800e682 <_vfiprintf_r+0x13a>
 800e654:	9207      	str	r2, [sp, #28]
 800e656:	e014      	b.n	800e682 <_vfiprintf_r+0x13a>
 800e658:	eba0 0308 	sub.w	r3, r0, r8
 800e65c:	fa09 f303 	lsl.w	r3, r9, r3
 800e660:	4313      	orrs	r3, r2
 800e662:	9304      	str	r3, [sp, #16]
 800e664:	46a2      	mov	sl, r4
 800e666:	e7d2      	b.n	800e60e <_vfiprintf_r+0xc6>
 800e668:	9b03      	ldr	r3, [sp, #12]
 800e66a:	1d19      	adds	r1, r3, #4
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	9103      	str	r1, [sp, #12]
 800e670:	2b00      	cmp	r3, #0
 800e672:	bfbb      	ittet	lt
 800e674:	425b      	neglt	r3, r3
 800e676:	f042 0202 	orrlt.w	r2, r2, #2
 800e67a:	9307      	strge	r3, [sp, #28]
 800e67c:	9307      	strlt	r3, [sp, #28]
 800e67e:	bfb8      	it	lt
 800e680:	9204      	strlt	r2, [sp, #16]
 800e682:	7823      	ldrb	r3, [r4, #0]
 800e684:	2b2e      	cmp	r3, #46	@ 0x2e
 800e686:	d10a      	bne.n	800e69e <_vfiprintf_r+0x156>
 800e688:	7863      	ldrb	r3, [r4, #1]
 800e68a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e68c:	d132      	bne.n	800e6f4 <_vfiprintf_r+0x1ac>
 800e68e:	9b03      	ldr	r3, [sp, #12]
 800e690:	1d1a      	adds	r2, r3, #4
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	9203      	str	r2, [sp, #12]
 800e696:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e69a:	3402      	adds	r4, #2
 800e69c:	9305      	str	r3, [sp, #20]
 800e69e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e774 <_vfiprintf_r+0x22c>
 800e6a2:	7821      	ldrb	r1, [r4, #0]
 800e6a4:	2203      	movs	r2, #3
 800e6a6:	4650      	mov	r0, sl
 800e6a8:	f7f1 fdaa 	bl	8000200 <memchr>
 800e6ac:	b138      	cbz	r0, 800e6be <_vfiprintf_r+0x176>
 800e6ae:	9b04      	ldr	r3, [sp, #16]
 800e6b0:	eba0 000a 	sub.w	r0, r0, sl
 800e6b4:	2240      	movs	r2, #64	@ 0x40
 800e6b6:	4082      	lsls	r2, r0
 800e6b8:	4313      	orrs	r3, r2
 800e6ba:	3401      	adds	r4, #1
 800e6bc:	9304      	str	r3, [sp, #16]
 800e6be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6c2:	4829      	ldr	r0, [pc, #164]	@ (800e768 <_vfiprintf_r+0x220>)
 800e6c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e6c8:	2206      	movs	r2, #6
 800e6ca:	f7f1 fd99 	bl	8000200 <memchr>
 800e6ce:	2800      	cmp	r0, #0
 800e6d0:	d03f      	beq.n	800e752 <_vfiprintf_r+0x20a>
 800e6d2:	4b26      	ldr	r3, [pc, #152]	@ (800e76c <_vfiprintf_r+0x224>)
 800e6d4:	bb1b      	cbnz	r3, 800e71e <_vfiprintf_r+0x1d6>
 800e6d6:	9b03      	ldr	r3, [sp, #12]
 800e6d8:	3307      	adds	r3, #7
 800e6da:	f023 0307 	bic.w	r3, r3, #7
 800e6de:	3308      	adds	r3, #8
 800e6e0:	9303      	str	r3, [sp, #12]
 800e6e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6e4:	443b      	add	r3, r7
 800e6e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e6e8:	e76a      	b.n	800e5c0 <_vfiprintf_r+0x78>
 800e6ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800e6ee:	460c      	mov	r4, r1
 800e6f0:	2001      	movs	r0, #1
 800e6f2:	e7a8      	b.n	800e646 <_vfiprintf_r+0xfe>
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	3401      	adds	r4, #1
 800e6f8:	9305      	str	r3, [sp, #20]
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	f04f 0c0a 	mov.w	ip, #10
 800e700:	4620      	mov	r0, r4
 800e702:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e706:	3a30      	subs	r2, #48	@ 0x30
 800e708:	2a09      	cmp	r2, #9
 800e70a:	d903      	bls.n	800e714 <_vfiprintf_r+0x1cc>
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d0c6      	beq.n	800e69e <_vfiprintf_r+0x156>
 800e710:	9105      	str	r1, [sp, #20]
 800e712:	e7c4      	b.n	800e69e <_vfiprintf_r+0x156>
 800e714:	fb0c 2101 	mla	r1, ip, r1, r2
 800e718:	4604      	mov	r4, r0
 800e71a:	2301      	movs	r3, #1
 800e71c:	e7f0      	b.n	800e700 <_vfiprintf_r+0x1b8>
 800e71e:	ab03      	add	r3, sp, #12
 800e720:	9300      	str	r3, [sp, #0]
 800e722:	462a      	mov	r2, r5
 800e724:	4b12      	ldr	r3, [pc, #72]	@ (800e770 <_vfiprintf_r+0x228>)
 800e726:	a904      	add	r1, sp, #16
 800e728:	4630      	mov	r0, r6
 800e72a:	f3af 8000 	nop.w
 800e72e:	4607      	mov	r7, r0
 800e730:	1c78      	adds	r0, r7, #1
 800e732:	d1d6      	bne.n	800e6e2 <_vfiprintf_r+0x19a>
 800e734:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e736:	07d9      	lsls	r1, r3, #31
 800e738:	d405      	bmi.n	800e746 <_vfiprintf_r+0x1fe>
 800e73a:	89ab      	ldrh	r3, [r5, #12]
 800e73c:	059a      	lsls	r2, r3, #22
 800e73e:	d402      	bmi.n	800e746 <_vfiprintf_r+0x1fe>
 800e740:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e742:	f7fe fbff 	bl	800cf44 <__retarget_lock_release_recursive>
 800e746:	89ab      	ldrh	r3, [r5, #12]
 800e748:	065b      	lsls	r3, r3, #25
 800e74a:	f53f af1f 	bmi.w	800e58c <_vfiprintf_r+0x44>
 800e74e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e750:	e71e      	b.n	800e590 <_vfiprintf_r+0x48>
 800e752:	ab03      	add	r3, sp, #12
 800e754:	9300      	str	r3, [sp, #0]
 800e756:	462a      	mov	r2, r5
 800e758:	4b05      	ldr	r3, [pc, #20]	@ (800e770 <_vfiprintf_r+0x228>)
 800e75a:	a904      	add	r1, sp, #16
 800e75c:	4630      	mov	r0, r6
 800e75e:	f7ff fcbb 	bl	800e0d8 <_printf_i>
 800e762:	e7e4      	b.n	800e72e <_vfiprintf_r+0x1e6>
 800e764:	0800ec6b 	.word	0x0800ec6b
 800e768:	0800ec75 	.word	0x0800ec75
 800e76c:	00000000 	.word	0x00000000
 800e770:	0800e523 	.word	0x0800e523
 800e774:	0800ec71 	.word	0x0800ec71

0800e778 <__swbuf_r>:
 800e778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e77a:	460e      	mov	r6, r1
 800e77c:	4614      	mov	r4, r2
 800e77e:	4605      	mov	r5, r0
 800e780:	b118      	cbz	r0, 800e78a <__swbuf_r+0x12>
 800e782:	6a03      	ldr	r3, [r0, #32]
 800e784:	b90b      	cbnz	r3, 800e78a <__swbuf_r+0x12>
 800e786:	f7fe fa73 	bl	800cc70 <__sinit>
 800e78a:	69a3      	ldr	r3, [r4, #24]
 800e78c:	60a3      	str	r3, [r4, #8]
 800e78e:	89a3      	ldrh	r3, [r4, #12]
 800e790:	071a      	lsls	r2, r3, #28
 800e792:	d501      	bpl.n	800e798 <__swbuf_r+0x20>
 800e794:	6923      	ldr	r3, [r4, #16]
 800e796:	b943      	cbnz	r3, 800e7aa <__swbuf_r+0x32>
 800e798:	4621      	mov	r1, r4
 800e79a:	4628      	mov	r0, r5
 800e79c:	f000 f82a 	bl	800e7f4 <__swsetup_r>
 800e7a0:	b118      	cbz	r0, 800e7aa <__swbuf_r+0x32>
 800e7a2:	f04f 37ff 	mov.w	r7, #4294967295
 800e7a6:	4638      	mov	r0, r7
 800e7a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7aa:	6823      	ldr	r3, [r4, #0]
 800e7ac:	6922      	ldr	r2, [r4, #16]
 800e7ae:	1a98      	subs	r0, r3, r2
 800e7b0:	6963      	ldr	r3, [r4, #20]
 800e7b2:	b2f6      	uxtb	r6, r6
 800e7b4:	4283      	cmp	r3, r0
 800e7b6:	4637      	mov	r7, r6
 800e7b8:	dc05      	bgt.n	800e7c6 <__swbuf_r+0x4e>
 800e7ba:	4621      	mov	r1, r4
 800e7bc:	4628      	mov	r0, r5
 800e7be:	f7ff fe2d 	bl	800e41c <_fflush_r>
 800e7c2:	2800      	cmp	r0, #0
 800e7c4:	d1ed      	bne.n	800e7a2 <__swbuf_r+0x2a>
 800e7c6:	68a3      	ldr	r3, [r4, #8]
 800e7c8:	3b01      	subs	r3, #1
 800e7ca:	60a3      	str	r3, [r4, #8]
 800e7cc:	6823      	ldr	r3, [r4, #0]
 800e7ce:	1c5a      	adds	r2, r3, #1
 800e7d0:	6022      	str	r2, [r4, #0]
 800e7d2:	701e      	strb	r6, [r3, #0]
 800e7d4:	6962      	ldr	r2, [r4, #20]
 800e7d6:	1c43      	adds	r3, r0, #1
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	d004      	beq.n	800e7e6 <__swbuf_r+0x6e>
 800e7dc:	89a3      	ldrh	r3, [r4, #12]
 800e7de:	07db      	lsls	r3, r3, #31
 800e7e0:	d5e1      	bpl.n	800e7a6 <__swbuf_r+0x2e>
 800e7e2:	2e0a      	cmp	r6, #10
 800e7e4:	d1df      	bne.n	800e7a6 <__swbuf_r+0x2e>
 800e7e6:	4621      	mov	r1, r4
 800e7e8:	4628      	mov	r0, r5
 800e7ea:	f7ff fe17 	bl	800e41c <_fflush_r>
 800e7ee:	2800      	cmp	r0, #0
 800e7f0:	d0d9      	beq.n	800e7a6 <__swbuf_r+0x2e>
 800e7f2:	e7d6      	b.n	800e7a2 <__swbuf_r+0x2a>

0800e7f4 <__swsetup_r>:
 800e7f4:	b538      	push	{r3, r4, r5, lr}
 800e7f6:	4b29      	ldr	r3, [pc, #164]	@ (800e89c <__swsetup_r+0xa8>)
 800e7f8:	4605      	mov	r5, r0
 800e7fa:	6818      	ldr	r0, [r3, #0]
 800e7fc:	460c      	mov	r4, r1
 800e7fe:	b118      	cbz	r0, 800e808 <__swsetup_r+0x14>
 800e800:	6a03      	ldr	r3, [r0, #32]
 800e802:	b90b      	cbnz	r3, 800e808 <__swsetup_r+0x14>
 800e804:	f7fe fa34 	bl	800cc70 <__sinit>
 800e808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e80c:	0719      	lsls	r1, r3, #28
 800e80e:	d422      	bmi.n	800e856 <__swsetup_r+0x62>
 800e810:	06da      	lsls	r2, r3, #27
 800e812:	d407      	bmi.n	800e824 <__swsetup_r+0x30>
 800e814:	2209      	movs	r2, #9
 800e816:	602a      	str	r2, [r5, #0]
 800e818:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e81c:	81a3      	strh	r3, [r4, #12]
 800e81e:	f04f 30ff 	mov.w	r0, #4294967295
 800e822:	e033      	b.n	800e88c <__swsetup_r+0x98>
 800e824:	0758      	lsls	r0, r3, #29
 800e826:	d512      	bpl.n	800e84e <__swsetup_r+0x5a>
 800e828:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e82a:	b141      	cbz	r1, 800e83e <__swsetup_r+0x4a>
 800e82c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e830:	4299      	cmp	r1, r3
 800e832:	d002      	beq.n	800e83a <__swsetup_r+0x46>
 800e834:	4628      	mov	r0, r5
 800e836:	f7fe fb95 	bl	800cf64 <_free_r>
 800e83a:	2300      	movs	r3, #0
 800e83c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e83e:	89a3      	ldrh	r3, [r4, #12]
 800e840:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e844:	81a3      	strh	r3, [r4, #12]
 800e846:	2300      	movs	r3, #0
 800e848:	6063      	str	r3, [r4, #4]
 800e84a:	6923      	ldr	r3, [r4, #16]
 800e84c:	6023      	str	r3, [r4, #0]
 800e84e:	89a3      	ldrh	r3, [r4, #12]
 800e850:	f043 0308 	orr.w	r3, r3, #8
 800e854:	81a3      	strh	r3, [r4, #12]
 800e856:	6923      	ldr	r3, [r4, #16]
 800e858:	b94b      	cbnz	r3, 800e86e <__swsetup_r+0x7a>
 800e85a:	89a3      	ldrh	r3, [r4, #12]
 800e85c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e864:	d003      	beq.n	800e86e <__swsetup_r+0x7a>
 800e866:	4621      	mov	r1, r4
 800e868:	4628      	mov	r0, r5
 800e86a:	f000 f83f 	bl	800e8ec <__smakebuf_r>
 800e86e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e872:	f013 0201 	ands.w	r2, r3, #1
 800e876:	d00a      	beq.n	800e88e <__swsetup_r+0x9a>
 800e878:	2200      	movs	r2, #0
 800e87a:	60a2      	str	r2, [r4, #8]
 800e87c:	6962      	ldr	r2, [r4, #20]
 800e87e:	4252      	negs	r2, r2
 800e880:	61a2      	str	r2, [r4, #24]
 800e882:	6922      	ldr	r2, [r4, #16]
 800e884:	b942      	cbnz	r2, 800e898 <__swsetup_r+0xa4>
 800e886:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e88a:	d1c5      	bne.n	800e818 <__swsetup_r+0x24>
 800e88c:	bd38      	pop	{r3, r4, r5, pc}
 800e88e:	0799      	lsls	r1, r3, #30
 800e890:	bf58      	it	pl
 800e892:	6962      	ldrpl	r2, [r4, #20]
 800e894:	60a2      	str	r2, [r4, #8]
 800e896:	e7f4      	b.n	800e882 <__swsetup_r+0x8e>
 800e898:	2000      	movs	r0, #0
 800e89a:	e7f7      	b.n	800e88c <__swsetup_r+0x98>
 800e89c:	20000184 	.word	0x20000184

0800e8a0 <__swhatbuf_r>:
 800e8a0:	b570      	push	{r4, r5, r6, lr}
 800e8a2:	460c      	mov	r4, r1
 800e8a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8a8:	2900      	cmp	r1, #0
 800e8aa:	b096      	sub	sp, #88	@ 0x58
 800e8ac:	4615      	mov	r5, r2
 800e8ae:	461e      	mov	r6, r3
 800e8b0:	da0d      	bge.n	800e8ce <__swhatbuf_r+0x2e>
 800e8b2:	89a3      	ldrh	r3, [r4, #12]
 800e8b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e8b8:	f04f 0100 	mov.w	r1, #0
 800e8bc:	bf14      	ite	ne
 800e8be:	2340      	movne	r3, #64	@ 0x40
 800e8c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e8c4:	2000      	movs	r0, #0
 800e8c6:	6031      	str	r1, [r6, #0]
 800e8c8:	602b      	str	r3, [r5, #0]
 800e8ca:	b016      	add	sp, #88	@ 0x58
 800e8cc:	bd70      	pop	{r4, r5, r6, pc}
 800e8ce:	466a      	mov	r2, sp
 800e8d0:	f000 f848 	bl	800e964 <_fstat_r>
 800e8d4:	2800      	cmp	r0, #0
 800e8d6:	dbec      	blt.n	800e8b2 <__swhatbuf_r+0x12>
 800e8d8:	9901      	ldr	r1, [sp, #4]
 800e8da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e8de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e8e2:	4259      	negs	r1, r3
 800e8e4:	4159      	adcs	r1, r3
 800e8e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e8ea:	e7eb      	b.n	800e8c4 <__swhatbuf_r+0x24>

0800e8ec <__smakebuf_r>:
 800e8ec:	898b      	ldrh	r3, [r1, #12]
 800e8ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e8f0:	079d      	lsls	r5, r3, #30
 800e8f2:	4606      	mov	r6, r0
 800e8f4:	460c      	mov	r4, r1
 800e8f6:	d507      	bpl.n	800e908 <__smakebuf_r+0x1c>
 800e8f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e8fc:	6023      	str	r3, [r4, #0]
 800e8fe:	6123      	str	r3, [r4, #16]
 800e900:	2301      	movs	r3, #1
 800e902:	6163      	str	r3, [r4, #20]
 800e904:	b003      	add	sp, #12
 800e906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e908:	ab01      	add	r3, sp, #4
 800e90a:	466a      	mov	r2, sp
 800e90c:	f7ff ffc8 	bl	800e8a0 <__swhatbuf_r>
 800e910:	9f00      	ldr	r7, [sp, #0]
 800e912:	4605      	mov	r5, r0
 800e914:	4639      	mov	r1, r7
 800e916:	4630      	mov	r0, r6
 800e918:	f7fd fa82 	bl	800be20 <_malloc_r>
 800e91c:	b948      	cbnz	r0, 800e932 <__smakebuf_r+0x46>
 800e91e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e922:	059a      	lsls	r2, r3, #22
 800e924:	d4ee      	bmi.n	800e904 <__smakebuf_r+0x18>
 800e926:	f023 0303 	bic.w	r3, r3, #3
 800e92a:	f043 0302 	orr.w	r3, r3, #2
 800e92e:	81a3      	strh	r3, [r4, #12]
 800e930:	e7e2      	b.n	800e8f8 <__smakebuf_r+0xc>
 800e932:	89a3      	ldrh	r3, [r4, #12]
 800e934:	6020      	str	r0, [r4, #0]
 800e936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e93a:	81a3      	strh	r3, [r4, #12]
 800e93c:	9b01      	ldr	r3, [sp, #4]
 800e93e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e942:	b15b      	cbz	r3, 800e95c <__smakebuf_r+0x70>
 800e944:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e948:	4630      	mov	r0, r6
 800e94a:	f000 f81d 	bl	800e988 <_isatty_r>
 800e94e:	b128      	cbz	r0, 800e95c <__smakebuf_r+0x70>
 800e950:	89a3      	ldrh	r3, [r4, #12]
 800e952:	f023 0303 	bic.w	r3, r3, #3
 800e956:	f043 0301 	orr.w	r3, r3, #1
 800e95a:	81a3      	strh	r3, [r4, #12]
 800e95c:	89a3      	ldrh	r3, [r4, #12]
 800e95e:	431d      	orrs	r5, r3
 800e960:	81a5      	strh	r5, [r4, #12]
 800e962:	e7cf      	b.n	800e904 <__smakebuf_r+0x18>

0800e964 <_fstat_r>:
 800e964:	b538      	push	{r3, r4, r5, lr}
 800e966:	4d07      	ldr	r5, [pc, #28]	@ (800e984 <_fstat_r+0x20>)
 800e968:	2300      	movs	r3, #0
 800e96a:	4604      	mov	r4, r0
 800e96c:	4608      	mov	r0, r1
 800e96e:	4611      	mov	r1, r2
 800e970:	602b      	str	r3, [r5, #0]
 800e972:	f7f4 fb17 	bl	8002fa4 <_fstat>
 800e976:	1c43      	adds	r3, r0, #1
 800e978:	d102      	bne.n	800e980 <_fstat_r+0x1c>
 800e97a:	682b      	ldr	r3, [r5, #0]
 800e97c:	b103      	cbz	r3, 800e980 <_fstat_r+0x1c>
 800e97e:	6023      	str	r3, [r4, #0]
 800e980:	bd38      	pop	{r3, r4, r5, pc}
 800e982:	bf00      	nop
 800e984:	20001c70 	.word	0x20001c70

0800e988 <_isatty_r>:
 800e988:	b538      	push	{r3, r4, r5, lr}
 800e98a:	4d06      	ldr	r5, [pc, #24]	@ (800e9a4 <_isatty_r+0x1c>)
 800e98c:	2300      	movs	r3, #0
 800e98e:	4604      	mov	r4, r0
 800e990:	4608      	mov	r0, r1
 800e992:	602b      	str	r3, [r5, #0]
 800e994:	f7f4 fb16 	bl	8002fc4 <_isatty>
 800e998:	1c43      	adds	r3, r0, #1
 800e99a:	d102      	bne.n	800e9a2 <_isatty_r+0x1a>
 800e99c:	682b      	ldr	r3, [r5, #0]
 800e99e:	b103      	cbz	r3, 800e9a2 <_isatty_r+0x1a>
 800e9a0:	6023      	str	r3, [r4, #0]
 800e9a2:	bd38      	pop	{r3, r4, r5, pc}
 800e9a4:	20001c70 	.word	0x20001c70

0800e9a8 <_init>:
 800e9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9aa:	bf00      	nop
 800e9ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9ae:	bc08      	pop	{r3}
 800e9b0:	469e      	mov	lr, r3
 800e9b2:	4770      	bx	lr

0800e9b4 <_fini>:
 800e9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9b6:	bf00      	nop
 800e9b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9ba:	bc08      	pop	{r3}
 800e9bc:	469e      	mov	lr, r3
 800e9be:	4770      	bx	lr
